
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012a  00800060  00002a26  00002aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080018a  0080018a  00002be4  2**0
                  ALLOC
  3 .stab         00001b78  00000000  00000000  00002be4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000df7  00000000  00000000  0000475c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005553  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000056f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000058e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009076  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a24c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a702  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ac 0c 	call	0x1958	; 0x1958 <main>
      8a:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e6       	ldi	r22, 0x66	; 102
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e6 14 	jmp	0x29cc	; 0x29cc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ea 14 	jmp	0x29d4	; 0x29d4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e2 59       	subi	r30, 0x92	; 146
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_interface.h"

u8 Global_u8ReadingStyle;
void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2f 97       	sbiw	r28, 0x0f	; 15
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e5c:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e4       	ldi	r27, 0x40	; 64
     e72:	8b 87       	std	Y+11, r24	; 0x0b
     e74:	9c 87       	std	Y+12, r25	; 0x0c
     e76:	ad 87       	std	Y+13, r26	; 0x0d
     e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	a9 87       	std	Y+9, r26	; 0x09
     e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <CLCD_voidSendCommand+0xee>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <CLCD_voidSendCommand+0xdc>
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <CLCD_voidSendCommand+0xd0>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <CLCD_voidSendCommand+0x118>
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>


}
     f58:	2f 96       	adiw	r28, 0x0f	; 15
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	2f 97       	sbiw	r28, 0x0f	; 15
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
	/*Set data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	6f 85       	ldd	r22, Y+15	; 0x0f
     f98:	0e 94 2f 0b 	call	0x165e	; 0x165e <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e4       	ldi	r27, 0x40	; 64
     fae:	8b 87       	std	Y+11, r24	; 0x0b
     fb0:	9c 87       	std	Y+12, r25	; 0x0c
     fb2:	ad 87       	std	Y+13, r26	; 0x0d
     fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8f 83       	std	Y+7, r24	; 0x07
     fd0:	98 87       	std	Y+8, r25	; 0x08
     fd2:	a9 87       	std	Y+9, r26	; 0x09
     fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd6:	6f 81       	ldd	r22, Y+7	; 0x07
     fd8:	78 85       	ldd	r23, Y+8	; 0x08
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6b 85       	ldd	r22, Y+11	; 0x0b
    1012:	7c 85       	ldd	r23, Y+12	; 0x0c
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <CLCD_voidSendData+0xee>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <CLCD_voidSendData+0xdc>
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <CLCD_voidSendData+0xd0>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6f 81       	ldd	r22, Y+7	; 0x07
    1064:	78 85       	ldd	r23, Y+8	; 0x08
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <CLCD_voidSendData+0x118>
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	62 e0       	ldi	r22, 0x02	; 2
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>

}
    1094:	2f 96       	adiw	r28, 0x0f	; 15
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcData)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <CLCD_voidSendString+0x6>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9b 83       	std	Y+3, r25	; 0x03
    10b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    10b6:	19 82       	std	Y+1, r1	; 0x01
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <CLCD_voidSendString+0x30>
	while((Copy_pcData[Local_u8Counter])!='\0')
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	fc 01       	movw	r30, r24
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	80 81       	ld	r24, Z
    10cc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
		Local_u8Counter++;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcData)
{
	u8 Local_u8Counter=0;
	while((Copy_pcData[Local_u8Counter])!='\0')
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	39 f7       	brne	.-50     	; 0x10ba <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
		Local_u8Counter++;
	}

}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	2e 97       	sbiw	r28, 0x0e	; 14
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e2       	ldi	r26, 0x20	; 32
    1112:	b2 e4       	ldi	r27, 0x42	; 66
    1114:	8b 87       	std	Y+11, r24	; 0x0b
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	ad 87       	std	Y+13, r26	; 0x0d
    111a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6b 85       	ldd	r22, Y+11	; 0x0b
    111e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1120:	8d 85       	ldd	r24, Y+13	; 0x0d
    1122:	9e 85       	ldd	r25, Y+14	; 0x0e
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8f 83       	std	Y+7, r24	; 0x07
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	a9 87       	std	Y+9, r26	; 0x09
    113a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <CLCD_voidInit+0x66>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6b 85       	ldd	r22, Y+11	; 0x0b
    1178:	7c 85       	ldd	r23, Y+12	; 0x0c
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	9e 85       	ldd	r25, Y+14	; 0x0e
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	0f c0       	rjmp	.+30     	; 0x11be <CLCD_voidInit+0xc6>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <CLCD_voidInit+0xb4>
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <CLCD_voidInit+0xa8>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <CLCD_voidInit+0xf0>
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30ms*/
	_delay_ms(40);
	/*Function set command:2 lines ,5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
    11f0:	88 e3       	ldi	r24, 0x38	; 56
    11f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*display on/off control:display enable,disable cursor,no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    11f6:	8c e0       	ldi	r24, 0x0C	; 12
    11f8:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Clear display*/
	CLCD_voidSendCommand(1);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>

}
    1202:	2e 96       	adiw	r28, 0x0e	; 14
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <CLCD_voidGoToXY+0x6>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	if(Copy_u8XPos==0)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	88 23       	and	r24, r24
    1228:	19 f4       	brne	.+6      	; 0x1230 <CLCD_voidGoToXY+0x1c>
	{
		//locate in the first line
		Local_u8Adress=Copy_u8YPos;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	06 c0       	rjmp	.+12     	; 0x123c <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	19 f4       	brne	.+6      	; 0x123c <CLCD_voidGoToXY+0x28>
	{
		//locate in the second line
		Local_u8Adress=Copy_u8YPos+0x40;
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	80 5c       	subi	r24, 0xC0	; 192
    123a:	89 83       	std	Y+1, r24	; 0x01
	}
	//Send bit 8 in DDRAM and then the rest bits are the address then send it .
	CLCD_voidSendCommand(Local_u8Adress+128);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	80 58       	subi	r24, 0x80	; 128
    1240:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 * Copy_pu8Pattern,u8 Copy_pu8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	27 97       	sbiw	r28, 0x07	; 7
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	6d 83       	std	Y+5, r22	; 0x05
    126a:	4e 83       	std	Y+6, r20	; 0x06
    126c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress=0,Local_u8iterator;
    126e:	1a 82       	std	Y+2, r1	; 0x02
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	8a 83       	std	Y+2, r24	; 0x02
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 5c       	subi	r24, 0xC0	; 192
    1288:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	80 81       	ld	r24, Z
    12a2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	78 f3       	brcs	.-34     	; 0x1290 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/*go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	//Display the pattern written on the CGRAM
	CLCD_voidSendData(Copy_pu8PatternNumber);
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>

}
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)//99
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2e 97       	sbiw	r28, 0x0e	; 14
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	6b 87       	std	Y+11, r22	; 0x0b
    12e8:	7c 87       	std	Y+12, r23	; 0x0c
    12ea:	8d 87       	std	Y+13, r24	; 0x0d
    12ec:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8Counter=0,Local_u8LcdNumber;
    12ee:	1a 86       	std	Y+10, r1	; 0x0a
	u32 Local_u32divisible=1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	af 83       	std	Y+7, r26	; 0x07
    12fe:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32temp=Copy_u32Number;
    1300:	8b 85       	ldd	r24, Y+11	; 0x0b
    1302:	9c 85       	ldd	r25, Y+12	; 0x0c
    1304:	ad 85       	ldd	r26, Y+13	; 0x0d
    1306:	be 85       	ldd	r27, Y+14	; 0x0e
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	ab 83       	std	Y+3, r26	; 0x03
    130e:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Number==0)
    1310:	8b 85       	ldd	r24, Y+11	; 0x0b
    1312:	9c 85       	ldd	r25, Y+12	; 0x0c
    1314:	ad 85       	ldd	r26, Y+13	; 0x0d
    1316:	be 85       	ldd	r27, Y+14	; 0x0e
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	a1 05       	cpc	r26, r1
    131c:	b1 05       	cpc	r27, r1
    131e:	c9 f4       	brne	.+50     	; 0x1352 <CLCD_voidWriteNumber+0x80>
		CLCD_voidSendData('0');
    1320:	80 e3       	ldi	r24, 0x30	; 48
    1322:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    1326:	80 c0       	rjmp	.+256    	; 0x1428 <CLCD_voidWriteNumber+0x156>
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
		{
			Local_u8Counter++;
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32temp=Local_u32temp/10;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	ab 81       	ldd	r26, Y+3	; 0x03
    1334:	bc 81       	ldd	r27, Y+4	; 0x04
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 b8 14 	call	0x2970	; 0x2970 <__udivmodsi4>
    1346:	da 01       	movw	r26, r20
    1348:	c9 01       	movw	r24, r18
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	ab 83       	std	Y+3, r26	; 0x03
    1350:	bc 83       	std	Y+4, r27	; 0x04
	u32 Local_u32temp=Copy_u32Number;
	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	ab 81       	ldd	r26, Y+3	; 0x03
    1358:	bc 81       	ldd	r27, Y+4	; 0x04
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	19 f7       	brne	.-58     	; 0x1328 <CLCD_voidWriteNumber+0x56>
    1362:	15 c0       	rjmp	.+42     	; 0x138e <CLCD_voidWriteNumber+0xbc>

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
		{
			Local_u8Counter--;
    1364:	8a 85       	ldd	r24, Y+10	; 0x0a
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32divisible*=10;
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	af 81       	ldd	r26, Y+7	; 0x07
    1370:	b8 85       	ldd	r27, Y+8	; 0x08
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	af 83       	std	Y+7, r26	; 0x07
    138c:	b8 87       	std	Y+8, r27	; 0x08
			Local_u8Counter++;
			Local_u32temp=Local_u32temp/10;

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
    138e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	40 f7       	brcc	.-48     	; 0x1364 <CLCD_voidWriteNumber+0x92>
    1394:	40 c0       	rjmp	.+128    	; 0x1416 <CLCD_voidWriteNumber+0x144>
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
		{
			Local_u8LcdNumber=Copy_u32Number/Local_u32divisible;
    1396:	8b 85       	ldd	r24, Y+11	; 0x0b
    1398:	9c 85       	ldd	r25, Y+12	; 0x0c
    139a:	ad 85       	ldd	r26, Y+13	; 0x0d
    139c:	be 85       	ldd	r27, Y+14	; 0x0e
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	4f 81       	ldd	r20, Y+7	; 0x07
    13a4:	58 85       	ldd	r21, Y+8	; 0x08
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 b8 14 	call	0x2970	; 0x2970 <__udivmodsi4>
    13ae:	da 01       	movw	r26, r20
    13b0:	c9 01       	movw	r24, r18
    13b2:	89 87       	std	Y+9, r24	; 0x09
			CLCD_voidSendData(Local_u8LcdNumber+'0');
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	80 5d       	subi	r24, 0xD0	; 208
    13b8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	2d 81       	ldd	r18, Y+5	; 0x05
    13c8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ca:	4f 81       	ldd	r20, Y+7	; 0x07
    13cc:	58 85       	ldd	r21, Y+8	; 0x08
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 85 14 	call	0x290a	; 0x290a <__mulsi3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	8b 85       	ldd	r24, Y+11	; 0x0b
    13dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13de:	ad 85       	ldd	r26, Y+13	; 0x0d
    13e0:	be 85       	ldd	r27, Y+14	; 0x0e
    13e2:	82 1b       	sub	r24, r18
    13e4:	93 0b       	sbc	r25, r19
    13e6:	a4 0b       	sbc	r26, r20
    13e8:	b5 0b       	sbc	r27, r21
    13ea:	8b 87       	std	Y+11, r24	; 0x0b
    13ec:	9c 87       	std	Y+12, r25	; 0x0c
    13ee:	ad 87       	std	Y+13, r26	; 0x0d
    13f0:	be 87       	std	Y+14, r27	; 0x0e
			Local_u32divisible=Local_u32divisible/10;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	af 81       	ldd	r26, Y+7	; 0x07
    13f8:	b8 85       	ldd	r27, Y+8	; 0x08
    13fa:	2a e0       	ldi	r18, 0x0A	; 10
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 b8 14 	call	0x2970	; 0x2970 <__udivmodsi4>
    140a:	da 01       	movw	r26, r20
    140c:	c9 01       	movw	r24, r18
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	af 83       	std	Y+7, r26	; 0x07
    1414:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u8Counter--;
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	af 81       	ldd	r26, Y+7	; 0x07
    141c:	b8 85       	ldd	r27, Y+8	; 0x08
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	a1 05       	cpc	r26, r1
    1422:	b1 05       	cpc	r27, r1
    1424:	09 f0       	breq	.+2      	; 0x1428 <CLCD_voidWriteNumber+0x156>
    1426:	b7 cf       	rjmp	.-146    	; 0x1396 <CLCD_voidWriteNumber+0xc4>
			CLCD_voidSendData(Local_u8LcdNumber+'0');
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
			Local_u32divisible=Local_u32divisible/10;
		}
	}
}
    1428:	2e 96       	adiw	r28, 0x0e	; 14
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_config.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	28 97       	sbiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	6b 83       	std	Y+3, r22	; 0x03
    1452:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1454:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	88 30       	cpi	r24, 0x08	; 8
    145a:	08 f0       	brcs	.+2      	; 0x145e <DIO_u8SetPinValue+0x24>
    145c:	f4 c0       	rjmp	.+488    	; 0x1646 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	09 f0       	breq	.+2      	; 0x1466 <DIO_u8SetPinValue+0x2c>
    1464:	72 c0       	rjmp	.+228    	; 0x154a <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	38 87       	std	Y+8, r19	; 0x08
    146e:	2f 83       	std	Y+7, r18	; 0x07
    1470:	8f 81       	ldd	r24, Y+7	; 0x07
    1472:	98 85       	ldd	r25, Y+8	; 0x08
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 05       	cpc	r25, r1
    1478:	49 f1       	breq	.+82     	; 0x14cc <DIO_u8SetPinValue+0x92>
    147a:	2f 81       	ldd	r18, Y+7	; 0x07
    147c:	38 85       	ldd	r19, Y+8	; 0x08
    147e:	22 30       	cpi	r18, 0x02	; 2
    1480:	31 05       	cpc	r19, r1
    1482:	2c f4       	brge	.+10     	; 0x148e <DIO_u8SetPinValue+0x54>
    1484:	8f 81       	ldd	r24, Y+7	; 0x07
    1486:	98 85       	ldd	r25, Y+8	; 0x08
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 f0       	breq	.+24     	; 0x14a4 <DIO_u8SetPinValue+0x6a>
    148c:	5b c0       	rjmp	.+182    	; 0x1544 <DIO_u8SetPinValue+0x10a>
    148e:	2f 81       	ldd	r18, Y+7	; 0x07
    1490:	38 85       	ldd	r19, Y+8	; 0x08
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	71 f1       	breq	.+92     	; 0x14f4 <DIO_u8SetPinValue+0xba>
    1498:	8f 81       	ldd	r24, Y+7	; 0x07
    149a:	98 85       	ldd	r25, Y+8	; 0x08
    149c:	83 30       	cpi	r24, 0x03	; 3
    149e:	91 05       	cpc	r25, r1
    14a0:	e9 f1       	breq	.+122    	; 0x151c <DIO_u8SetPinValue+0xe2>
    14a2:	50 c0       	rjmp	.+160    	; 0x1544 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin); break;
    14a4:	ab e3       	ldi	r26, 0x3B	; 59
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <DIO_u8SetPinValue+0x88>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <DIO_u8SetPinValue+0x84>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	bf c0       	rjmp	.+382    	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin); break;
    14cc:	a8 e3       	ldi	r26, 0x38	; 56
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e8 e3       	ldi	r30, 0x38	; 56
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_u8SetPinValue+0xb0>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_u8SetPinValue+0xac>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
    14f2:	ab c0       	rjmp	.+342    	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin); break;
    14f4:	a5 e3       	ldi	r26, 0x35	; 53
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e3       	ldi	r30, 0x35	; 53
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	48 2f       	mov	r20, r24
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	02 2e       	mov	r0, r18
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_u8SetPinValue+0xd8>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	0a 94       	dec	r0
    1514:	e2 f7       	brpl	.-8      	; 0x150e <DIO_u8SetPinValue+0xd4>
    1516:	84 2b       	or	r24, r20
    1518:	8c 93       	st	X, r24
    151a:	97 c0       	rjmp	.+302    	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin); break;
    151c:	a2 e3       	ldi	r26, 0x32	; 50
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e2 e3       	ldi	r30, 0x32	; 50
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	48 2f       	mov	r20, r24
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	02 2e       	mov	r0, r18
    1534:	02 c0       	rjmp	.+4      	; 0x153a <DIO_u8SetPinValue+0x100>
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	0a 94       	dec	r0
    153c:	e2 f7       	brpl	.-8      	; 0x1536 <DIO_u8SetPinValue+0xfc>
    153e:	84 2b       	or	r24, r20
    1540:	8c 93       	st	X, r24
    1542:	83 c0       	rjmp	.+262    	; 0x164a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	80 c0       	rjmp	.+256    	; 0x164a <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    154a:	8c 81       	ldd	r24, Y+4	; 0x04
    154c:	88 23       	and	r24, r24
    154e:	09 f0       	breq	.+2      	; 0x1552 <DIO_u8SetPinValue+0x118>
    1550:	77 c0       	rjmp	.+238    	; 0x1640 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	3e 83       	std	Y+6, r19	; 0x06
    155a:	2d 83       	std	Y+5, r18	; 0x05
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	9e 81       	ldd	r25, Y+6	; 0x06
    1560:	81 30       	cpi	r24, 0x01	; 1
    1562:	91 05       	cpc	r25, r1
    1564:	59 f1       	breq	.+86     	; 0x15bc <DIO_u8SetPinValue+0x182>
    1566:	2d 81       	ldd	r18, Y+5	; 0x05
    1568:	3e 81       	ldd	r19, Y+6	; 0x06
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	2c f4       	brge	.+10     	; 0x157a <DIO_u8SetPinValue+0x140>
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f0       	breq	.+26     	; 0x1592 <DIO_u8SetPinValue+0x158>
    1578:	60 c0       	rjmp	.+192    	; 0x163a <DIO_u8SetPinValue+0x200>
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	89 f1       	breq	.+98     	; 0x15e6 <DIO_u8SetPinValue+0x1ac>
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_u8SetPinValue+0x156>
    158e:	40 c0       	rjmp	.+128    	; 0x1610 <DIO_u8SetPinValue+0x1d6>
    1590:	54 c0       	rjmp	.+168    	; 0x163a <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin); break;
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 2e       	mov	r0, r18
    15aa:	02 c0       	rjmp	.+4      	; 0x15b0 <DIO_u8SetPinValue+0x176>
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	0a 94       	dec	r0
    15b2:	e2 f7       	brpl	.-8      	; 0x15ac <DIO_u8SetPinValue+0x172>
    15b4:	80 95       	com	r24
    15b6:	84 23       	and	r24, r20
    15b8:	8c 93       	st	X, r24
    15ba:	47 c0       	rjmp	.+142    	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin); break;
    15bc:	a8 e3       	ldi	r26, 0x38	; 56
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	48 2f       	mov	r20, r24
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 2e       	mov	r0, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <DIO_u8SetPinValue+0x1a0>
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	0a 94       	dec	r0
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <DIO_u8SetPinValue+0x19c>
    15de:	80 95       	com	r24
    15e0:	84 23       	and	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	32 c0       	rjmp	.+100    	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin); break;
    15e6:	a5 e3       	ldi	r26, 0x35	; 53
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e5 e3       	ldi	r30, 0x35	; 53
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_u8SetPinValue+0x1ca>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_u8SetPinValue+0x1c6>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	1d c0       	rjmp	.+58     	; 0x164a <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin); break;
    1610:	a2 e3       	ldi	r26, 0x32	; 50
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e2 e3       	ldi	r30, 0x32	; 50
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	02 2e       	mov	r0, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_u8SetPinValue+0x1f4>
    162a:	88 0f       	add	r24, r24
    162c:	99 1f       	adc	r25, r25
    162e:	0a 94       	dec	r0
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_u8SetPinValue+0x1f0>
    1632:	80 95       	com	r24
    1634:	84 23       	and	r24, r20
    1636:	8c 93       	st	X, r24
    1638:	08 c0       	rjmp	.+16     	; 0x164a <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	89 83       	std	Y+1, r24	; 0x01
    163e:	05 c0       	rjmp	.+10     	; 0x164a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	02 c0       	rjmp	.+4      	; 0x164a <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    164a:	89 81       	ldd	r24, Y+1	; 0x01
}
    164c:	28 96       	adiw	r28, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <DIO_u8SetPortValue+0x6>
    1664:	00 d0       	rcall	.+0      	; 0x1666 <DIO_u8SetPortValue+0x8>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1670:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3d 83       	std	Y+5, r19	; 0x05
    167a:	2c 83       	std	Y+4, r18	; 0x04
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	d1 f0       	breq	.+52     	; 0x16ba <DIO_u8SetPortValue+0x5c>
    1686:	2c 81       	ldd	r18, Y+4	; 0x04
    1688:	3d 81       	ldd	r19, Y+5	; 0x05
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	2c f4       	brge	.+10     	; 0x169a <DIO_u8SetPortValue+0x3c>
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	9d 81       	ldd	r25, Y+5	; 0x05
    1694:	00 97       	sbiw	r24, 0x00	; 0
    1696:	61 f0       	breq	.+24     	; 0x16b0 <DIO_u8SetPortValue+0x52>
    1698:	1f c0       	rjmp	.+62     	; 0x16d8 <DIO_u8SetPortValue+0x7a>
    169a:	2c 81       	ldd	r18, Y+4	; 0x04
    169c:	3d 81       	ldd	r19, Y+5	; 0x05
    169e:	22 30       	cpi	r18, 0x02	; 2
    16a0:	31 05       	cpc	r19, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <DIO_u8SetPortValue+0x66>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	83 30       	cpi	r24, 0x03	; 3
    16aa:	91 05       	cpc	r25, r1
    16ac:	81 f0       	breq	.+32     	; 0x16ce <DIO_u8SetPortValue+0x70>
    16ae:	14 c0       	rjmp	.+40     	; 0x16d8 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA:PORTA=Copy_u8Value; break;
    16b0:	eb e3       	ldi	r30, 0x3B	; 59
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	80 83       	st	Z, r24
    16b8:	11 c0       	rjmp	.+34     	; 0x16dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB:PORTB=Copy_u8Value; break;
    16ba:	e8 e3       	ldi	r30, 0x38	; 56
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	80 83       	st	Z, r24
    16c2:	0c c0       	rjmp	.+24     	; 0x16dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC:PORTC=Copy_u8Value; break;
    16c4:	e5 e3       	ldi	r30, 0x35	; 53
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	80 83       	st	Z, r24
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD:PORTD=Copy_u8Value; break;
    16ce:	e2 e3       	ldi	r30, 0x32	; 50
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	80 83       	st	Z, r24
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	27 97       	sbiw	r28, 0x07	; 7
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	8a 83       	std	Y+2, r24	; 0x02
    1704:	6b 83       	std	Y+3, r22	; 0x03
    1706:	5d 83       	std	Y+5, r21	; 0x05
    1708:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    170a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value!=NULL)&&(Copy_u8Pin<=7))
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	09 f4       	brne	.+2      	; 0x1716 <DIO_u8GetPinValue+0x28>
    1714:	78 c0       	rjmp	.+240    	; 0x1806 <DIO_u8GetPinValue+0x118>
    1716:	8b 81       	ldd	r24, Y+3	; 0x03
    1718:	88 30       	cpi	r24, 0x08	; 8
    171a:	08 f0       	brcs	.+2      	; 0x171e <DIO_u8GetPinValue+0x30>
    171c:	74 c0       	rjmp	.+232    	; 0x1806 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3f 83       	std	Y+7, r19	; 0x07
    1726:	2e 83       	std	Y+6, r18	; 0x06
    1728:	4e 81       	ldd	r20, Y+6	; 0x06
    172a:	5f 81       	ldd	r21, Y+7	; 0x07
    172c:	41 30       	cpi	r20, 0x01	; 1
    172e:	51 05       	cpc	r21, r1
    1730:	59 f1       	breq	.+86     	; 0x1788 <DIO_u8GetPinValue+0x9a>
    1732:	8e 81       	ldd	r24, Y+6	; 0x06
    1734:	9f 81       	ldd	r25, Y+7	; 0x07
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	91 05       	cpc	r25, r1
    173a:	34 f4       	brge	.+12     	; 0x1748 <DIO_u8GetPinValue+0x5a>
    173c:	2e 81       	ldd	r18, Y+6	; 0x06
    173e:	3f 81       	ldd	r19, Y+7	; 0x07
    1740:	21 15       	cp	r18, r1
    1742:	31 05       	cpc	r19, r1
    1744:	69 f0       	breq	.+26     	; 0x1760 <DIO_u8GetPinValue+0x72>
    1746:	5c c0       	rjmp	.+184    	; 0x1800 <DIO_u8GetPinValue+0x112>
    1748:	4e 81       	ldd	r20, Y+6	; 0x06
    174a:	5f 81       	ldd	r21, Y+7	; 0x07
    174c:	42 30       	cpi	r20, 0x02	; 2
    174e:	51 05       	cpc	r21, r1
    1750:	79 f1       	breq	.+94     	; 0x17b0 <DIO_u8GetPinValue+0xc2>
    1752:	8e 81       	ldd	r24, Y+6	; 0x06
    1754:	9f 81       	ldd	r25, Y+7	; 0x07
    1756:	83 30       	cpi	r24, 0x03	; 3
    1758:	91 05       	cpc	r25, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <DIO_u8GetPinValue+0x70>
    175c:	3d c0       	rjmp	.+122    	; 0x17d8 <DIO_u8GetPinValue+0xea>
    175e:	50 c0       	rjmp	.+160    	; 0x1800 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1760:	e9 e3       	ldi	r30, 0x39	; 57
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	88 2f       	mov	r24, r24
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a9 01       	movw	r20, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_u8GetPinValue+0x8a>
    1774:	55 95       	asr	r21
    1776:	47 95       	ror	r20
    1778:	8a 95       	dec	r24
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_u8GetPinValue+0x86>
    177c:	ca 01       	movw	r24, r20
    177e:	81 70       	andi	r24, 0x01	; 1
    1780:	ec 81       	ldd	r30, Y+4	; 0x04
    1782:	fd 81       	ldd	r31, Y+5	; 0x05
    1784:	80 83       	st	Z, r24
    1786:	41 c0       	rjmp	.+130    	; 0x180a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1788:	e6 e3       	ldi	r30, 0x36	; 54
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	88 2f       	mov	r24, r24
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a9 01       	movw	r20, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_u8GetPinValue+0xb2>
    179c:	55 95       	asr	r21
    179e:	47 95       	ror	r20
    17a0:	8a 95       	dec	r24
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_u8GetPinValue+0xae>
    17a4:	ca 01       	movw	r24, r20
    17a6:	81 70       	andi	r24, 0x01	; 1
    17a8:	ec 81       	ldd	r30, Y+4	; 0x04
    17aa:	fd 81       	ldd	r31, Y+5	; 0x05
    17ac:	80 83       	st	Z, r24
    17ae:	2d c0       	rjmp	.+90     	; 0x180a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    17b0:	e3 e3       	ldi	r30, 0x33	; 51
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 2f       	mov	r24, r24
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	a9 01       	movw	r20, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_u8GetPinValue+0xda>
    17c4:	55 95       	asr	r21
    17c6:	47 95       	ror	r20
    17c8:	8a 95       	dec	r24
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_u8GetPinValue+0xd6>
    17cc:	ca 01       	movw	r24, r20
    17ce:	81 70       	andi	r24, 0x01	; 1
    17d0:	ec 81       	ldd	r30, Y+4	; 0x04
    17d2:	fd 81       	ldd	r31, Y+5	; 0x05
    17d4:	80 83       	st	Z, r24
    17d6:	19 c0       	rjmp	.+50     	; 0x180a <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    17d8:	e0 e3       	ldi	r30, 0x30	; 48
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	28 2f       	mov	r18, r24
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	a9 01       	movw	r20, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_u8GetPinValue+0x102>
    17ec:	55 95       	asr	r21
    17ee:	47 95       	ror	r20
    17f0:	8a 95       	dec	r24
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_u8GetPinValue+0xfe>
    17f4:	ca 01       	movw	r24, r20
    17f6:	81 70       	andi	r24, 0x01	; 1
    17f8:	ec 81       	ldd	r30, Y+4	; 0x04
    17fa:	fd 81       	ldd	r31, Y+5	; 0x05
    17fc:	80 83       	st	Z, r24
    17fe:	05 c0       	rjmp	.+10     	; 0x180a <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1; break;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    180a:	89 81       	ldd	r24, Y+1	; 0x01

}
    180c:	27 96       	adiw	r28, 0x07	; 7
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	de bf       	out	0x3e, r29	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	cd bf       	out	0x3d, r28	; 61
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	08 95       	ret

0000181e <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_private.h"
#include "KPD_interface.h"

u8 KPD_u8GetPressedKey(void)
{
    181e:	df 93       	push	r29
    1820:	cf 93       	push	r28
    1822:	00 d0       	rcall	.+0      	; 0x1824 <KPD_u8GetPressedKey+0x6>
    1824:	00 d0       	rcall	.+0      	; 0x1826 <KPD_u8GetPressedKey+0x8>
    1826:	0f 92       	push	r0
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIndex,Local_u8RowIndex,Local_u8PinState;
    182c:	8f ef       	ldi	r24, 0xFF	; 255
    182e:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
    1830:	1a 82       	std	Y+2, r1	; 0x02
    1832:	5e c0       	rjmp	.+188    	; 0x18f0 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	fc 01       	movw	r30, r24
    183c:	ee 58       	subi	r30, 0x8E	; 142
    183e:	fe 4f       	sbci	r31, 0xFE	; 254
    1840:	90 81       	ld	r25, Z
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	69 2f       	mov	r22, r25
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUMBER;Local_u8RowIndex++)
    184c:	19 82       	std	Y+1, r1	; 0x01
    184e:	3d c0       	rjmp	.+122    	; 0x18ca <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	fc 01       	movw	r30, r24
    1858:	e2 59       	subi	r30, 0x92	; 146
    185a:	fe 4f       	sbci	r31, 0xFE	; 254
    185c:	90 81       	ld	r25, Z
    185e:	9e 01       	movw	r18, r28
    1860:	2c 5f       	subi	r18, 0xFC	; 252
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	69 2f       	mov	r22, r25
    1868:	a9 01       	movw	r20, r18
    186a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_u8GetPinValue>
			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	88 23       	and	r24, r24
    1872:	41 f5       	brne	.+80     	; 0x18c4 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	48 2f       	mov	r20, r24
    1878:	50 e0       	ldi	r21, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	ca 01       	movw	r24, r20
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	fc 01       	movw	r30, r24
    1890:	ea 58       	subi	r30, 0x8A	; 138
    1892:	fe 4f       	sbci	r31, 0xFE	; 254
    1894:	80 81       	ld	r24, Z
    1896:	8b 83       	std	Y+3, r24	; 0x03
    1898:	0f c0       	rjmp	.+30     	; 0x18b8 <KPD_u8GetPressedKey+0x9a>
				/*polling busy wait to avoid the repeation of the code many times while the button is pressed*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	fc 01       	movw	r30, r24
    18a2:	e2 59       	subi	r30, 0x92	; 146
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	90 81       	ld	r25, Z
    18a8:	9e 01       	movw	r18, r28
    18aa:	2c 5f       	subi	r18, 0xFC	; 252
    18ac:	3f 4f       	sbci	r19, 0xFF	; 255
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	69 2f       	mov	r22, r25
    18b2:	a9 01       	movw	r20, r18
    18b4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <DIO_u8GetPinValue>
			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				/*polling busy wait to avoid the repeation of the code many times while the button is pressed*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	88 23       	and	r24, r24
    18bc:	71 f3       	breq	.-36     	; 0x189a <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	8d 83       	std	Y+5, r24	; 0x05
    18c2:	1c c0       	rjmp	.+56     	; 0x18fc <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUMBER;Local_u8RowIndex++)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	8f 5f       	subi	r24, 0xFF	; 255
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	84 30       	cpi	r24, 0x04	; 4
    18ce:	08 f4       	brcc	.+2      	; 0x18d2 <KPD_u8GetPressedKey+0xb4>
    18d0:	bf cf       	rjmp	.-130    	; 0x1850 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}

		}
		/*Deactivate the cuurent column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	88 2f       	mov	r24, r24
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	fc 01       	movw	r30, r24
    18da:	ee 58       	subi	r30, 0x8E	; 142
    18dc:	fe 4f       	sbci	r31, 0xFE	; 254
    18de:	90 81       	ld	r25, Z
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	69 2f       	mov	r22, r25
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_u8SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
    18ea:	8a 81       	ldd	r24, Y+2	; 0x02
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	8a 83       	std	Y+2, r24	; 0x02
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	84 30       	cpi	r24, 0x04	; 4
    18f4:	08 f4       	brcc	.+2      	; 0x18f8 <KPD_u8GetPressedKey+0xda>
    18f6:	9e cf       	rjmp	.-196    	; 0x1834 <KPD_u8GetPressedKey+0x16>





	return Local_u8PressedKey;
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	8d 83       	std	Y+5, r24	; 0x05
    18fc:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <PORT_voidinit>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidinit(void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1916:	ea e3       	ldi	r30, 0x3A	; 58
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 ef       	ldi	r24, 0xF0	; 240
    191c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    191e:	e7 e3       	ldi	r30, 0x37	; 55
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1926:	e4 e3       	ldi	r30, 0x34	; 52
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	87 e0       	ldi	r24, 0x07	; 7
    192c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    192e:	e1 e3       	ldi	r30, 0x31	; 49
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	8f ef       	ldi	r24, 0xFF	; 255
    1934:	80 83       	st	Z, r24

	PORTA=PORTA_INIT;
    1936:	eb e3       	ldi	r30, 0x3B	; 59
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8f ef       	ldi	r24, 0xFF	; 255
    193c:	80 83       	st	Z, r24
	PORTB=PORTB_INIT;
    193e:	e8 e3       	ldi	r30, 0x38	; 56
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	80 83       	st	Z, r24
	PORTC=PORTC_INIT;
    1946:	e5 e3       	ldi	r30, 0x35	; 53
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	10 82       	st	Z, r1
	PORTD=PORTD_INIT;
    194c:	e2 e3       	ldi	r30, 0x32	; 50
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	10 82       	st	Z, r1

}
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <main>:
void SecondNumberSC(u8 Key);



void main(void)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62

	PORT_voidinit();
    1960:	0e 94 87 0c 	call	0x190e	; 0x190e <PORT_voidinit>
	CLCD_voidInit();
    1964:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidInit>
	while(1)
	{

		do
		{
			Key=KPD_u8GetPressedKey();
    1968:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	90 93 9b 01 	sts	0x019B, r25
    1974:	80 93 9a 01 	sts	0x019A, r24

		}while(Key==0xff);
    1978:	80 91 9a 01 	lds	r24, 0x019A
    197c:	90 91 9b 01 	lds	r25, 0x019B
    1980:	8f 3f       	cpi	r24, 0xFF	; 255
    1982:	91 05       	cpc	r25, r1
    1984:	89 f3       	breq	.-30     	; 0x1968 <main+0x10>

		//	FirstCalculator(Key);
		SecondCalculator(Key);
    1986:	80 91 9a 01 	lds	r24, 0x019A
    198a:	90 91 9b 01 	lds	r25, 0x019B
    198e:	0e 94 ca 0c 	call	0x1994	; 0x1994 <SecondCalculator>
    1992:	ea cf       	rjmp	.-44     	; 0x1968 <main+0x10>

00001994 <SecondCalculator>:
			}
		}
	}
}*/
void SecondCalculator(u8 Key)
{
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	df 93       	push	r29
    199e:	cf 93       	push	r28
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	29 97       	sbiw	r28, 0x09	; 9
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	89 83       	std	Y+1, r24	; 0x01


	FirstNumberSC(Key);
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	0e 94 b9 12 	call	0x2572	; 0x2572 <FirstNumberSC>
	do
	{
		Key=KPD_u8GetPressedKey();
    19b8:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    19bc:	89 83       	std	Y+1, r24	; 0x01
	}while(Key==0xff);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	8f 3f       	cpi	r24, 0xFF	; 255
    19c2:	d1 f3       	breq	.-12     	; 0x19b8 <SecondCalculator+0x24>
	OperatorSC(Key);
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	0e 94 1e 13 	call	0x263c	; 0x263c <OperatorSC>

	do
	{
		Key=KPD_u8GetPressedKey();
    19ca:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    19ce:	89 83       	std	Y+1, r24	; 0x01
	}while(Key==0xff);
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	8f 3f       	cpi	r24, 0xFF	; 255
    19d4:	d1 f3       	breq	.-12     	; 0x19ca <SecondCalculator+0x36>
	SecondNumberSC(Key);
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	0e 94 34 14 	call	0x2868	; 0x2868 <SecondNumberSC>
	CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    19dc:	90 91 8b 01 	lds	r25, 0x018B
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	69 2f       	mov	r22, r25
    19e4:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	CLCD_voidSendData('=');
    19e8:	8d e3       	ldi	r24, 0x3D	; 61
    19ea:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
	if(NumberOfOperators<=2)
    19ee:	80 91 95 01 	lds	r24, 0x0195
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <SecondCalculator+0x64>
    19f6:	fd c4       	rjmp	.+2554   	; 0x23f2 <SecondCalculator+0xa5e>
	{
		if(NumberOfOperators==1)
    19f8:	80 91 95 01 	lds	r24, 0x0195
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	09 f0       	breq	.+2      	; 0x1a02 <SecondCalculator+0x6e>
    1a00:	43 c2       	rjmp	.+1158   	; 0x1e88 <SecondCalculator+0x4f4>
		{
			switch (Two_Operators[0])
    1a02:	80 91 98 01 	lds	r24, 0x0198
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	39 87       	std	Y+9, r19	; 0x09
    1a0c:	28 87       	std	Y+8, r18	; 0x08
    1a0e:	48 85       	ldd	r20, Y+8	; 0x08
    1a10:	59 85       	ldd	r21, Y+9	; 0x09
    1a12:	4b 32       	cpi	r20, 0x2B	; 43
    1a14:	51 05       	cpc	r21, r1
    1a16:	c1 f0       	breq	.+48     	; 0x1a48 <SecondCalculator+0xb4>
    1a18:	88 85       	ldd	r24, Y+8	; 0x08
    1a1a:	99 85       	ldd	r25, Y+9	; 0x09
    1a1c:	8c 32       	cpi	r24, 0x2C	; 44
    1a1e:	91 05       	cpc	r25, r1
    1a20:	3c f4       	brge	.+14     	; 0x1a30 <SecondCalculator+0x9c>
    1a22:	28 85       	ldd	r18, Y+8	; 0x08
    1a24:	39 85       	ldd	r19, Y+9	; 0x09
    1a26:	2a 32       	cpi	r18, 0x2A	; 42
    1a28:	31 05       	cpc	r19, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <SecondCalculator+0x9a>
    1a2c:	5f c0       	rjmp	.+190    	; 0x1aec <SecondCalculator+0x158>
    1a2e:	e1 c4       	rjmp	.+2498   	; 0x23f2 <SecondCalculator+0xa5e>
    1a30:	48 85       	ldd	r20, Y+8	; 0x08
    1a32:	59 85       	ldd	r21, Y+9	; 0x09
    1a34:	4d 32       	cpi	r20, 0x2D	; 45
    1a36:	51 05       	cpc	r21, r1
    1a38:	d9 f0       	breq	.+54     	; 0x1a70 <SecondCalculator+0xdc>
    1a3a:	88 85       	ldd	r24, Y+8	; 0x08
    1a3c:	99 85       	ldd	r25, Y+9	; 0x09
    1a3e:	8f 32       	cpi	r24, 0x2F	; 47
    1a40:	91 05       	cpc	r25, r1
    1a42:	09 f4       	brne	.+2      	; 0x1a46 <SecondCalculator+0xb2>
    1a44:	6d c0       	rjmp	.+218    	; 0x1b20 <SecondCalculator+0x18c>
    1a46:	d5 c4       	rjmp	.+2474   	; 0x23f2 <SecondCalculator+0xa5e>
			{
			case '+':
				Global_u8FirstLineCounter++;
    1a48:	80 91 8b 01 	lds	r24, 0x018B
    1a4c:	8f 5f       	subi	r24, 0xFF	; 255
    1a4e:	80 93 8b 01 	sts	0x018B, r24
				Global_u16Result=Global_u16FirstNumber+Global_u16SecondNumber;break;
    1a52:	20 91 8c 01 	lds	r18, 0x018C
    1a56:	30 91 8d 01 	lds	r19, 0x018D
    1a5a:	80 91 8e 01 	lds	r24, 0x018E
    1a5e:	90 91 8f 01 	lds	r25, 0x018F
    1a62:	82 0f       	add	r24, r18
    1a64:	93 1f       	adc	r25, r19
    1a66:	90 93 9d 01 	sts	0x019D, r25
    1a6a:	80 93 9c 01 	sts	0x019C, r24
    1a6e:	c1 c4       	rjmp	.+2434   	; 0x23f2 <SecondCalculator+0xa5e>
			case '-':
				Global_u8FirstLineCounter++;
    1a70:	80 91 8b 01 	lds	r24, 0x018B
    1a74:	8f 5f       	subi	r24, 0xFF	; 255
    1a76:	80 93 8b 01 	sts	0x018B, r24
				if(Global_u16FirstNumber>Global_u16SecondNumber)
    1a7a:	20 91 8c 01 	lds	r18, 0x018C
    1a7e:	30 91 8d 01 	lds	r19, 0x018D
    1a82:	80 91 8e 01 	lds	r24, 0x018E
    1a86:	90 91 8f 01 	lds	r25, 0x018F
    1a8a:	82 17       	cp	r24, r18
    1a8c:	93 07       	cpc	r25, r19
    1a8e:	78 f4       	brcc	.+30     	; 0x1aae <SecondCalculator+0x11a>
				{

					Global_u16Result=Global_u16FirstNumber-Global_u16SecondNumber;
    1a90:	80 91 8c 01 	lds	r24, 0x018C
    1a94:	90 91 8d 01 	lds	r25, 0x018D
    1a98:	20 91 8e 01 	lds	r18, 0x018E
    1a9c:	30 91 8f 01 	lds	r19, 0x018F
    1aa0:	82 1b       	sub	r24, r18
    1aa2:	93 0b       	sbc	r25, r19
    1aa4:	90 93 9d 01 	sts	0x019D, r25
    1aa8:	80 93 9c 01 	sts	0x019C, r24
    1aac:	a2 c4       	rjmp	.+2372   	; 0x23f2 <SecondCalculator+0xa5e>
				}
				else
				{
					CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    1aae:	90 91 8b 01 	lds	r25, 0x018B
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	69 2f       	mov	r22, r25
    1ab6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
					CLCD_voidSendData('-');
    1aba:	8d e2       	ldi	r24, 0x2D	; 45
    1abc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
					Global_u16Result=Global_u16SecondNumber-Global_u16FirstNumber;
    1ac0:	20 91 8e 01 	lds	r18, 0x018E
    1ac4:	30 91 8f 01 	lds	r19, 0x018F
    1ac8:	80 91 8c 01 	lds	r24, 0x018C
    1acc:	90 91 8d 01 	lds	r25, 0x018D
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	48 1b       	sub	r20, r24
    1ad4:	59 0b       	sbc	r21, r25
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	90 93 9d 01 	sts	0x019D, r25
    1adc:	80 93 9c 01 	sts	0x019C, r24
					Global_u8FirstLineCounter++;
    1ae0:	80 91 8b 01 	lds	r24, 0x018B
    1ae4:	8f 5f       	subi	r24, 0xFF	; 255
    1ae6:	80 93 8b 01 	sts	0x018B, r24
    1aea:	83 c4       	rjmp	.+2310   	; 0x23f2 <SecondCalculator+0xa5e>
				}
				break;
			case '*':
				Global_u8FirstLineCounter++;
    1aec:	80 91 8b 01 	lds	r24, 0x018B
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	80 93 8b 01 	sts	0x018B, r24
				Global_u16Result=Global_u16FirstNumber*Global_u16SecondNumber;break;
    1af6:	20 91 8c 01 	lds	r18, 0x018C
    1afa:	30 91 8d 01 	lds	r19, 0x018D
    1afe:	80 91 8e 01 	lds	r24, 0x018E
    1b02:	90 91 8f 01 	lds	r25, 0x018F
    1b06:	ac 01       	movw	r20, r24
    1b08:	24 9f       	mul	r18, r20
    1b0a:	c0 01       	movw	r24, r0
    1b0c:	25 9f       	mul	r18, r21
    1b0e:	90 0d       	add	r25, r0
    1b10:	34 9f       	mul	r19, r20
    1b12:	90 0d       	add	r25, r0
    1b14:	11 24       	eor	r1, r1
    1b16:	90 93 9d 01 	sts	0x019D, r25
    1b1a:	80 93 9c 01 	sts	0x019C, r24
    1b1e:	69 c4       	rjmp	.+2258   	; 0x23f2 <SecondCalculator+0xa5e>
			case '/':
				if(Global_u16SecondNumber==0)
    1b20:	80 91 8e 01 	lds	r24, 0x018E
    1b24:	90 91 8f 01 	lds	r25, 0x018F
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	81 f4       	brne	.+32     	; 0x1b4c <SecondCalculator+0x1b8>
				{
					CLCD_voidGoToXY(0,Global_u8FirstLineCounter+1);
    1b2c:	80 91 8b 01 	lds	r24, 0x018B
    1b30:	98 2f       	mov	r25, r24
    1b32:	9f 5f       	subi	r25, 0xFF	; 255
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	69 2f       	mov	r22, r25
    1b38:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
					CLCD_voidSendString("Error");
    1b3c:	80 e6       	ldi	r24, 0x60	; 96
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
					ErrorFlag=1;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	80 93 94 01 	sts	0x0194, r24
    1b4a:	53 c4       	rjmp	.+2214   	; 0x23f2 <SecondCalculator+0xa5e>
				}
				else
				{
					if(Global_u16FirstNumber%Global_u16SecondNumber==0)
    1b4c:	80 91 8c 01 	lds	r24, 0x018C
    1b50:	90 91 8d 01 	lds	r25, 0x018D
    1b54:	20 91 8e 01 	lds	r18, 0x018E
    1b58:	30 91 8f 01 	lds	r19, 0x018F
    1b5c:	b9 01       	movw	r22, r18
    1b5e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	b1 f4       	brne	.+44     	; 0x1b92 <SecondCalculator+0x1fe>
					{
						Global_u8FirstLineCounter++;
    1b66:	80 91 8b 01 	lds	r24, 0x018B
    1b6a:	8f 5f       	subi	r24, 0xFF	; 255
    1b6c:	80 93 8b 01 	sts	0x018B, r24
						Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    1b70:	80 91 8c 01 	lds	r24, 0x018C
    1b74:	90 91 8d 01 	lds	r25, 0x018D
    1b78:	20 91 8e 01 	lds	r18, 0x018E
    1b7c:	30 91 8f 01 	lds	r19, 0x018F
    1b80:	b9 01       	movw	r22, r18
    1b82:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1b86:	cb 01       	movw	r24, r22
    1b88:	90 93 9d 01 	sts	0x019D, r25
    1b8c:	80 93 9c 01 	sts	0x019C, r24
    1b90:	30 c4       	rjmp	.+2144   	; 0x23f2 <SecondCalculator+0xa5e>
					}
					else
					{
						if(Global_u16SecondNumber<=9)
    1b92:	80 91 8e 01 	lds	r24, 0x018E
    1b96:	90 91 8f 01 	lds	r25, 0x018F
    1b9a:	8a 30       	cpi	r24, 0x0A	; 10
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <SecondCalculator+0x20e>
    1ba0:	0e c1       	rjmp	.+540    	; 0x1dbe <SecondCalculator+0x42a>
						{
							DivideFlag=1;
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	80 93 93 01 	sts	0x0193, r24
							Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    1ba8:	80 91 8c 01 	lds	r24, 0x018C
    1bac:	90 91 8d 01 	lds	r25, 0x018D
    1bb0:	20 91 8e 01 	lds	r18, 0x018E
    1bb4:	30 91 8f 01 	lds	r19, 0x018F
    1bb8:	b9 01       	movw	r22, r18
    1bba:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	90 93 9d 01 	sts	0x019D, r25
    1bc4:	80 93 9c 01 	sts	0x019C, r24
							switch (Global_u16SecondNumber)
    1bc8:	80 91 8e 01 	lds	r24, 0x018E
    1bcc:	90 91 8f 01 	lds	r25, 0x018F
    1bd0:	9f 83       	std	Y+7, r25	; 0x07
    1bd2:	8e 83       	std	Y+6, r24	; 0x06
    1bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bd8:	25 30       	cpi	r18, 0x05	; 5
    1bda:	31 05       	cpc	r19, r1
    1bdc:	09 f4       	brne	.+2      	; 0x1be0 <SecondCalculator+0x24c>
    1bde:	77 c0       	rjmp	.+238    	; 0x1cce <SecondCalculator+0x33a>
    1be0:	4e 81       	ldd	r20, Y+6	; 0x06
    1be2:	5f 81       	ldd	r21, Y+7	; 0x07
    1be4:	46 30       	cpi	r20, 0x06	; 6
    1be6:	51 05       	cpc	r21, r1
    1be8:	88 f4       	brcc	.+34     	; 0x1c0c <SecondCalculator+0x278>
    1bea:	8e 81       	ldd	r24, Y+6	; 0x06
    1bec:	9f 81       	ldd	r25, Y+7	; 0x07
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	91 05       	cpc	r25, r1
    1bf2:	e9 f1       	breq	.+122    	; 0x1c6e <SecondCalculator+0x2da>
    1bf4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bf6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bf8:	24 30       	cpi	r18, 0x04	; 4
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <SecondCalculator+0x26c>
    1bfe:	4f c0       	rjmp	.+158    	; 0x1c9e <SecondCalculator+0x30a>
    1c00:	4e 81       	ldd	r20, Y+6	; 0x06
    1c02:	5f 81       	ldd	r21, Y+7	; 0x07
    1c04:	42 30       	cpi	r20, 0x02	; 2
    1c06:	51 05       	cpc	r21, r1
    1c08:	d1 f0       	breq	.+52     	; 0x1c3e <SecondCalculator+0x2aa>
    1c0a:	f3 c3       	rjmp	.+2022   	; 0x23f2 <SecondCalculator+0xa5e>
    1c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c10:	87 30       	cpi	r24, 0x07	; 7
    1c12:	91 05       	cpc	r25, r1
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <SecondCalculator+0x284>
    1c16:	8b c0       	rjmp	.+278    	; 0x1d2e <SecondCalculator+0x39a>
    1c18:	2e 81       	ldd	r18, Y+6	; 0x06
    1c1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c1c:	27 30       	cpi	r18, 0x07	; 7
    1c1e:	31 05       	cpc	r19, r1
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <SecondCalculator+0x290>
    1c22:	6d c0       	rjmp	.+218    	; 0x1cfe <SecondCalculator+0x36a>
    1c24:	4e 81       	ldd	r20, Y+6	; 0x06
    1c26:	5f 81       	ldd	r21, Y+7	; 0x07
    1c28:	48 30       	cpi	r20, 0x08	; 8
    1c2a:	51 05       	cpc	r21, r1
    1c2c:	09 f4       	brne	.+2      	; 0x1c30 <SecondCalculator+0x29c>
    1c2e:	97 c0       	rjmp	.+302    	; 0x1d5e <SecondCalculator+0x3ca>
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	89 30       	cpi	r24, 0x09	; 9
    1c36:	91 05       	cpc	r25, r1
    1c38:	09 f4       	brne	.+2      	; 0x1c3c <SecondCalculator+0x2a8>
    1c3a:	a9 c0       	rjmp	.+338    	; 0x1d8e <SecondCalculator+0x3fa>
    1c3c:	da c3       	rjmp	.+1972   	; 0x23f2 <SecondCalculator+0xa5e>
							{
							case 2:Global_u16FloatPart=(Global_u16FirstNumber*500)%1000;break;
    1c3e:	20 91 8c 01 	lds	r18, 0x018C
    1c42:	30 91 8d 01 	lds	r19, 0x018D
    1c46:	84 ef       	ldi	r24, 0xF4	; 244
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	ac 01       	movw	r20, r24
    1c4c:	24 9f       	mul	r18, r20
    1c4e:	c0 01       	movw	r24, r0
    1c50:	25 9f       	mul	r18, r21
    1c52:	90 0d       	add	r25, r0
    1c54:	34 9f       	mul	r19, r20
    1c56:	90 0d       	add	r25, r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	28 ee       	ldi	r18, 0xE8	; 232
    1c5c:	33 e0       	ldi	r19, 0x03	; 3
    1c5e:	b9 01       	movw	r22, r18
    1c60:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1c64:	90 93 92 01 	sts	0x0192, r25
    1c68:	80 93 91 01 	sts	0x0191, r24
    1c6c:	c2 c3       	rjmp	.+1924   	; 0x23f2 <SecondCalculator+0xa5e>
							case 3:	Global_u16FloatPart=(Global_u16FirstNumber*333)%1000;break;
    1c6e:	20 91 8c 01 	lds	r18, 0x018C
    1c72:	30 91 8d 01 	lds	r19, 0x018D
    1c76:	8d e4       	ldi	r24, 0x4D	; 77
    1c78:	91 e0       	ldi	r25, 0x01	; 1
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	24 9f       	mul	r18, r20
    1c7e:	c0 01       	movw	r24, r0
    1c80:	25 9f       	mul	r18, r21
    1c82:	90 0d       	add	r25, r0
    1c84:	34 9f       	mul	r19, r20
    1c86:	90 0d       	add	r25, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	28 ee       	ldi	r18, 0xE8	; 232
    1c8c:	33 e0       	ldi	r19, 0x03	; 3
    1c8e:	b9 01       	movw	r22, r18
    1c90:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1c94:	90 93 92 01 	sts	0x0192, r25
    1c98:	80 93 91 01 	sts	0x0191, r24
    1c9c:	aa c3       	rjmp	.+1876   	; 0x23f2 <SecondCalculator+0xa5e>
							case 4:Global_u16FloatPart=(Global_u16FirstNumber*250)%1000;break;
    1c9e:	20 91 8c 01 	lds	r18, 0x018C
    1ca2:	30 91 8d 01 	lds	r19, 0x018D
    1ca6:	8a ef       	ldi	r24, 0xFA	; 250
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	ac 01       	movw	r20, r24
    1cac:	24 9f       	mul	r18, r20
    1cae:	c0 01       	movw	r24, r0
    1cb0:	25 9f       	mul	r18, r21
    1cb2:	90 0d       	add	r25, r0
    1cb4:	34 9f       	mul	r19, r20
    1cb6:	90 0d       	add	r25, r0
    1cb8:	11 24       	eor	r1, r1
    1cba:	28 ee       	ldi	r18, 0xE8	; 232
    1cbc:	33 e0       	ldi	r19, 0x03	; 3
    1cbe:	b9 01       	movw	r22, r18
    1cc0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1cc4:	90 93 92 01 	sts	0x0192, r25
    1cc8:	80 93 91 01 	sts	0x0191, r24
    1ccc:	92 c3       	rjmp	.+1828   	; 0x23f2 <SecondCalculator+0xa5e>
							case 5:	Global_u16FloatPart=(Global_u16FirstNumber*200)%1000;break;
    1cce:	20 91 8c 01 	lds	r18, 0x018C
    1cd2:	30 91 8d 01 	lds	r19, 0x018D
    1cd6:	88 ec       	ldi	r24, 0xC8	; 200
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	ac 01       	movw	r20, r24
    1cdc:	24 9f       	mul	r18, r20
    1cde:	c0 01       	movw	r24, r0
    1ce0:	25 9f       	mul	r18, r21
    1ce2:	90 0d       	add	r25, r0
    1ce4:	34 9f       	mul	r19, r20
    1ce6:	90 0d       	add	r25, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	28 ee       	ldi	r18, 0xE8	; 232
    1cec:	33 e0       	ldi	r19, 0x03	; 3
    1cee:	b9 01       	movw	r22, r18
    1cf0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1cf4:	90 93 92 01 	sts	0x0192, r25
    1cf8:	80 93 91 01 	sts	0x0191, r24
    1cfc:	7a c3       	rjmp	.+1780   	; 0x23f2 <SecondCalculator+0xa5e>
							case 6:	Global_u16FloatPart=(Global_u16FirstNumber*166)%1000;break;
    1cfe:	20 91 8c 01 	lds	r18, 0x018C
    1d02:	30 91 8d 01 	lds	r19, 0x018D
    1d06:	86 ea       	ldi	r24, 0xA6	; 166
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	ac 01       	movw	r20, r24
    1d0c:	24 9f       	mul	r18, r20
    1d0e:	c0 01       	movw	r24, r0
    1d10:	25 9f       	mul	r18, r21
    1d12:	90 0d       	add	r25, r0
    1d14:	34 9f       	mul	r19, r20
    1d16:	90 0d       	add	r25, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	28 ee       	ldi	r18, 0xE8	; 232
    1d1c:	33 e0       	ldi	r19, 0x03	; 3
    1d1e:	b9 01       	movw	r22, r18
    1d20:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1d24:	90 93 92 01 	sts	0x0192, r25
    1d28:	80 93 91 01 	sts	0x0191, r24
    1d2c:	62 c3       	rjmp	.+1732   	; 0x23f2 <SecondCalculator+0xa5e>
							case 7:Global_u16FloatPart=(Global_u16FirstNumber*143)%1000;break;
    1d2e:	20 91 8c 01 	lds	r18, 0x018C
    1d32:	30 91 8d 01 	lds	r19, 0x018D
    1d36:	8f e8       	ldi	r24, 0x8F	; 143
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	ac 01       	movw	r20, r24
    1d3c:	24 9f       	mul	r18, r20
    1d3e:	c0 01       	movw	r24, r0
    1d40:	25 9f       	mul	r18, r21
    1d42:	90 0d       	add	r25, r0
    1d44:	34 9f       	mul	r19, r20
    1d46:	90 0d       	add	r25, r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	28 ee       	ldi	r18, 0xE8	; 232
    1d4c:	33 e0       	ldi	r19, 0x03	; 3
    1d4e:	b9 01       	movw	r22, r18
    1d50:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1d54:	90 93 92 01 	sts	0x0192, r25
    1d58:	80 93 91 01 	sts	0x0191, r24
    1d5c:	4a c3       	rjmp	.+1684   	; 0x23f2 <SecondCalculator+0xa5e>
							case 8:Global_u16FloatPart=(Global_u16FirstNumber*125)%1000;break;
    1d5e:	20 91 8c 01 	lds	r18, 0x018C
    1d62:	30 91 8d 01 	lds	r19, 0x018D
    1d66:	8d e7       	ldi	r24, 0x7D	; 125
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	ac 01       	movw	r20, r24
    1d6c:	24 9f       	mul	r18, r20
    1d6e:	c0 01       	movw	r24, r0
    1d70:	25 9f       	mul	r18, r21
    1d72:	90 0d       	add	r25, r0
    1d74:	34 9f       	mul	r19, r20
    1d76:	90 0d       	add	r25, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	28 ee       	ldi	r18, 0xE8	; 232
    1d7c:	33 e0       	ldi	r19, 0x03	; 3
    1d7e:	b9 01       	movw	r22, r18
    1d80:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1d84:	90 93 92 01 	sts	0x0192, r25
    1d88:	80 93 91 01 	sts	0x0191, r24
    1d8c:	32 c3       	rjmp	.+1636   	; 0x23f2 <SecondCalculator+0xa5e>
							case 9:Global_u16FloatPart=(Global_u16FirstNumber*111)%1000;break;
    1d8e:	20 91 8c 01 	lds	r18, 0x018C
    1d92:	30 91 8d 01 	lds	r19, 0x018D
    1d96:	8f e6       	ldi	r24, 0x6F	; 111
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	24 9f       	mul	r18, r20
    1d9e:	c0 01       	movw	r24, r0
    1da0:	25 9f       	mul	r18, r21
    1da2:	90 0d       	add	r25, r0
    1da4:	34 9f       	mul	r19, r20
    1da6:	90 0d       	add	r25, r0
    1da8:	11 24       	eor	r1, r1
    1daa:	28 ee       	ldi	r18, 0xE8	; 232
    1dac:	33 e0       	ldi	r19, 0x03	; 3
    1dae:	b9 01       	movw	r22, r18
    1db0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1db4:	90 93 92 01 	sts	0x0192, r25
    1db8:	80 93 91 01 	sts	0x0191, r24
    1dbc:	1a c3       	rjmp	.+1588   	; 0x23f2 <SecondCalculator+0xa5e>
							default:break;
							}
						}
						else if(Global_u16SecondNumber>9)
    1dbe:	80 91 8e 01 	lds	r24, 0x018E
    1dc2:	90 91 8f 01 	lds	r25, 0x018F
    1dc6:	8a 30       	cpi	r24, 0x0A	; 10
    1dc8:	91 05       	cpc	r25, r1
    1dca:	08 f4       	brcc	.+2      	; 0x1dce <SecondCalculator+0x43a>
    1dcc:	12 c3       	rjmp	.+1572   	; 0x23f2 <SecondCalculator+0xa5e>
						{
							DivideFlag=1;
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	80 93 93 01 	sts	0x0193, r24
							Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    1dd4:	80 91 8c 01 	lds	r24, 0x018C
    1dd8:	90 91 8d 01 	lds	r25, 0x018D
    1ddc:	20 91 8e 01 	lds	r18, 0x018E
    1de0:	30 91 8f 01 	lds	r19, 0x018F
    1de4:	b9 01       	movw	r22, r18
    1de6:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    1dea:	cb 01       	movw	r24, r22
    1dec:	90 93 9d 01 	sts	0x019D, r25
    1df0:	80 93 9c 01 	sts	0x019C, r24
							Global_u16FloatPart=(((f32)Global_u16FirstNumber/(f32)Global_u16SecondNumber)-(f32)Global_u16Result)*1000.0;
    1df4:	80 91 8c 01 	lds	r24, 0x018C
    1df8:	90 91 8d 01 	lds	r25, 0x018D
    1dfc:	cc 01       	movw	r24, r24
    1dfe:	a0 e0       	ldi	r26, 0x00	; 0
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e0a:	7b 01       	movw	r14, r22
    1e0c:	8c 01       	movw	r16, r24
    1e0e:	80 91 8e 01 	lds	r24, 0x018E
    1e12:	90 91 8f 01 	lds	r25, 0x018F
    1e16:	cc 01       	movw	r24, r24
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e24:	9b 01       	movw	r18, r22
    1e26:	ac 01       	movw	r20, r24
    1e28:	c8 01       	movw	r24, r16
    1e2a:	b7 01       	movw	r22, r14
    1e2c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	7c 01       	movw	r14, r24
    1e36:	8d 01       	movw	r16, r26
    1e38:	80 91 9c 01 	lds	r24, 0x019C
    1e3c:	90 91 9d 01 	lds	r25, 0x019D
    1e40:	cc 01       	movw	r24, r24
    1e42:	a0 e0       	ldi	r26, 0x00	; 0
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e4e:	9b 01       	movw	r18, r22
    1e50:	ac 01       	movw	r20, r24
    1e52:	c8 01       	movw	r24, r16
    1e54:	b7 01       	movw	r22, r14
    1e56:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a e7       	ldi	r20, 0x7A	; 122
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	bc 01       	movw	r22, r24
    1e74:	cd 01       	movw	r24, r26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	90 93 92 01 	sts	0x0192, r25
    1e82:	80 93 91 01 	sts	0x0191, r24
    1e86:	b5 c2       	rjmp	.+1386   	; 0x23f2 <SecondCalculator+0xa5e>
					}
				}break;
			default: break;
			}
		}
		else if(NumberOfOperators==2)
    1e88:	80 91 95 01 	lds	r24, 0x0195
    1e8c:	82 30       	cpi	r24, 0x02	; 2
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <SecondCalculator+0x4fe>
    1e90:	b0 c2       	rjmp	.+1376   	; 0x23f2 <SecondCalculator+0xa5e>
		{
			if(Two_Operators[0]==Two_Operators[1])
    1e92:	90 91 98 01 	lds	r25, 0x0198
    1e96:	80 91 99 01 	lds	r24, 0x0199
    1e9a:	98 17       	cp	r25, r24
    1e9c:	09 f0       	breq	.+2      	; 0x1ea0 <SecondCalculator+0x50c>
    1e9e:	43 c2       	rjmp	.+1158   	; 0x2326 <SecondCalculator+0x992>
			{
				switch (Two_Operators[0])
    1ea0:	80 91 98 01 	lds	r24, 0x0198
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	3d 83       	std	Y+5, r19	; 0x05
    1eaa:	2c 83       	std	Y+4, r18	; 0x04
    1eac:	4c 81       	ldd	r20, Y+4	; 0x04
    1eae:	5d 81       	ldd	r21, Y+5	; 0x05
    1eb0:	4b 32       	cpi	r20, 0x2B	; 43
    1eb2:	51 05       	cpc	r21, r1
    1eb4:	c1 f0       	breq	.+48     	; 0x1ee6 <SecondCalculator+0x552>
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eba:	8c 32       	cpi	r24, 0x2C	; 44
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	3c f4       	brge	.+14     	; 0x1ece <SecondCalculator+0x53a>
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	2a 32       	cpi	r18, 0x2A	; 42
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <SecondCalculator+0x538>
    1eca:	5f c0       	rjmp	.+190    	; 0x1f8a <SecondCalculator+0x5f6>
    1ecc:	92 c2       	rjmp	.+1316   	; 0x23f2 <SecondCalculator+0xa5e>
    1ece:	4c 81       	ldd	r20, Y+4	; 0x04
    1ed0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ed2:	4d 32       	cpi	r20, 0x2D	; 45
    1ed4:	51 05       	cpc	r21, r1
    1ed6:	d9 f0       	breq	.+54     	; 0x1f0e <SecondCalculator+0x57a>
    1ed8:	8c 81       	ldd	r24, Y+4	; 0x04
    1eda:	9d 81       	ldd	r25, Y+5	; 0x05
    1edc:	8f 32       	cpi	r24, 0x2F	; 47
    1ede:	91 05       	cpc	r25, r1
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <SecondCalculator+0x550>
    1ee2:	6d c0       	rjmp	.+218    	; 0x1fbe <SecondCalculator+0x62a>
    1ee4:	86 c2       	rjmp	.+1292   	; 0x23f2 <SecondCalculator+0xa5e>
				{
				case '+':
					Global_u8FirstLineCounter++;
    1ee6:	80 91 8b 01 	lds	r24, 0x018B
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	80 93 8b 01 	sts	0x018B, r24
					Global_u16Result=Global_u16FirstNumber+Global_u16SecondNumber;break;
    1ef0:	20 91 8c 01 	lds	r18, 0x018C
    1ef4:	30 91 8d 01 	lds	r19, 0x018D
    1ef8:	80 91 8e 01 	lds	r24, 0x018E
    1efc:	90 91 8f 01 	lds	r25, 0x018F
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	90 93 9d 01 	sts	0x019D, r25
    1f08:	80 93 9c 01 	sts	0x019C, r24
    1f0c:	72 c2       	rjmp	.+1252   	; 0x23f2 <SecondCalculator+0xa5e>
				case '-':
					Global_u8FirstLineCounter++;
    1f0e:	80 91 8b 01 	lds	r24, 0x018B
    1f12:	8f 5f       	subi	r24, 0xFF	; 255
    1f14:	80 93 8b 01 	sts	0x018B, r24
					if(Global_u16FirstNumber>Global_u16SecondNumber)
    1f18:	20 91 8c 01 	lds	r18, 0x018C
    1f1c:	30 91 8d 01 	lds	r19, 0x018D
    1f20:	80 91 8e 01 	lds	r24, 0x018E
    1f24:	90 91 8f 01 	lds	r25, 0x018F
    1f28:	82 17       	cp	r24, r18
    1f2a:	93 07       	cpc	r25, r19
    1f2c:	78 f4       	brcc	.+30     	; 0x1f4c <SecondCalculator+0x5b8>
					{
						Global_u16Result=Global_u16FirstNumber-Global_u16SecondNumber;
    1f2e:	80 91 8c 01 	lds	r24, 0x018C
    1f32:	90 91 8d 01 	lds	r25, 0x018D
    1f36:	20 91 8e 01 	lds	r18, 0x018E
    1f3a:	30 91 8f 01 	lds	r19, 0x018F
    1f3e:	82 1b       	sub	r24, r18
    1f40:	93 0b       	sbc	r25, r19
    1f42:	90 93 9d 01 	sts	0x019D, r25
    1f46:	80 93 9c 01 	sts	0x019C, r24
    1f4a:	53 c2       	rjmp	.+1190   	; 0x23f2 <SecondCalculator+0xa5e>
					}
					else
					{
						CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    1f4c:	90 91 8b 01 	lds	r25, 0x018B
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	69 2f       	mov	r22, r25
    1f54:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
						CLCD_voidSendData('-');
    1f58:	8d e2       	ldi	r24, 0x2D	; 45
    1f5a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
						Global_u16Result=Global_u16SecondNumber-Global_u16FirstNumber;
    1f5e:	20 91 8e 01 	lds	r18, 0x018E
    1f62:	30 91 8f 01 	lds	r19, 0x018F
    1f66:	80 91 8c 01 	lds	r24, 0x018C
    1f6a:	90 91 8d 01 	lds	r25, 0x018D
    1f6e:	a9 01       	movw	r20, r18
    1f70:	48 1b       	sub	r20, r24
    1f72:	59 0b       	sbc	r21, r25
    1f74:	ca 01       	movw	r24, r20
    1f76:	90 93 9d 01 	sts	0x019D, r25
    1f7a:	80 93 9c 01 	sts	0x019C, r24
						Global_u8FirstLineCounter++;
    1f7e:	80 91 8b 01 	lds	r24, 0x018B
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	80 93 8b 01 	sts	0x018B, r24
    1f88:	34 c2       	rjmp	.+1128   	; 0x23f2 <SecondCalculator+0xa5e>
					}
					break;
				case '*':
					Global_u8FirstLineCounter++;
    1f8a:	80 91 8b 01 	lds	r24, 0x018B
    1f8e:	8f 5f       	subi	r24, 0xFF	; 255
    1f90:	80 93 8b 01 	sts	0x018B, r24
					Global_u16Result=Global_u16FirstNumber*Global_u16SecondNumber;break;
    1f94:	20 91 8c 01 	lds	r18, 0x018C
    1f98:	30 91 8d 01 	lds	r19, 0x018D
    1f9c:	80 91 8e 01 	lds	r24, 0x018E
    1fa0:	90 91 8f 01 	lds	r25, 0x018F
    1fa4:	ac 01       	movw	r20, r24
    1fa6:	24 9f       	mul	r18, r20
    1fa8:	c0 01       	movw	r24, r0
    1faa:	25 9f       	mul	r18, r21
    1fac:	90 0d       	add	r25, r0
    1fae:	34 9f       	mul	r19, r20
    1fb0:	90 0d       	add	r25, r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	90 93 9d 01 	sts	0x019D, r25
    1fb8:	80 93 9c 01 	sts	0x019C, r24
    1fbc:	1a c2       	rjmp	.+1076   	; 0x23f2 <SecondCalculator+0xa5e>
				case '/':
					if(Global_u16SecondNumber==0)
    1fbe:	80 91 8e 01 	lds	r24, 0x018E
    1fc2:	90 91 8f 01 	lds	r25, 0x018F
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	81 f4       	brne	.+32     	; 0x1fea <SecondCalculator+0x656>
					{
						CLCD_voidGoToXY(0,Global_u8FirstLineCounter+1);
    1fca:	80 91 8b 01 	lds	r24, 0x018B
    1fce:	98 2f       	mov	r25, r24
    1fd0:	9f 5f       	subi	r25, 0xFF	; 255
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	69 2f       	mov	r22, r25
    1fd6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
						CLCD_voidSendString("Error");
    1fda:	80 e6       	ldi	r24, 0x60	; 96
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
						ErrorFlag=1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 94 01 	sts	0x0194, r24
    1fe8:	04 c2       	rjmp	.+1032   	; 0x23f2 <SecondCalculator+0xa5e>
					}
					else
					{
						if(Global_u16FirstNumber%Global_u16SecondNumber==0)
    1fea:	80 91 8c 01 	lds	r24, 0x018C
    1fee:	90 91 8d 01 	lds	r25, 0x018D
    1ff2:	20 91 8e 01 	lds	r18, 0x018E
    1ff6:	30 91 8f 01 	lds	r19, 0x018F
    1ffa:	b9 01       	movw	r22, r18
    1ffc:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2000:	00 97       	sbiw	r24, 0x00	; 0
    2002:	b1 f4       	brne	.+44     	; 0x2030 <SecondCalculator+0x69c>
						{
							Global_u8FirstLineCounter++;
    2004:	80 91 8b 01 	lds	r24, 0x018B
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	80 93 8b 01 	sts	0x018B, r24
							Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    200e:	80 91 8c 01 	lds	r24, 0x018C
    2012:	90 91 8d 01 	lds	r25, 0x018D
    2016:	20 91 8e 01 	lds	r18, 0x018E
    201a:	30 91 8f 01 	lds	r19, 0x018F
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2024:	cb 01       	movw	r24, r22
    2026:	90 93 9d 01 	sts	0x019D, r25
    202a:	80 93 9c 01 	sts	0x019C, r24
    202e:	e1 c1       	rjmp	.+962    	; 0x23f2 <SecondCalculator+0xa5e>
						}
						else
						{
							if(Global_u16SecondNumber<=9)
    2030:	80 91 8e 01 	lds	r24, 0x018E
    2034:	90 91 8f 01 	lds	r25, 0x018F
    2038:	8a 30       	cpi	r24, 0x0A	; 10
    203a:	91 05       	cpc	r25, r1
    203c:	08 f0       	brcs	.+2      	; 0x2040 <SecondCalculator+0x6ac>
    203e:	0e c1       	rjmp	.+540    	; 0x225c <SecondCalculator+0x8c8>
							{
								DivideFlag=1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 93 01 	sts	0x0193, r24
								Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    2046:	80 91 8c 01 	lds	r24, 0x018C
    204a:	90 91 8d 01 	lds	r25, 0x018D
    204e:	20 91 8e 01 	lds	r18, 0x018E
    2052:	30 91 8f 01 	lds	r19, 0x018F
    2056:	b9 01       	movw	r22, r18
    2058:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    205c:	cb 01       	movw	r24, r22
    205e:	90 93 9d 01 	sts	0x019D, r25
    2062:	80 93 9c 01 	sts	0x019C, r24
								switch (Global_u16SecondNumber)
    2066:	80 91 8e 01 	lds	r24, 0x018E
    206a:	90 91 8f 01 	lds	r25, 0x018F
    206e:	9b 83       	std	Y+3, r25	; 0x03
    2070:	8a 83       	std	Y+2, r24	; 0x02
    2072:	2a 81       	ldd	r18, Y+2	; 0x02
    2074:	3b 81       	ldd	r19, Y+3	; 0x03
    2076:	25 30       	cpi	r18, 0x05	; 5
    2078:	31 05       	cpc	r19, r1
    207a:	09 f4       	brne	.+2      	; 0x207e <SecondCalculator+0x6ea>
    207c:	77 c0       	rjmp	.+238    	; 0x216c <SecondCalculator+0x7d8>
    207e:	4a 81       	ldd	r20, Y+2	; 0x02
    2080:	5b 81       	ldd	r21, Y+3	; 0x03
    2082:	46 30       	cpi	r20, 0x06	; 6
    2084:	51 05       	cpc	r21, r1
    2086:	88 f4       	brcc	.+34     	; 0x20aa <SecondCalculator+0x716>
    2088:	8a 81       	ldd	r24, Y+2	; 0x02
    208a:	9b 81       	ldd	r25, Y+3	; 0x03
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	91 05       	cpc	r25, r1
    2090:	e9 f1       	breq	.+122    	; 0x210c <SecondCalculator+0x778>
    2092:	2a 81       	ldd	r18, Y+2	; 0x02
    2094:	3b 81       	ldd	r19, Y+3	; 0x03
    2096:	24 30       	cpi	r18, 0x04	; 4
    2098:	31 05       	cpc	r19, r1
    209a:	08 f0       	brcs	.+2      	; 0x209e <SecondCalculator+0x70a>
    209c:	4f c0       	rjmp	.+158    	; 0x213c <SecondCalculator+0x7a8>
    209e:	4a 81       	ldd	r20, Y+2	; 0x02
    20a0:	5b 81       	ldd	r21, Y+3	; 0x03
    20a2:	42 30       	cpi	r20, 0x02	; 2
    20a4:	51 05       	cpc	r21, r1
    20a6:	d1 f0       	breq	.+52     	; 0x20dc <SecondCalculator+0x748>
    20a8:	a4 c1       	rjmp	.+840    	; 0x23f2 <SecondCalculator+0xa5e>
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	9b 81       	ldd	r25, Y+3	; 0x03
    20ae:	87 30       	cpi	r24, 0x07	; 7
    20b0:	91 05       	cpc	r25, r1
    20b2:	09 f4       	brne	.+2      	; 0x20b6 <SecondCalculator+0x722>
    20b4:	8b c0       	rjmp	.+278    	; 0x21cc <SecondCalculator+0x838>
    20b6:	2a 81       	ldd	r18, Y+2	; 0x02
    20b8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ba:	27 30       	cpi	r18, 0x07	; 7
    20bc:	31 05       	cpc	r19, r1
    20be:	08 f4       	brcc	.+2      	; 0x20c2 <SecondCalculator+0x72e>
    20c0:	6d c0       	rjmp	.+218    	; 0x219c <SecondCalculator+0x808>
    20c2:	4a 81       	ldd	r20, Y+2	; 0x02
    20c4:	5b 81       	ldd	r21, Y+3	; 0x03
    20c6:	48 30       	cpi	r20, 0x08	; 8
    20c8:	51 05       	cpc	r21, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <SecondCalculator+0x73a>
    20cc:	97 c0       	rjmp	.+302    	; 0x21fc <SecondCalculator+0x868>
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	89 30       	cpi	r24, 0x09	; 9
    20d4:	91 05       	cpc	r25, r1
    20d6:	09 f4       	brne	.+2      	; 0x20da <SecondCalculator+0x746>
    20d8:	a9 c0       	rjmp	.+338    	; 0x222c <SecondCalculator+0x898>
    20da:	8b c1       	rjmp	.+790    	; 0x23f2 <SecondCalculator+0xa5e>
								{
								case 2:Global_u16FloatPart=(Global_u16FirstNumber*500)%1000;break;
    20dc:	20 91 8c 01 	lds	r18, 0x018C
    20e0:	30 91 8d 01 	lds	r19, 0x018D
    20e4:	84 ef       	ldi	r24, 0xF4	; 244
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	ac 01       	movw	r20, r24
    20ea:	24 9f       	mul	r18, r20
    20ec:	c0 01       	movw	r24, r0
    20ee:	25 9f       	mul	r18, r21
    20f0:	90 0d       	add	r25, r0
    20f2:	34 9f       	mul	r19, r20
    20f4:	90 0d       	add	r25, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	28 ee       	ldi	r18, 0xE8	; 232
    20fa:	33 e0       	ldi	r19, 0x03	; 3
    20fc:	b9 01       	movw	r22, r18
    20fe:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2102:	90 93 92 01 	sts	0x0192, r25
    2106:	80 93 91 01 	sts	0x0191, r24
    210a:	73 c1       	rjmp	.+742    	; 0x23f2 <SecondCalculator+0xa5e>
								case 3:	Global_u16FloatPart=(Global_u16FirstNumber*333)%1000;break;
    210c:	20 91 8c 01 	lds	r18, 0x018C
    2110:	30 91 8d 01 	lds	r19, 0x018D
    2114:	8d e4       	ldi	r24, 0x4D	; 77
    2116:	91 e0       	ldi	r25, 0x01	; 1
    2118:	ac 01       	movw	r20, r24
    211a:	24 9f       	mul	r18, r20
    211c:	c0 01       	movw	r24, r0
    211e:	25 9f       	mul	r18, r21
    2120:	90 0d       	add	r25, r0
    2122:	34 9f       	mul	r19, r20
    2124:	90 0d       	add	r25, r0
    2126:	11 24       	eor	r1, r1
    2128:	28 ee       	ldi	r18, 0xE8	; 232
    212a:	33 e0       	ldi	r19, 0x03	; 3
    212c:	b9 01       	movw	r22, r18
    212e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2132:	90 93 92 01 	sts	0x0192, r25
    2136:	80 93 91 01 	sts	0x0191, r24
    213a:	5b c1       	rjmp	.+694    	; 0x23f2 <SecondCalculator+0xa5e>
								case 4:Global_u16FloatPart=(Global_u16FirstNumber*250)%1000;break;
    213c:	20 91 8c 01 	lds	r18, 0x018C
    2140:	30 91 8d 01 	lds	r19, 0x018D
    2144:	8a ef       	ldi	r24, 0xFA	; 250
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	ac 01       	movw	r20, r24
    214a:	24 9f       	mul	r18, r20
    214c:	c0 01       	movw	r24, r0
    214e:	25 9f       	mul	r18, r21
    2150:	90 0d       	add	r25, r0
    2152:	34 9f       	mul	r19, r20
    2154:	90 0d       	add	r25, r0
    2156:	11 24       	eor	r1, r1
    2158:	28 ee       	ldi	r18, 0xE8	; 232
    215a:	33 e0       	ldi	r19, 0x03	; 3
    215c:	b9 01       	movw	r22, r18
    215e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2162:	90 93 92 01 	sts	0x0192, r25
    2166:	80 93 91 01 	sts	0x0191, r24
    216a:	43 c1       	rjmp	.+646    	; 0x23f2 <SecondCalculator+0xa5e>
								case 5:	Global_u16FloatPart=(Global_u16FirstNumber*200)%1000;break;
    216c:	20 91 8c 01 	lds	r18, 0x018C
    2170:	30 91 8d 01 	lds	r19, 0x018D
    2174:	88 ec       	ldi	r24, 0xC8	; 200
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	ac 01       	movw	r20, r24
    217a:	24 9f       	mul	r18, r20
    217c:	c0 01       	movw	r24, r0
    217e:	25 9f       	mul	r18, r21
    2180:	90 0d       	add	r25, r0
    2182:	34 9f       	mul	r19, r20
    2184:	90 0d       	add	r25, r0
    2186:	11 24       	eor	r1, r1
    2188:	28 ee       	ldi	r18, 0xE8	; 232
    218a:	33 e0       	ldi	r19, 0x03	; 3
    218c:	b9 01       	movw	r22, r18
    218e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2192:	90 93 92 01 	sts	0x0192, r25
    2196:	80 93 91 01 	sts	0x0191, r24
    219a:	2b c1       	rjmp	.+598    	; 0x23f2 <SecondCalculator+0xa5e>
								case 6:	Global_u16FloatPart=(Global_u16FirstNumber*166)%1000;break;
    219c:	20 91 8c 01 	lds	r18, 0x018C
    21a0:	30 91 8d 01 	lds	r19, 0x018D
    21a4:	86 ea       	ldi	r24, 0xA6	; 166
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	ac 01       	movw	r20, r24
    21aa:	24 9f       	mul	r18, r20
    21ac:	c0 01       	movw	r24, r0
    21ae:	25 9f       	mul	r18, r21
    21b0:	90 0d       	add	r25, r0
    21b2:	34 9f       	mul	r19, r20
    21b4:	90 0d       	add	r25, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	28 ee       	ldi	r18, 0xE8	; 232
    21ba:	33 e0       	ldi	r19, 0x03	; 3
    21bc:	b9 01       	movw	r22, r18
    21be:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    21c2:	90 93 92 01 	sts	0x0192, r25
    21c6:	80 93 91 01 	sts	0x0191, r24
    21ca:	13 c1       	rjmp	.+550    	; 0x23f2 <SecondCalculator+0xa5e>
								case 7:Global_u16FloatPart=(Global_u16FirstNumber*143)%1000;break;
    21cc:	20 91 8c 01 	lds	r18, 0x018C
    21d0:	30 91 8d 01 	lds	r19, 0x018D
    21d4:	8f e8       	ldi	r24, 0x8F	; 143
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	ac 01       	movw	r20, r24
    21da:	24 9f       	mul	r18, r20
    21dc:	c0 01       	movw	r24, r0
    21de:	25 9f       	mul	r18, r21
    21e0:	90 0d       	add	r25, r0
    21e2:	34 9f       	mul	r19, r20
    21e4:	90 0d       	add	r25, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	28 ee       	ldi	r18, 0xE8	; 232
    21ea:	33 e0       	ldi	r19, 0x03	; 3
    21ec:	b9 01       	movw	r22, r18
    21ee:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    21f2:	90 93 92 01 	sts	0x0192, r25
    21f6:	80 93 91 01 	sts	0x0191, r24
    21fa:	fb c0       	rjmp	.+502    	; 0x23f2 <SecondCalculator+0xa5e>
								case 8:Global_u16FloatPart=(Global_u16FirstNumber*125)%1000;break;
    21fc:	20 91 8c 01 	lds	r18, 0x018C
    2200:	30 91 8d 01 	lds	r19, 0x018D
    2204:	8d e7       	ldi	r24, 0x7D	; 125
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	ac 01       	movw	r20, r24
    220a:	24 9f       	mul	r18, r20
    220c:	c0 01       	movw	r24, r0
    220e:	25 9f       	mul	r18, r21
    2210:	90 0d       	add	r25, r0
    2212:	34 9f       	mul	r19, r20
    2214:	90 0d       	add	r25, r0
    2216:	11 24       	eor	r1, r1
    2218:	28 ee       	ldi	r18, 0xE8	; 232
    221a:	33 e0       	ldi	r19, 0x03	; 3
    221c:	b9 01       	movw	r22, r18
    221e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2222:	90 93 92 01 	sts	0x0192, r25
    2226:	80 93 91 01 	sts	0x0191, r24
    222a:	e3 c0       	rjmp	.+454    	; 0x23f2 <SecondCalculator+0xa5e>
								case 9:Global_u16FloatPart=(Global_u16FirstNumber*111)%1000;break;
    222c:	20 91 8c 01 	lds	r18, 0x018C
    2230:	30 91 8d 01 	lds	r19, 0x018D
    2234:	8f e6       	ldi	r24, 0x6F	; 111
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	ac 01       	movw	r20, r24
    223a:	24 9f       	mul	r18, r20
    223c:	c0 01       	movw	r24, r0
    223e:	25 9f       	mul	r18, r21
    2240:	90 0d       	add	r25, r0
    2242:	34 9f       	mul	r19, r20
    2244:	90 0d       	add	r25, r0
    2246:	11 24       	eor	r1, r1
    2248:	28 ee       	ldi	r18, 0xE8	; 232
    224a:	33 e0       	ldi	r19, 0x03	; 3
    224c:	b9 01       	movw	r22, r18
    224e:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2252:	90 93 92 01 	sts	0x0192, r25
    2256:	80 93 91 01 	sts	0x0191, r24
    225a:	cb c0       	rjmp	.+406    	; 0x23f2 <SecondCalculator+0xa5e>
								default:break;
								}
							}
							else if(Global_u16SecondNumber>9)
    225c:	80 91 8e 01 	lds	r24, 0x018E
    2260:	90 91 8f 01 	lds	r25, 0x018F
    2264:	8a 30       	cpi	r24, 0x0A	; 10
    2266:	91 05       	cpc	r25, r1
    2268:	08 f4       	brcc	.+2      	; 0x226c <SecondCalculator+0x8d8>
    226a:	c3 c0       	rjmp	.+390    	; 0x23f2 <SecondCalculator+0xa5e>
							{
								DivideFlag=1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 93 01 	sts	0x0193, r24
								Global_u16Result=Global_u16FirstNumber/Global_u16SecondNumber;
    2272:	80 91 8c 01 	lds	r24, 0x018C
    2276:	90 91 8d 01 	lds	r25, 0x018D
    227a:	20 91 8e 01 	lds	r18, 0x018E
    227e:	30 91 8f 01 	lds	r19, 0x018F
    2282:	b9 01       	movw	r22, r18
    2284:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2288:	cb 01       	movw	r24, r22
    228a:	90 93 9d 01 	sts	0x019D, r25
    228e:	80 93 9c 01 	sts	0x019C, r24
								Global_u16FloatPart=(((f32)Global_u16FirstNumber/(f32)Global_u16SecondNumber)-(f32)Global_u16Result)*1000.0;
    2292:	80 91 8c 01 	lds	r24, 0x018C
    2296:	90 91 8d 01 	lds	r25, 0x018D
    229a:	cc 01       	movw	r24, r24
    229c:	a0 e0       	ldi	r26, 0x00	; 0
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22a8:	7b 01       	movw	r14, r22
    22aa:	8c 01       	movw	r16, r24
    22ac:	80 91 8e 01 	lds	r24, 0x018E
    22b0:	90 91 8f 01 	lds	r25, 0x018F
    22b4:	cc 01       	movw	r24, r24
    22b6:	a0 e0       	ldi	r26, 0x00	; 0
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22c2:	9b 01       	movw	r18, r22
    22c4:	ac 01       	movw	r20, r24
    22c6:	c8 01       	movw	r24, r16
    22c8:	b7 01       	movw	r22, r14
    22ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	7c 01       	movw	r14, r24
    22d4:	8d 01       	movw	r16, r26
    22d6:	80 91 9c 01 	lds	r24, 0x019C
    22da:	90 91 9d 01 	lds	r25, 0x019D
    22de:	cc 01       	movw	r24, r24
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	bc 01       	movw	r22, r24
    22e6:	cd 01       	movw	r24, r26
    22e8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    22ec:	9b 01       	movw	r18, r22
    22ee:	ac 01       	movw	r20, r24
    22f0:	c8 01       	movw	r24, r16
    22f2:	b7 01       	movw	r22, r14
    22f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	bc 01       	movw	r22, r24
    22fe:	cd 01       	movw	r24, r26
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	90 93 92 01 	sts	0x0192, r25
    2320:	80 93 91 01 	sts	0x0191, r24
    2324:	66 c0       	rjmp	.+204    	; 0x23f2 <SecondCalculator+0xa5e>
					break;
				default: break;

				}
			}
			else if(Two_Operators[0]!=Two_Operators[1])
    2326:	90 91 98 01 	lds	r25, 0x0198
    232a:	80 91 99 01 	lds	r24, 0x0199
    232e:	98 17       	cp	r25, r24
    2330:	09 f4       	brne	.+2      	; 0x2334 <SecondCalculator+0x9a0>
    2332:	5f c0       	rjmp	.+190    	; 0x23f2 <SecondCalculator+0xa5e>
			{
				if((Two_Operators[0]=='+'&&Two_Operators[1]=='-')||(Two_Operators[0]=='-'&&Two_Operators[1]=='+'))
    2334:	80 91 98 01 	lds	r24, 0x0198
    2338:	8b 32       	cpi	r24, 0x2B	; 43
    233a:	21 f4       	brne	.+8      	; 0x2344 <SecondCalculator+0x9b0>
    233c:	80 91 99 01 	lds	r24, 0x0199
    2340:	8d 32       	cpi	r24, 0x2D	; 45
    2342:	51 f0       	breq	.+20     	; 0x2358 <SecondCalculator+0x9c4>
    2344:	80 91 98 01 	lds	r24, 0x0198
    2348:	8d 32       	cpi	r24, 0x2D	; 45
    234a:	09 f0       	breq	.+2      	; 0x234e <SecondCalculator+0x9ba>
    234c:	43 c0       	rjmp	.+134    	; 0x23d4 <SecondCalculator+0xa40>
    234e:	80 91 99 01 	lds	r24, 0x0199
    2352:	8b 32       	cpi	r24, 0x2B	; 43
    2354:	09 f0       	breq	.+2      	; 0x2358 <SecondCalculator+0x9c4>
    2356:	3e c0       	rjmp	.+124    	; 0x23d4 <SecondCalculator+0xa40>
				{
					Global_u8FirstLineCounter++;
    2358:	80 91 8b 01 	lds	r24, 0x018B
    235c:	8f 5f       	subi	r24, 0xFF	; 255
    235e:	80 93 8b 01 	sts	0x018B, r24
					if(Global_u16FirstNumber>Global_u16SecondNumber)
    2362:	20 91 8c 01 	lds	r18, 0x018C
    2366:	30 91 8d 01 	lds	r19, 0x018D
    236a:	80 91 8e 01 	lds	r24, 0x018E
    236e:	90 91 8f 01 	lds	r25, 0x018F
    2372:	82 17       	cp	r24, r18
    2374:	93 07       	cpc	r25, r19
    2376:	78 f4       	brcc	.+30     	; 0x2396 <SecondCalculator+0xa02>
					{
						Global_u16Result=Global_u16FirstNumber-Global_u16SecondNumber;
    2378:	80 91 8c 01 	lds	r24, 0x018C
    237c:	90 91 8d 01 	lds	r25, 0x018D
    2380:	20 91 8e 01 	lds	r18, 0x018E
    2384:	30 91 8f 01 	lds	r19, 0x018F
    2388:	82 1b       	sub	r24, r18
    238a:	93 0b       	sbc	r25, r19
    238c:	90 93 9d 01 	sts	0x019D, r25
    2390:	80 93 9c 01 	sts	0x019C, r24
    2394:	2e c0       	rjmp	.+92     	; 0x23f2 <SecondCalculator+0xa5e>
					}
					else
					{
						CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    2396:	90 91 8b 01 	lds	r25, 0x018B
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	69 2f       	mov	r22, r25
    239e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
						CLCD_voidSendData('-');
    23a2:	8d e2       	ldi	r24, 0x2D	; 45
    23a4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
						Global_u16Result=Global_u16SecondNumber-Global_u16FirstNumber;
    23a8:	20 91 8e 01 	lds	r18, 0x018E
    23ac:	30 91 8f 01 	lds	r19, 0x018F
    23b0:	80 91 8c 01 	lds	r24, 0x018C
    23b4:	90 91 8d 01 	lds	r25, 0x018D
    23b8:	a9 01       	movw	r20, r18
    23ba:	48 1b       	sub	r20, r24
    23bc:	59 0b       	sbc	r21, r25
    23be:	ca 01       	movw	r24, r20
    23c0:	90 93 9d 01 	sts	0x019D, r25
    23c4:	80 93 9c 01 	sts	0x019C, r24
						Global_u8FirstLineCounter++;
    23c8:	80 91 8b 01 	lds	r24, 0x018B
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	80 93 8b 01 	sts	0x018B, r24
    23d2:	0f c0       	rjmp	.+30     	; 0x23f2 <SecondCalculator+0xa5e>
					}
				}
				else
				{
					CLCD_voidGoToXY(0,Global_u8FirstLineCounter+1);
    23d4:	80 91 8b 01 	lds	r24, 0x018B
    23d8:	98 2f       	mov	r25, r24
    23da:	9f 5f       	subi	r25, 0xFF	; 255
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	69 2f       	mov	r22, r25
    23e0:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
					CLCD_voidSendString("Error");
    23e4:	80 e6       	ldi	r24, 0x60	; 96
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
					ErrorFlag=1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 94 01 	sts	0x0194, r24
				}
			}

		}
	}
	if(DivideFlag==1)
    23f2:	80 91 93 01 	lds	r24, 0x0193
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	09 f0       	breq	.+2      	; 0x23fc <SecondCalculator+0xa68>
    23fa:	99 c0       	rjmp	.+306    	; 0x252e <SecondCalculator+0xb9a>
	{

		Global_u8FirstLineCounter++;
    23fc:	80 91 8b 01 	lds	r24, 0x018B
    2400:	8f 5f       	subi	r24, 0xFF	; 255
    2402:	80 93 8b 01 	sts	0x018B, r24
		CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    2406:	90 91 8b 01 	lds	r25, 0x018B
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	69 2f       	mov	r22, r25
    240e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Global_u16Result);
    2412:	80 91 9c 01 	lds	r24, 0x019C
    2416:	90 91 9d 01 	lds	r25, 0x019D
    241a:	cc 01       	movw	r24, r24
    241c:	a0 e0       	ldi	r26, 0x00	; 0
    241e:	b0 e0       	ldi	r27, 0x00	; 0
    2420:	bc 01       	movw	r22, r24
    2422:	cd 01       	movw	r24, r26
    2424:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
		if(Global_u16FirstNumber/Global_u16SecondNumber>=10&&Global_u16FirstNumber/Global_u16SecondNumber<100)
    2428:	80 91 8c 01 	lds	r24, 0x018C
    242c:	90 91 8d 01 	lds	r25, 0x018D
    2430:	20 91 8e 01 	lds	r18, 0x018E
    2434:	30 91 8f 01 	lds	r19, 0x018F
    2438:	b9 01       	movw	r22, r18
    243a:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    243e:	cb 01       	movw	r24, r22
    2440:	8a 30       	cpi	r24, 0x0A	; 10
    2442:	91 05       	cpc	r25, r1
    2444:	a8 f0       	brcs	.+42     	; 0x2470 <SecondCalculator+0xadc>
    2446:	80 91 8c 01 	lds	r24, 0x018C
    244a:	90 91 8d 01 	lds	r25, 0x018D
    244e:	20 91 8e 01 	lds	r18, 0x018E
    2452:	30 91 8f 01 	lds	r19, 0x018F
    2456:	b9 01       	movw	r22, r18
    2458:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    245c:	cb 01       	movw	r24, r22
    245e:	84 36       	cpi	r24, 0x64	; 100
    2460:	91 05       	cpc	r25, r1
    2462:	30 f4       	brcc	.+12     	; 0x2470 <SecondCalculator+0xadc>
		{
			Global_u8FirstLineCounter++;
    2464:	80 91 8b 01 	lds	r24, 0x018B
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	80 93 8b 01 	sts	0x018B, r24
    246e:	3a c0       	rjmp	.+116    	; 0x24e4 <SecondCalculator+0xb50>
		}
		else if(Global_u16FirstNumber/Global_u16SecondNumber>=100&&Global_u16FirstNumber/Global_u16SecondNumber<1000)
    2470:	80 91 8c 01 	lds	r24, 0x018C
    2474:	90 91 8d 01 	lds	r25, 0x018D
    2478:	20 91 8e 01 	lds	r18, 0x018E
    247c:	30 91 8f 01 	lds	r19, 0x018F
    2480:	b9 01       	movw	r22, r18
    2482:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    2486:	cb 01       	movw	r24, r22
    2488:	84 36       	cpi	r24, 0x64	; 100
    248a:	91 05       	cpc	r25, r1
    248c:	b0 f0       	brcs	.+44     	; 0x24ba <SecondCalculator+0xb26>
    248e:	80 91 8c 01 	lds	r24, 0x018C
    2492:	90 91 8d 01 	lds	r25, 0x018D
    2496:	20 91 8e 01 	lds	r18, 0x018E
    249a:	30 91 8f 01 	lds	r19, 0x018F
    249e:	b9 01       	movw	r22, r18
    24a0:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    24a4:	cb 01       	movw	r24, r22
    24a6:	53 e0       	ldi	r21, 0x03	; 3
    24a8:	88 3e       	cpi	r24, 0xE8	; 232
    24aa:	95 07       	cpc	r25, r21
    24ac:	30 f4       	brcc	.+12     	; 0x24ba <SecondCalculator+0xb26>
		{
			Global_u8FirstLineCounter+=2;
    24ae:	80 91 8b 01 	lds	r24, 0x018B
    24b2:	8e 5f       	subi	r24, 0xFE	; 254
    24b4:	80 93 8b 01 	sts	0x018B, r24
    24b8:	15 c0       	rjmp	.+42     	; 0x24e4 <SecondCalculator+0xb50>
		}
		else if(Global_u16FirstNumber/Global_u16SecondNumber>=1000)
    24ba:	80 91 8c 01 	lds	r24, 0x018C
    24be:	90 91 8d 01 	lds	r25, 0x018D
    24c2:	20 91 8e 01 	lds	r18, 0x018E
    24c6:	30 91 8f 01 	lds	r19, 0x018F
    24ca:	b9 01       	movw	r22, r18
    24cc:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodhi4>
    24d0:	cb 01       	movw	r24, r22
    24d2:	23 e0       	ldi	r18, 0x03	; 3
    24d4:	88 3e       	cpi	r24, 0xE8	; 232
    24d6:	92 07       	cpc	r25, r18
    24d8:	28 f0       	brcs	.+10     	; 0x24e4 <SecondCalculator+0xb50>
		{
			Global_u8FirstLineCounter+=3;
    24da:	80 91 8b 01 	lds	r24, 0x018B
    24de:	8d 5f       	subi	r24, 0xFD	; 253
    24e0:	80 93 8b 01 	sts	0x018B, r24
		}
		Global_u8FirstLineCounter++;
    24e4:	80 91 8b 01 	lds	r24, 0x018B
    24e8:	8f 5f       	subi	r24, 0xFF	; 255
    24ea:	80 93 8b 01 	sts	0x018B, r24
		CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    24ee:	90 91 8b 01 	lds	r25, 0x018B
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	69 2f       	mov	r22, r25
    24f6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidSendData('.');
    24fa:	8e e2       	ldi	r24, 0x2E	; 46
    24fc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
		Global_u8FirstLineCounter++;
    2500:	80 91 8b 01 	lds	r24, 0x018B
    2504:	8f 5f       	subi	r24, 0xFF	; 255
    2506:	80 93 8b 01 	sts	0x018B, r24
		CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    250a:	90 91 8b 01 	lds	r25, 0x018B
    250e:	80 e0       	ldi	r24, 0x00	; 0
    2510:	69 2f       	mov	r22, r25
    2512:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Global_u16FloatPart);
    2516:	80 91 91 01 	lds	r24, 0x0191
    251a:	90 91 92 01 	lds	r25, 0x0192
    251e:	cc 01       	movw	r24, r24
    2520:	a0 e0       	ldi	r26, 0x00	; 0
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
    252c:	15 c0       	rjmp	.+42     	; 0x2558 <SecondCalculator+0xbc4>


	}
	else if(ErrorFlag==0)
    252e:	80 91 94 01 	lds	r24, 0x0194
    2532:	88 23       	and	r24, r24
    2534:	89 f4       	brne	.+34     	; 0x2558 <SecondCalculator+0xbc4>
	{
		CLCD_voidGoToXY(0,Global_u8FirstLineCounter);
    2536:	90 91 8b 01 	lds	r25, 0x018B
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	69 2f       	mov	r22, r25
    253e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidWriteNumber(Global_u16Result);
    2542:	80 91 9c 01 	lds	r24, 0x019C
    2546:	90 91 9d 01 	lds	r25, 0x019D
    254a:	cc 01       	movw	r24, r24
    254c:	a0 e0       	ldi	r26, 0x00	; 0
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	bc 01       	movw	r22, r24
    2552:	cd 01       	movw	r24, r26
    2554:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
	}
}
    2558:	29 96       	adiw	r28, 0x09	; 9
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	08 95       	ret

00002572 <FirstNumberSC>:
void FirstNumberSC(u8 Key)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	0f 92       	push	r0
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	89 83       	std	Y+1, r24	; 0x01
	Global_u16FirstNumber=Key;
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	88 2f       	mov	r24, r24
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	90 93 8d 01 	sts	0x018D, r25
    2588:	80 93 8c 01 	sts	0x018C, r24
	CLCD_voidWriteNumber(Key);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	a0 e0       	ldi	r26, 0x00	; 0
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
	Global_u8FirstLineCounter++;
    259e:	80 91 8b 01 	lds	r24, 0x018B
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	80 93 8b 01 	sts	0x018B, r24
    25a8:	37 c0       	rjmp	.+110    	; 0x2618 <FirstNumberSC+0xa6>
	while(Key!=10||Key!=11||Key!=12||Key!=13)
	{
		do{
			Key=KPD_u8GetPressedKey();
    25aa:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    25ae:	89 83       	std	Y+1, r24	; 0x01
		}while(Key==0xff);
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	8f 3f       	cpi	r24, 0xFF	; 255
    25b4:	d1 f3       	breq	.-12     	; 0x25aa <FirstNumberSC+0x38>
		if(Key==10||Key==11||Key==12||Key==13)
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	8a 30       	cpi	r24, 0x0A	; 10
    25ba:	e1 f1       	breq	.+120    	; 0x2634 <FirstNumberSC+0xc2>
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	8b 30       	cpi	r24, 0x0B	; 11
    25c0:	c9 f1       	breq	.+114    	; 0x2634 <FirstNumberSC+0xc2>
    25c2:	89 81       	ldd	r24, Y+1	; 0x01
    25c4:	8c 30       	cpi	r24, 0x0C	; 12
    25c6:	b1 f1       	breq	.+108    	; 0x2634 <FirstNumberSC+0xc2>
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	8d 30       	cpi	r24, 0x0D	; 13
    25cc:	99 f1       	breq	.+102    	; 0x2634 <FirstNumberSC+0xc2>
			break;
		Global_u8FirstLineCounter++;
    25ce:	80 91 8b 01 	lds	r24, 0x018B
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	80 93 8b 01 	sts	0x018B, r24
		Global_u16FirstNumber=(Global_u16FirstNumber*10)+Key;
    25d8:	80 91 8c 01 	lds	r24, 0x018C
    25dc:	90 91 8d 01 	lds	r25, 0x018D
    25e0:	9c 01       	movw	r18, r24
    25e2:	22 0f       	add	r18, r18
    25e4:	33 1f       	adc	r19, r19
    25e6:	c9 01       	movw	r24, r18
    25e8:	88 0f       	add	r24, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	88 0f       	add	r24, r24
    25ee:	99 1f       	adc	r25, r25
    25f0:	28 0f       	add	r18, r24
    25f2:	39 1f       	adc	r19, r25
    25f4:	89 81       	ldd	r24, Y+1	; 0x01
    25f6:	88 2f       	mov	r24, r24
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	82 0f       	add	r24, r18
    25fc:	93 1f       	adc	r25, r19
    25fe:	90 93 8d 01 	sts	0x018D, r25
    2602:	80 93 8c 01 	sts	0x018C, r24
		CLCD_voidWriteNumber(Key);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
void FirstNumberSC(u8 Key)
{
	Global_u16FirstNumber=Key;
	CLCD_voidWriteNumber(Key);
	Global_u8FirstLineCounter++;
	while(Key!=10||Key!=11||Key!=12||Key!=13)
    2618:	89 81       	ldd	r24, Y+1	; 0x01
    261a:	8a 30       	cpi	r24, 0x0A	; 10
    261c:	31 f6       	brne	.-116    	; 0x25aa <FirstNumberSC+0x38>
    261e:	89 81       	ldd	r24, Y+1	; 0x01
    2620:	8b 30       	cpi	r24, 0x0B	; 11
    2622:	19 f6       	brne	.-122    	; 0x25aa <FirstNumberSC+0x38>
    2624:	89 81       	ldd	r24, Y+1	; 0x01
    2626:	8c 30       	cpi	r24, 0x0C	; 12
    2628:	09 f0       	breq	.+2      	; 0x262c <FirstNumberSC+0xba>
    262a:	bf cf       	rjmp	.-130    	; 0x25aa <FirstNumberSC+0x38>
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	8d 30       	cpi	r24, 0x0D	; 13
    2630:	09 f0       	breq	.+2      	; 0x2634 <FirstNumberSC+0xc2>
    2632:	bb cf       	rjmp	.-138    	; 0x25aa <FirstNumberSC+0x38>
		Global_u16FirstNumber=(Global_u16FirstNumber*10)+Key;
		CLCD_voidWriteNumber(Key);


	}
}
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <OperatorSC>:
void OperatorSC(u8 Key)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <OperatorSC+0x6>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <OperatorSC+0x8>
    2644:	0f 92       	push	r0
    2646:	cd b7       	in	r28, 0x3d	; 61
    2648:	de b7       	in	r29, 0x3e	; 62
    264a:	89 83       	std	Y+1, r24	; 0x01
	switch (Key)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	3d 83       	std	Y+5, r19	; 0x05
    2654:	2c 83       	std	Y+4, r18	; 0x04
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	8b 30       	cpi	r24, 0x0B	; 11
    265c:	91 05       	cpc	r25, r1
    265e:	41 f1       	breq	.+80     	; 0x26b0 <OperatorSC+0x74>
    2660:	2c 81       	ldd	r18, Y+4	; 0x04
    2662:	3d 81       	ldd	r19, Y+5	; 0x05
    2664:	2c 30       	cpi	r18, 0x0C	; 12
    2666:	31 05       	cpc	r19, r1
    2668:	34 f4       	brge	.+12     	; 0x2676 <OperatorSC+0x3a>
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	9d 81       	ldd	r25, Y+5	; 0x05
    266e:	8a 30       	cpi	r24, 0x0A	; 10
    2670:	91 05       	cpc	r25, r1
    2672:	61 f0       	breq	.+24     	; 0x268c <OperatorSC+0x50>
    2674:	52 c0       	rjmp	.+164    	; 0x271a <OperatorSC+0xde>
    2676:	2c 81       	ldd	r18, Y+4	; 0x04
    2678:	3d 81       	ldd	r19, Y+5	; 0x05
    267a:	2c 30       	cpi	r18, 0x0C	; 12
    267c:	31 05       	cpc	r19, r1
    267e:	51 f1       	breq	.+84     	; 0x26d4 <OperatorSC+0x98>
    2680:	8c 81       	ldd	r24, Y+4	; 0x04
    2682:	9d 81       	ldd	r25, Y+5	; 0x05
    2684:	8d 30       	cpi	r24, 0x0D	; 13
    2686:	91 05       	cpc	r25, r1
    2688:	b9 f1       	breq	.+110    	; 0x26f8 <OperatorSC+0xbc>
    268a:	47 c0       	rjmp	.+142    	; 0x271a <OperatorSC+0xde>
	{
	case 10:CLCD_voidSendData('+');Two_Operators[NumberOfOperators]='+';NumberOfOperators++;break;
    268c:	8b e2       	ldi	r24, 0x2B	; 43
    268e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    2692:	80 91 95 01 	lds	r24, 0x0195
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	fc 01       	movw	r30, r24
    269c:	e8 56       	subi	r30, 0x68	; 104
    269e:	fe 4f       	sbci	r31, 0xFE	; 254
    26a0:	8b e2       	ldi	r24, 0x2B	; 43
    26a2:	80 83       	st	Z, r24
    26a4:	80 91 95 01 	lds	r24, 0x0195
    26a8:	8f 5f       	subi	r24, 0xFF	; 255
    26aa:	80 93 95 01 	sts	0x0195, r24
    26ae:	35 c0       	rjmp	.+106    	; 0x271a <OperatorSC+0xde>
	case 11:CLCD_voidSendData('-');Two_Operators[NumberOfOperators]='-';NumberOfOperators++;break;
    26b0:	8d e2       	ldi	r24, 0x2D	; 45
    26b2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    26b6:	80 91 95 01 	lds	r24, 0x0195
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	fc 01       	movw	r30, r24
    26c0:	e8 56       	subi	r30, 0x68	; 104
    26c2:	fe 4f       	sbci	r31, 0xFE	; 254
    26c4:	8d e2       	ldi	r24, 0x2D	; 45
    26c6:	80 83       	st	Z, r24
    26c8:	80 91 95 01 	lds	r24, 0x0195
    26cc:	8f 5f       	subi	r24, 0xFF	; 255
    26ce:	80 93 95 01 	sts	0x0195, r24
    26d2:	23 c0       	rjmp	.+70     	; 0x271a <OperatorSC+0xde>
	case 12:CLCD_voidSendData('*');Two_Operators[NumberOfOperators]='*';NumberOfOperators++;break;
    26d4:	8a e2       	ldi	r24, 0x2A	; 42
    26d6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    26da:	80 91 95 01 	lds	r24, 0x0195
    26de:	88 2f       	mov	r24, r24
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	fc 01       	movw	r30, r24
    26e4:	e8 56       	subi	r30, 0x68	; 104
    26e6:	fe 4f       	sbci	r31, 0xFE	; 254
    26e8:	8a e2       	ldi	r24, 0x2A	; 42
    26ea:	80 83       	st	Z, r24
    26ec:	80 91 95 01 	lds	r24, 0x0195
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 93 95 01 	sts	0x0195, r24
    26f6:	11 c0       	rjmp	.+34     	; 0x271a <OperatorSC+0xde>
	case 13:CLCD_voidSendData('/');Two_Operators[NumberOfOperators]='/';NumberOfOperators++;break;
    26f8:	8f e2       	ldi	r24, 0x2F	; 47
    26fa:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    26fe:	80 91 95 01 	lds	r24, 0x0195
    2702:	88 2f       	mov	r24, r24
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	fc 01       	movw	r30, r24
    2708:	e8 56       	subi	r30, 0x68	; 104
    270a:	fe 4f       	sbci	r31, 0xFE	; 254
    270c:	8f e2       	ldi	r24, 0x2F	; 47
    270e:	80 83       	st	Z, r24
    2710:	80 91 95 01 	lds	r24, 0x0195
    2714:	8f 5f       	subi	r24, 0xFF	; 255
    2716:	80 93 95 01 	sts	0x0195, r24
	default:break;
	}
	Global_u8FirstLineCounter++;
    271a:	80 91 8b 01 	lds	r24, 0x018B
    271e:	8f 5f       	subi	r24, 0xFF	; 255
    2720:	80 93 8b 01 	sts	0x018B, r24
	Key=10;
    2724:	8a e0       	ldi	r24, 0x0A	; 10
    2726:	89 83       	std	Y+1, r24	; 0x01
    2728:	87 c0       	rjmp	.+270    	; 0x2838 <OperatorSC+0x1fc>
	while(Key==10||Key==11||Key==12||Key==13)
	{
		do{
			Key=KPD_u8GetPressedKey();
    272a:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    272e:	89 83       	std	Y+1, r24	; 0x01
		}while(Key==0xff);
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	8f 3f       	cpi	r24, 0xFF	; 255
    2734:	d1 f3       	breq	.-12     	; 0x272a <OperatorSC+0xee>
		if(NumberOfOperators<2)
    2736:	80 91 95 01 	lds	r24, 0x0195
    273a:	82 30       	cpi	r24, 0x02	; 2
    273c:	08 f0       	brcs	.+2      	; 0x2740 <OperatorSC+0x104>
    273e:	8c c0       	rjmp	.+280    	; 0x2858 <OperatorSC+0x21c>
		{
			switch (Key)
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	28 2f       	mov	r18, r24
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	3b 83       	std	Y+3, r19	; 0x03
    2748:	2a 83       	std	Y+2, r18	; 0x02
    274a:	8a 81       	ldd	r24, Y+2	; 0x02
    274c:	9b 81       	ldd	r25, Y+3	; 0x03
    274e:	8b 30       	cpi	r24, 0x0B	; 11
    2750:	91 05       	cpc	r25, r1
    2752:	71 f1       	breq	.+92     	; 0x27b0 <OperatorSC+0x174>
    2754:	2a 81       	ldd	r18, Y+2	; 0x02
    2756:	3b 81       	ldd	r19, Y+3	; 0x03
    2758:	2c 30       	cpi	r18, 0x0C	; 12
    275a:	31 05       	cpc	r19, r1
    275c:	34 f4       	brge	.+12     	; 0x276a <OperatorSC+0x12e>
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	8a 30       	cpi	r24, 0x0A	; 10
    2764:	91 05       	cpc	r25, r1
    2766:	69 f0       	breq	.+26     	; 0x2782 <OperatorSC+0x146>
    2768:	67 c0       	rjmp	.+206    	; 0x2838 <OperatorSC+0x1fc>
    276a:	2a 81       	ldd	r18, Y+2	; 0x02
    276c:	3b 81       	ldd	r19, Y+3	; 0x03
    276e:	2c 30       	cpi	r18, 0x0C	; 12
    2770:	31 05       	cpc	r19, r1
    2772:	a9 f1       	breq	.+106    	; 0x27de <OperatorSC+0x1a2>
    2774:	8a 81       	ldd	r24, Y+2	; 0x02
    2776:	9b 81       	ldd	r25, Y+3	; 0x03
    2778:	8d 30       	cpi	r24, 0x0D	; 13
    277a:	91 05       	cpc	r25, r1
    277c:	09 f4       	brne	.+2      	; 0x2780 <OperatorSC+0x144>
    277e:	46 c0       	rjmp	.+140    	; 0x280c <OperatorSC+0x1d0>
    2780:	5b c0       	rjmp	.+182    	; 0x2838 <OperatorSC+0x1fc>
			{
			case 10:
				CLCD_voidSendData('+');
    2782:	8b e2       	ldi	r24, 0x2B	; 43
    2784:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
				Two_Operators[NumberOfOperators]='+';
    2788:	80 91 95 01 	lds	r24, 0x0195
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	fc 01       	movw	r30, r24
    2792:	e8 56       	subi	r30, 0x68	; 104
    2794:	fe 4f       	sbci	r31, 0xFE	; 254
    2796:	8b e2       	ldi	r24, 0x2B	; 43
    2798:	80 83       	st	Z, r24
				Global_u8FirstLineCounter++;
    279a:	80 91 8b 01 	lds	r24, 0x018B
    279e:	8f 5f       	subi	r24, 0xFF	; 255
    27a0:	80 93 8b 01 	sts	0x018B, r24
				NumberOfOperators++;break;
    27a4:	80 91 95 01 	lds	r24, 0x0195
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	80 93 95 01 	sts	0x0195, r24
    27ae:	44 c0       	rjmp	.+136    	; 0x2838 <OperatorSC+0x1fc>
			case 11:
				CLCD_voidSendData('-');
    27b0:	8d e2       	ldi	r24, 0x2D	; 45
    27b2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
				Two_Operators[NumberOfOperators]='-';
    27b6:	80 91 95 01 	lds	r24, 0x0195
    27ba:	88 2f       	mov	r24, r24
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	fc 01       	movw	r30, r24
    27c0:	e8 56       	subi	r30, 0x68	; 104
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	8d e2       	ldi	r24, 0x2D	; 45
    27c6:	80 83       	st	Z, r24
				Global_u8FirstLineCounter++;
    27c8:	80 91 8b 01 	lds	r24, 0x018B
    27cc:	8f 5f       	subi	r24, 0xFF	; 255
    27ce:	80 93 8b 01 	sts	0x018B, r24
				NumberOfOperators++;break;
    27d2:	80 91 95 01 	lds	r24, 0x0195
    27d6:	8f 5f       	subi	r24, 0xFF	; 255
    27d8:	80 93 95 01 	sts	0x0195, r24
    27dc:	2d c0       	rjmp	.+90     	; 0x2838 <OperatorSC+0x1fc>
			case 12:
				CLCD_voidSendData('*');
    27de:	8a e2       	ldi	r24, 0x2A	; 42
    27e0:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
				Two_Operators[NumberOfOperators]='*';
    27e4:	80 91 95 01 	lds	r24, 0x0195
    27e8:	88 2f       	mov	r24, r24
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	fc 01       	movw	r30, r24
    27ee:	e8 56       	subi	r30, 0x68	; 104
    27f0:	fe 4f       	sbci	r31, 0xFE	; 254
    27f2:	8a e2       	ldi	r24, 0x2A	; 42
    27f4:	80 83       	st	Z, r24
				Global_u8FirstLineCounter++;
    27f6:	80 91 8b 01 	lds	r24, 0x018B
    27fa:	8f 5f       	subi	r24, 0xFF	; 255
    27fc:	80 93 8b 01 	sts	0x018B, r24
				NumberOfOperators++;break;
    2800:	80 91 95 01 	lds	r24, 0x0195
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	80 93 95 01 	sts	0x0195, r24
    280a:	16 c0       	rjmp	.+44     	; 0x2838 <OperatorSC+0x1fc>
			case 13:
				CLCD_voidSendData('/');
    280c:	8f e2       	ldi	r24, 0x2F	; 47
    280e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
				Two_Operators[NumberOfOperators]='/';
    2812:	80 91 95 01 	lds	r24, 0x0195
    2816:	88 2f       	mov	r24, r24
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	fc 01       	movw	r30, r24
    281c:	e8 56       	subi	r30, 0x68	; 104
    281e:	fe 4f       	sbci	r31, 0xFE	; 254
    2820:	8f e2       	ldi	r24, 0x2F	; 47
    2822:	80 83       	st	Z, r24
				Global_u8FirstLineCounter++;
    2824:	80 91 8b 01 	lds	r24, 0x018B
    2828:	8f 5f       	subi	r24, 0xFF	; 255
    282a:	80 93 8b 01 	sts	0x018B, r24
				NumberOfOperators++;break;
    282e:	80 91 95 01 	lds	r24, 0x0195
    2832:	8f 5f       	subi	r24, 0xFF	; 255
    2834:	80 93 95 01 	sts	0x0195, r24
	case 13:CLCD_voidSendData('/');Two_Operators[NumberOfOperators]='/';NumberOfOperators++;break;
	default:break;
	}
	Global_u8FirstLineCounter++;
	Key=10;
	while(Key==10||Key==11||Key==12||Key==13)
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	8a 30       	cpi	r24, 0x0A	; 10
    283c:	09 f4       	brne	.+2      	; 0x2840 <OperatorSC+0x204>
    283e:	75 cf       	rjmp	.-278    	; 0x272a <OperatorSC+0xee>
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	8b 30       	cpi	r24, 0x0B	; 11
    2844:	09 f4       	brne	.+2      	; 0x2848 <OperatorSC+0x20c>
    2846:	71 cf       	rjmp	.-286    	; 0x272a <OperatorSC+0xee>
    2848:	89 81       	ldd	r24, Y+1	; 0x01
    284a:	8c 30       	cpi	r24, 0x0C	; 12
    284c:	09 f4       	brne	.+2      	; 0x2850 <OperatorSC+0x214>
    284e:	6d cf       	rjmp	.-294    	; 0x272a <OperatorSC+0xee>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	8d 30       	cpi	r24, 0x0D	; 13
    2854:	09 f4       	brne	.+2      	; 0x2858 <OperatorSC+0x21c>
    2856:	69 cf       	rjmp	.-302    	; 0x272a <OperatorSC+0xee>
			}
		}
		else
			break;
	}
}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret

00002868 <SecondNumberSC>:
void SecondNumberSC(u8 Key)
{
    2868:	df 93       	push	r29
    286a:	cf 93       	push	r28
    286c:	0f 92       	push	r0
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	89 83       	std	Y+1, r24	; 0x01

	Global_u16SecondNumber=Key;
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	90 93 8f 01 	sts	0x018F, r25
    287e:	80 93 8e 01 	sts	0x018E, r24
	CLCD_voidWriteNumber(Key);
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	88 2f       	mov	r24, r24
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	a0 e0       	ldi	r26, 0x00	; 0
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
	Global_u8FirstLineCounter++;
    2894:	80 91 8b 01 	lds	r24, 0x018B
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	80 93 8b 01 	sts	0x018B, r24
    289e:	2e c0       	rjmp	.+92     	; 0x28fc <SecondNumberSC+0x94>
	while(Key!=15)
	{
		do{
			Key=KPD_u8GetPressedKey();
    28a0:	0e 94 0f 0c 	call	0x181e	; 0x181e <KPD_u8GetPressedKey>
    28a4:	89 83       	std	Y+1, r24	; 0x01
		}while(Key==0xff);
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	8f 3f       	cpi	r24, 0xFF	; 255
    28aa:	d1 f3       	breq	.-12     	; 0x28a0 <SecondNumberSC+0x38>
		if(Key==15)
    28ac:	89 81       	ldd	r24, Y+1	; 0x01
    28ae:	8f 30       	cpi	r24, 0x0F	; 15
    28b0:	41 f1       	breq	.+80     	; 0x2902 <SecondNumberSC+0x9a>
			break;
		Global_u8FirstLineCounter++;
    28b2:	80 91 8b 01 	lds	r24, 0x018B
    28b6:	8f 5f       	subi	r24, 0xFF	; 255
    28b8:	80 93 8b 01 	sts	0x018B, r24
		Global_u16SecondNumber=(Global_u16SecondNumber*10)+Key;
    28bc:	80 91 8e 01 	lds	r24, 0x018E
    28c0:	90 91 8f 01 	lds	r25, 0x018F
    28c4:	9c 01       	movw	r18, r24
    28c6:	22 0f       	add	r18, r18
    28c8:	33 1f       	adc	r19, r19
    28ca:	c9 01       	movw	r24, r18
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	88 0f       	add	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	28 0f       	add	r18, r24
    28d6:	39 1f       	adc	r19, r25
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	82 0f       	add	r24, r18
    28e0:	93 1f       	adc	r25, r19
    28e2:	90 93 8f 01 	sts	0x018F, r25
    28e6:	80 93 8e 01 	sts	0x018E, r24
		CLCD_voidWriteNumber(Key);
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	a0 e0       	ldi	r26, 0x00	; 0
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	bc 01       	movw	r22, r24
    28f6:	cd 01       	movw	r24, r26
    28f8:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
{

	Global_u16SecondNumber=Key;
	CLCD_voidWriteNumber(Key);
	Global_u8FirstLineCounter++;
	while(Key!=15)
    28fc:	89 81       	ldd	r24, Y+1	; 0x01
    28fe:	8f 30       	cpi	r24, 0x0F	; 15
    2900:	79 f6       	brne	.-98     	; 0x28a0 <SecondNumberSC+0x38>
		CLCD_voidWriteNumber(Key);


	}

}
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <__mulsi3>:
    290a:	62 9f       	mul	r22, r18
    290c:	d0 01       	movw	r26, r0
    290e:	73 9f       	mul	r23, r19
    2910:	f0 01       	movw	r30, r0
    2912:	82 9f       	mul	r24, r18
    2914:	e0 0d       	add	r30, r0
    2916:	f1 1d       	adc	r31, r1
    2918:	64 9f       	mul	r22, r20
    291a:	e0 0d       	add	r30, r0
    291c:	f1 1d       	adc	r31, r1
    291e:	92 9f       	mul	r25, r18
    2920:	f0 0d       	add	r31, r0
    2922:	83 9f       	mul	r24, r19
    2924:	f0 0d       	add	r31, r0
    2926:	74 9f       	mul	r23, r20
    2928:	f0 0d       	add	r31, r0
    292a:	65 9f       	mul	r22, r21
    292c:	f0 0d       	add	r31, r0
    292e:	99 27       	eor	r25, r25
    2930:	72 9f       	mul	r23, r18
    2932:	b0 0d       	add	r27, r0
    2934:	e1 1d       	adc	r30, r1
    2936:	f9 1f       	adc	r31, r25
    2938:	63 9f       	mul	r22, r19
    293a:	b0 0d       	add	r27, r0
    293c:	e1 1d       	adc	r30, r1
    293e:	f9 1f       	adc	r31, r25
    2940:	bd 01       	movw	r22, r26
    2942:	cf 01       	movw	r24, r30
    2944:	11 24       	eor	r1, r1
    2946:	08 95       	ret

00002948 <__udivmodhi4>:
    2948:	aa 1b       	sub	r26, r26
    294a:	bb 1b       	sub	r27, r27
    294c:	51 e1       	ldi	r21, 0x11	; 17
    294e:	07 c0       	rjmp	.+14     	; 0x295e <__udivmodhi4_ep>

00002950 <__udivmodhi4_loop>:
    2950:	aa 1f       	adc	r26, r26
    2952:	bb 1f       	adc	r27, r27
    2954:	a6 17       	cp	r26, r22
    2956:	b7 07       	cpc	r27, r23
    2958:	10 f0       	brcs	.+4      	; 0x295e <__udivmodhi4_ep>
    295a:	a6 1b       	sub	r26, r22
    295c:	b7 0b       	sbc	r27, r23

0000295e <__udivmodhi4_ep>:
    295e:	88 1f       	adc	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	5a 95       	dec	r21
    2964:	a9 f7       	brne	.-22     	; 0x2950 <__udivmodhi4_loop>
    2966:	80 95       	com	r24
    2968:	90 95       	com	r25
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	08 95       	ret

00002970 <__udivmodsi4>:
    2970:	a1 e2       	ldi	r26, 0x21	; 33
    2972:	1a 2e       	mov	r1, r26
    2974:	aa 1b       	sub	r26, r26
    2976:	bb 1b       	sub	r27, r27
    2978:	fd 01       	movw	r30, r26
    297a:	0d c0       	rjmp	.+26     	; 0x2996 <__udivmodsi4_ep>

0000297c <__udivmodsi4_loop>:
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	ee 1f       	adc	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	a2 17       	cp	r26, r18
    2986:	b3 07       	cpc	r27, r19
    2988:	e4 07       	cpc	r30, r20
    298a:	f5 07       	cpc	r31, r21
    298c:	20 f0       	brcs	.+8      	; 0x2996 <__udivmodsi4_ep>
    298e:	a2 1b       	sub	r26, r18
    2990:	b3 0b       	sbc	r27, r19
    2992:	e4 0b       	sbc	r30, r20
    2994:	f5 0b       	sbc	r31, r21

00002996 <__udivmodsi4_ep>:
    2996:	66 1f       	adc	r22, r22
    2998:	77 1f       	adc	r23, r23
    299a:	88 1f       	adc	r24, r24
    299c:	99 1f       	adc	r25, r25
    299e:	1a 94       	dec	r1
    29a0:	69 f7       	brne	.-38     	; 0x297c <__udivmodsi4_loop>
    29a2:	60 95       	com	r22
    29a4:	70 95       	com	r23
    29a6:	80 95       	com	r24
    29a8:	90 95       	com	r25
    29aa:	9b 01       	movw	r18, r22
    29ac:	ac 01       	movw	r20, r24
    29ae:	bd 01       	movw	r22, r26
    29b0:	cf 01       	movw	r24, r30
    29b2:	08 95       	ret

000029b4 <__prologue_saves__>:
    29b4:	2f 92       	push	r2
    29b6:	3f 92       	push	r3
    29b8:	4f 92       	push	r4
    29ba:	5f 92       	push	r5
    29bc:	6f 92       	push	r6
    29be:	7f 92       	push	r7
    29c0:	8f 92       	push	r8
    29c2:	9f 92       	push	r9
    29c4:	af 92       	push	r10
    29c6:	bf 92       	push	r11
    29c8:	cf 92       	push	r12
    29ca:	df 92       	push	r13
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	ca 1b       	sub	r28, r26
    29de:	db 0b       	sbc	r29, r27
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	09 94       	ijmp

000029ec <__epilogue_restores__>:
    29ec:	2a 88       	ldd	r2, Y+18	; 0x12
    29ee:	39 88       	ldd	r3, Y+17	; 0x11
    29f0:	48 88       	ldd	r4, Y+16	; 0x10
    29f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    29f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    29f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    29f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    29fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    29fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    29fe:	b9 84       	ldd	r11, Y+9	; 0x09
    2a00:	c8 84       	ldd	r12, Y+8	; 0x08
    2a02:	df 80       	ldd	r13, Y+7	; 0x07
    2a04:	ee 80       	ldd	r14, Y+6	; 0x06
    2a06:	fd 80       	ldd	r15, Y+5	; 0x05
    2a08:	0c 81       	ldd	r16, Y+4	; 0x04
    2a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a10:	ce 0f       	add	r28, r30
    2a12:	d1 1d       	adc	r29, r1
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	ed 01       	movw	r28, r26
    2a20:	08 95       	ret

00002a22 <_exit>:
    2a22:	f8 94       	cli

00002a24 <__stop_program>:
    2a24:	ff cf       	rjmp	.-2      	; 0x2a24 <__stop_program>
