
ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000273c  000027d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800084  00800084  000027f4  2**0
                  ALLOC
  3 .stab         00002a00  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001467  00000000  00000000  000051f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000665b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000679b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000690b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000943f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a1ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ada7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a3 11 	jmp	0x2346	; 0x2346 <__vector_6>
      1c:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__vector_7>
      20:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__vector_8>
      24:	0c 94 0a 11 	jmp	0x2214	; 0x2214 <__vector_9>
      28:	0c 94 a4 10 	jmp	0x2148	; 0x2148 <__vector_10>
      2c:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e3       	ldi	r30, 0x3C	; 60
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 11 	call	0x23ac	; 0x23ac <main>
      8a:	0c 94 9c 13 	jmp	0x2738	; 0x2738 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e7       	ldi	r26, 0x78	; 120
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 65 13 	jmp	0x26ca	; 0x26ca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e7       	ldi	r24, 0x78	; 120
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 71 13 	jmp	0x26e2	; 0x26e2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8d 13 	jmp	0x271a	; 0x271a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 91 13 	jmp	0x2722	; 0x2722 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_interface.h"

u8 Global_u8ReadingStyle;
void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     b5c:	82 e0       	ldi	r24, 0x02	; 2
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e4       	ldi	r27, 0x40	; 64
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a ef       	ldi	r20, 0xFA	; 250
     ba0:	54 e4       	ldi	r21, 0x44	; 68
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>


}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     c98:	82 e0       	ldi	r24, 0x02	; 2
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
	/*Set data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 bb 09 	call	0x1376	; 0x1376 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e4       	ldi	r27, 0x40	; 64
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a ef       	ldi	r20, 0xFA	; 250
     cdc:	54 e4       	ldi	r21, 0x44	; 68
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	88 ec       	ldi	r24, 0xC8	; 200
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     da2:	82 e0       	ldi	r24, 0x02	; 2
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 a9 08 	call	0x1152	; 0x1152 <DIO_u8SetPinValue>

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcData)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	00 d0       	rcall	.+0      	; 0xdc4 <CLCD_voidSendString+0x6>
     dc4:	0f 92       	push	r0
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9b 83       	std	Y+3, r25	; 0x03
     dcc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	0e c0       	rjmp	.+28     	; 0xdee <CLCD_voidSendString+0x30>
	while((Copy_pcData[Local_u8Counter])!='\0')
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	8a 81       	ldd	r24, Y+2	; 0x02
     dda:	9b 81       	ldd	r25, Y+3	; 0x03
     ddc:	fc 01       	movw	r30, r24
     dde:	e2 0f       	add	r30, r18
     de0:	f3 1f       	adc	r31, r19
     de2:	80 81       	ld	r24, Z
     de4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		Local_u8Counter++;
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcData)
{
	u8 Local_u8Counter=0;
	while((Copy_pcData[Local_u8Counter])!='\0')
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	9b 81       	ldd	r25, Y+3	; 0x03
     df8:	fc 01       	movw	r30, r24
     dfa:	e2 0f       	add	r30, r18
     dfc:	f3 1f       	adc	r31, r19
     dfe:	80 81       	ld	r24, Z
     e00:	88 23       	and	r24, r24
     e02:	39 f7       	brne	.-50     	; 0xdd2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
		Local_u8Counter++;
	}

}
     e04:	0f 90       	pop	r0
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	2e 97       	sbiw	r28, 0x0e	; 14
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	a0 e2       	ldi	r26, 0x20	; 32
     e2a:	b2 e4       	ldi	r27, 0x42	; 66
     e2c:	8b 87       	std	Y+11, r24	; 0x0b
     e2e:	9c 87       	std	Y+12, r25	; 0x0c
     e30:	ad 87       	std	Y+13, r26	; 0x0d
     e32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e34:	6b 85       	ldd	r22, Y+11	; 0x0b
     e36:	7c 85       	ldd	r23, Y+12	; 0x0c
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	4a ef       	ldi	r20, 0xFA	; 250
     e42:	54 e4       	ldi	r21, 0x44	; 68
     e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e48:	dc 01       	movw	r26, r24
     e4a:	cb 01       	movw	r24, r22
     e4c:	8f 83       	std	Y+7, r24	; 0x07
     e4e:	98 87       	std	Y+8, r25	; 0x08
     e50:	a9 87       	std	Y+9, r26	; 0x09
     e52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e54:	6f 81       	ldd	r22, Y+7	; 0x07
     e56:	78 85       	ldd	r23, Y+8	; 0x08
     e58:	89 85       	ldd	r24, Y+9	; 0x09
     e5a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	40 e8       	ldi	r20, 0x80	; 128
     e62:	5f e3       	ldi	r21, 0x3F	; 63
     e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e68:	88 23       	and	r24, r24
     e6a:	2c f4       	brge	.+10     	; 0xe76 <CLCD_voidInit+0x66>
		__ticks = 1;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	9e 83       	std	Y+6, r25	; 0x06
     e72:	8d 83       	std	Y+5, r24	; 0x05
     e74:	3f c0       	rjmp	.+126    	; 0xef4 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e76:	6f 81       	ldd	r22, Y+7	; 0x07
     e78:	78 85       	ldd	r23, Y+8	; 0x08
     e7a:	89 85       	ldd	r24, Y+9	; 0x09
     e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	4f e7       	ldi	r20, 0x7F	; 127
     e84:	57 e4       	ldi	r21, 0x47	; 71
     e86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e8a:	18 16       	cp	r1, r24
     e8c:	4c f5       	brge	.+82     	; 0xee0 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e2       	ldi	r20, 0x20	; 32
     e9c:	51 e4       	ldi	r21, 0x41	; 65
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	bc 01       	movw	r22, r24
     ea8:	cd 01       	movw	r24, r26
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <CLCD_voidInit+0xc6>
     eb8:	88 ec       	ldi	r24, 0xC8	; 200
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	9c 83       	std	Y+4, r25	; 0x04
     ebe:	8b 83       	std	Y+3, r24	; 0x03
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	01 97       	sbiw	r24, 0x01	; 1
     ec6:	f1 f7       	brne	.-4      	; 0xec4 <CLCD_voidInit+0xb4>
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	9e 83       	std	Y+6, r25	; 0x06
     ed4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	69 f7       	brne	.-38     	; 0xeb8 <CLCD_voidInit+0xa8>
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ee0:	6f 81       	ldd	r22, Y+7	; 0x07
     ee2:	78 85       	ldd	r23, Y+8	; 0x08
     ee4:	89 85       	ldd	r24, Y+9	; 0x09
     ee6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eec:	dc 01       	movw	r26, r24
     eee:	cb 01       	movw	r24, r22
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	9a 81       	ldd	r25, Y+2	; 0x02
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <CLCD_voidInit+0xf0>
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30ms*/
	_delay_ms(40);
	/*Function set command:2 lines ,5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
     f08:	88 e3       	ldi	r24, 0x38	; 56
     f0a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*display on/off control:display enable,disable cursor,no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
     f0e:	8c e0       	ldi	r24, 0x0C	; 12
     f10:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Clear display*/
	CLCD_voidSendCommand(1);
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>

}
     f1a:	2e 96       	adiw	r28, 0x0e	; 14
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <CLCD_voidGoToXY+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	8a 83       	std	Y+2, r24	; 0x02
     f3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	if(Copy_u8XPos==0)
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	88 23       	and	r24, r24
     f40:	19 f4       	brne	.+6      	; 0xf48 <CLCD_voidGoToXY+0x1c>
	{
		//locate in the first line
		Local_u8Adress=Copy_u8YPos;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	89 83       	std	Y+1, r24	; 0x01
     f46:	06 c0       	rjmp	.+12     	; 0xf54 <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	19 f4       	brne	.+6      	; 0xf54 <CLCD_voidGoToXY+0x28>
	{
		//locate in the second line
		Local_u8Adress=Copy_u8YPos+0x40;
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	80 5c       	subi	r24, 0xC0	; 192
     f52:	89 83       	std	Y+1, r24	; 0x01
	}
	//Send bit 8 in DDRAM and then the rest bits are the address then send it .
	CLCD_voidSendCommand(Local_u8Adress+128);
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	80 58       	subi	r24, 0x80	; 128
     f58:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	cf 91       	pop	r28
     f64:	df 91       	pop	r29
     f66:	08 95       	ret

00000f68 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 * Copy_pu8Pattern,u8 Copy_pu8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	27 97       	sbiw	r28, 0x07	; 7
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	9c 83       	std	Y+4, r25	; 0x04
     f7e:	8b 83       	std	Y+3, r24	; 0x03
     f80:	6d 83       	std	Y+5, r22	; 0x05
     f82:	4e 83       	std	Y+6, r20	; 0x06
     f84:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress=0,Local_u8iterator;
     f86:	1a 82       	std	Y+2, r1	; 0x02
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	8a 83       	std	Y+2, r24	; 0x02
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	80 5c       	subi	r24, 0xC0	; 192
     fa0:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
     fa4:	19 82       	std	Y+1, r1	; 0x01
     fa6:	0e c0       	rjmp	.+28     	; 0xfc4 <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	fc 01       	movw	r30, r24
     fb4:	e2 0f       	add	r30, r18
     fb6:	f3 1f       	adc	r31, r19
     fb8:	80 81       	ld	r24, Z
     fba:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8f 5f       	subi	r24, 0xFF	; 255
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	78 f3       	brcs	.-34     	; 0xfa8 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/*go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
     fca:	8e 81       	ldd	r24, Y+6	; 0x06
     fcc:	6f 81       	ldd	r22, Y+7	; 0x07
     fce:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
	//Display the pattern written on the CGRAM
	CLCD_voidSendData(Copy_pu8PatternNumber);
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>

}
     fd8:	27 96       	adiw	r28, 0x07	; 7
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)//99
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	2e 97       	sbiw	r28, 0x0e	; 14
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	6b 87       	std	Y+11, r22	; 0x0b
    1000:	7c 87       	std	Y+12, r23	; 0x0c
    1002:	8d 87       	std	Y+13, r24	; 0x0d
    1004:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8Counter=0,Local_u8LcdNumber;
    1006:	1a 86       	std	Y+10, r1	; 0x0a
	u32 Local_u32divisible=1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	9e 83       	std	Y+6, r25	; 0x06
    1014:	af 83       	std	Y+7, r26	; 0x07
    1016:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32temp=Copy_u32Number;
    1018:	8b 85       	ldd	r24, Y+11	; 0x0b
    101a:	9c 85       	ldd	r25, Y+12	; 0x0c
    101c:	ad 85       	ldd	r26, Y+13	; 0x0d
    101e:	be 85       	ldd	r27, Y+14	; 0x0e
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	9a 83       	std	Y+2, r25	; 0x02
    1024:	ab 83       	std	Y+3, r26	; 0x03
    1026:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Number==0)
    1028:	8b 85       	ldd	r24, Y+11	; 0x0b
    102a:	9c 85       	ldd	r25, Y+12	; 0x0c
    102c:	ad 85       	ldd	r26, Y+13	; 0x0d
    102e:	be 85       	ldd	r27, Y+14	; 0x0e
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	c9 f4       	brne	.+50     	; 0x106a <CLCD_voidWriteNumber+0x80>
		CLCD_voidSendData('0');
    1038:	80 e3       	ldi	r24, 0x30	; 48
    103a:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    103e:	80 c0       	rjmp	.+256    	; 0x1140 <CLCD_voidWriteNumber+0x156>
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
		{
			Local_u8Counter++;
    1040:	8a 85       	ldd	r24, Y+10	; 0x0a
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32temp=Local_u32temp/10;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	ab 81       	ldd	r26, Y+3	; 0x03
    104c:	bc 81       	ldd	r27, Y+4	; 0x04
    104e:	2a e0       	ldi	r18, 0x0A	; 10
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e0       	ldi	r20, 0x00	; 0
    1054:	50 e0       	ldi	r21, 0x00	; 0
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 43 13 	call	0x2686	; 0x2686 <__udivmodsi4>
    105e:	da 01       	movw	r26, r20
    1060:	c9 01       	movw	r24, r18
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	9a 83       	std	Y+2, r25	; 0x02
    1066:	ab 83       	std	Y+3, r26	; 0x03
    1068:	bc 83       	std	Y+4, r27	; 0x04
	u32 Local_u32temp=Copy_u32Number;
	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	9a 81       	ldd	r25, Y+2	; 0x02
    106e:	ab 81       	ldd	r26, Y+3	; 0x03
    1070:	bc 81       	ldd	r27, Y+4	; 0x04
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	a1 05       	cpc	r26, r1
    1076:	b1 05       	cpc	r27, r1
    1078:	19 f7       	brne	.-58     	; 0x1040 <CLCD_voidWriteNumber+0x56>
    107a:	15 c0       	rjmp	.+42     	; 0x10a6 <CLCD_voidWriteNumber+0xbc>

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
		{
			Local_u8Counter--;
    107c:	8a 85       	ldd	r24, Y+10	; 0x0a
    107e:	81 50       	subi	r24, 0x01	; 1
    1080:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32divisible*=10;
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	af 81       	ldd	r26, Y+7	; 0x07
    1088:	b8 85       	ldd	r27, Y+8	; 0x08
    108a:	2a e0       	ldi	r18, 0x0A	; 10
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	50 e0       	ldi	r21, 0x00	; 0
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsi3>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	8d 83       	std	Y+5, r24	; 0x05
    10a0:	9e 83       	std	Y+6, r25	; 0x06
    10a2:	af 83       	std	Y+7, r26	; 0x07
    10a4:	b8 87       	std	Y+8, r27	; 0x08
			Local_u8Counter++;
			Local_u32temp=Local_u32temp/10;

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
    10a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	40 f7       	brcc	.-48     	; 0x107c <CLCD_voidWriteNumber+0x92>
    10ac:	40 c0       	rjmp	.+128    	; 0x112e <CLCD_voidWriteNumber+0x144>
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
		{
			Local_u8LcdNumber=Copy_u32Number/Local_u32divisible;
    10ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    10b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    10b2:	ad 85       	ldd	r26, Y+13	; 0x0d
    10b4:	be 85       	ldd	r27, Y+14	; 0x0e
    10b6:	2d 81       	ldd	r18, Y+5	; 0x05
    10b8:	3e 81       	ldd	r19, Y+6	; 0x06
    10ba:	4f 81       	ldd	r20, Y+7	; 0x07
    10bc:	58 85       	ldd	r21, Y+8	; 0x08
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 43 13 	call	0x2686	; 0x2686 <__udivmodsi4>
    10c6:	da 01       	movw	r26, r20
    10c8:	c9 01       	movw	r24, r18
    10ca:	89 87       	std	Y+9, r24	; 0x09
			CLCD_voidSendData(Local_u8LcdNumber+'0');
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	80 5d       	subi	r24, 0xD0	; 208
    10d0:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	88 2f       	mov	r24, r24
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	2d 81       	ldd	r18, Y+5	; 0x05
    10e0:	3e 81       	ldd	r19, Y+6	; 0x06
    10e2:	4f 81       	ldd	r20, Y+7	; 0x07
    10e4:	58 85       	ldd	r21, Y+8	; 0x08
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsi3>
    10ee:	9b 01       	movw	r18, r22
    10f0:	ac 01       	movw	r20, r24
    10f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    10f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    10f6:	ad 85       	ldd	r26, Y+13	; 0x0d
    10f8:	be 85       	ldd	r27, Y+14	; 0x0e
    10fa:	82 1b       	sub	r24, r18
    10fc:	93 0b       	sbc	r25, r19
    10fe:	a4 0b       	sbc	r26, r20
    1100:	b5 0b       	sbc	r27, r21
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
			Local_u32divisible=Local_u32divisible/10;
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	af 81       	ldd	r26, Y+7	; 0x07
    1110:	b8 85       	ldd	r27, Y+8	; 0x08
    1112:	2a e0       	ldi	r18, 0x0A	; 10
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 43 13 	call	0x2686	; 0x2686 <__udivmodsi4>
    1122:	da 01       	movw	r26, r20
    1124:	c9 01       	movw	r24, r18
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	9e 83       	std	Y+6, r25	; 0x06
    112a:	af 83       	std	Y+7, r26	; 0x07
    112c:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u8Counter--;
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
    112e:	8d 81       	ldd	r24, Y+5	; 0x05
    1130:	9e 81       	ldd	r25, Y+6	; 0x06
    1132:	af 81       	ldd	r26, Y+7	; 0x07
    1134:	b8 85       	ldd	r27, Y+8	; 0x08
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	a1 05       	cpc	r26, r1
    113a:	b1 05       	cpc	r27, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <CLCD_voidWriteNumber+0x156>
    113e:	b7 cf       	rjmp	.-146    	; 0x10ae <CLCD_voidWriteNumber+0xc4>
			CLCD_voidSendData(Local_u8LcdNumber+'0');
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
			Local_u32divisible=Local_u32divisible/10;
		}
	}
}
    1140:	2e 96       	adiw	r28, 0x0e	; 14
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <DIO_u8SetPinValue>:
#include "DIO_register.h"
#include "DIO_config.h"


u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	28 97       	sbiw	r28, 0x08	; 8
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	6b 83       	std	Y+3, r22	; 0x03
    116a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    116c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	88 30       	cpi	r24, 0x08	; 8
    1172:	08 f0       	brcs	.+2      	; 0x1176 <DIO_u8SetPinValue+0x24>
    1174:	f4 c0       	rjmp	.+488    	; 0x135e <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	09 f0       	breq	.+2      	; 0x117e <DIO_u8SetPinValue+0x2c>
    117c:	72 c0       	rjmp	.+228    	; 0x1262 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	38 87       	std	Y+8, r19	; 0x08
    1186:	2f 83       	std	Y+7, r18	; 0x07
    1188:	8f 81       	ldd	r24, Y+7	; 0x07
    118a:	98 85       	ldd	r25, Y+8	; 0x08
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	91 05       	cpc	r25, r1
    1190:	49 f1       	breq	.+82     	; 0x11e4 <DIO_u8SetPinValue+0x92>
    1192:	2f 81       	ldd	r18, Y+7	; 0x07
    1194:	38 85       	ldd	r19, Y+8	; 0x08
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	2c f4       	brge	.+10     	; 0x11a6 <DIO_u8SetPinValue+0x54>
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	98 85       	ldd	r25, Y+8	; 0x08
    11a0:	00 97       	sbiw	r24, 0x00	; 0
    11a2:	61 f0       	breq	.+24     	; 0x11bc <DIO_u8SetPinValue+0x6a>
    11a4:	5b c0       	rjmp	.+182    	; 0x125c <DIO_u8SetPinValue+0x10a>
    11a6:	2f 81       	ldd	r18, Y+7	; 0x07
    11a8:	38 85       	ldd	r19, Y+8	; 0x08
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	71 f1       	breq	.+92     	; 0x120c <DIO_u8SetPinValue+0xba>
    11b0:	8f 81       	ldd	r24, Y+7	; 0x07
    11b2:	98 85       	ldd	r25, Y+8	; 0x08
    11b4:	83 30       	cpi	r24, 0x03	; 3
    11b6:	91 05       	cpc	r25, r1
    11b8:	e9 f1       	breq	.+122    	; 0x1234 <DIO_u8SetPinValue+0xe2>
    11ba:	50 c0       	rjmp	.+160    	; 0x125c <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin); break;
    11bc:	ab e3       	ldi	r26, 0x3B	; 59
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	eb e3       	ldi	r30, 0x3B	; 59
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_u8SetPinValue+0x88>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_u8SetPinValue+0x84>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	bf c0       	rjmp	.+382    	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin); break;
    11e4:	a8 e3       	ldi	r26, 0x38	; 56
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e8 e3       	ldi	r30, 0x38	; 56
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <DIO_u8SetPinValue+0xb0>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <DIO_u8SetPinValue+0xac>
    1206:	84 2b       	or	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	ab c0       	rjmp	.+342    	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin); break;
    120c:	a5 e3       	ldi	r26, 0x35	; 53
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e3       	ldi	r30, 0x35	; 53
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_u8SetPinValue+0xd8>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_u8SetPinValue+0xd4>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	97 c0       	rjmp	.+302    	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin); break;
    1234:	a2 e3       	ldi	r26, 0x32	; 50
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e2 e3       	ldi	r30, 0x32	; 50
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_u8SetPinValue+0x100>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_u8SetPinValue+0xfc>
    1256:	84 2b       	or	r24, r20
    1258:	8c 93       	st	X, r24
    125a:	83 c0       	rjmp	.+262    	; 0x1362 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
    1260:	80 c0       	rjmp	.+256    	; 0x1362 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	88 23       	and	r24, r24
    1266:	09 f0       	breq	.+2      	; 0x126a <DIO_u8SetPinValue+0x118>
    1268:	77 c0       	rjmp	.+238    	; 0x1358 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	3e 83       	std	Y+6, r19	; 0x06
    1272:	2d 83       	std	Y+5, r18	; 0x05
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	91 05       	cpc	r25, r1
    127c:	59 f1       	breq	.+86     	; 0x12d4 <DIO_u8SetPinValue+0x182>
    127e:	2d 81       	ldd	r18, Y+5	; 0x05
    1280:	3e 81       	ldd	r19, Y+6	; 0x06
    1282:	22 30       	cpi	r18, 0x02	; 2
    1284:	31 05       	cpc	r19, r1
    1286:	2c f4       	brge	.+10     	; 0x1292 <DIO_u8SetPinValue+0x140>
    1288:	8d 81       	ldd	r24, Y+5	; 0x05
    128a:	9e 81       	ldd	r25, Y+6	; 0x06
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	69 f0       	breq	.+26     	; 0x12aa <DIO_u8SetPinValue+0x158>
    1290:	60 c0       	rjmp	.+192    	; 0x1352 <DIO_u8SetPinValue+0x200>
    1292:	2d 81       	ldd	r18, Y+5	; 0x05
    1294:	3e 81       	ldd	r19, Y+6	; 0x06
    1296:	22 30       	cpi	r18, 0x02	; 2
    1298:	31 05       	cpc	r19, r1
    129a:	89 f1       	breq	.+98     	; 0x12fe <DIO_u8SetPinValue+0x1ac>
    129c:	8d 81       	ldd	r24, Y+5	; 0x05
    129e:	9e 81       	ldd	r25, Y+6	; 0x06
    12a0:	83 30       	cpi	r24, 0x03	; 3
    12a2:	91 05       	cpc	r25, r1
    12a4:	09 f4       	brne	.+2      	; 0x12a8 <DIO_u8SetPinValue+0x156>
    12a6:	40 c0       	rjmp	.+128    	; 0x1328 <DIO_u8SetPinValue+0x1d6>
    12a8:	54 c0       	rjmp	.+168    	; 0x1352 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin); break;
    12aa:	ab e3       	ldi	r26, 0x3B	; 59
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	eb e3       	ldi	r30, 0x3B	; 59
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	80 81       	ld	r24, Z
    12b4:	48 2f       	mov	r20, r24
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	28 2f       	mov	r18, r24
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	02 2e       	mov	r0, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_u8SetPinValue+0x176>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_u8SetPinValue+0x172>
    12cc:	80 95       	com	r24
    12ce:	84 23       	and	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	47 c0       	rjmp	.+142    	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin); break;
    12d4:	a8 e3       	ldi	r26, 0x38	; 56
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e8 e3       	ldi	r30, 0x38	; 56
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_u8SetPinValue+0x1a0>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_u8SetPinValue+0x19c>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	32 c0       	rjmp	.+100    	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin); break;
    12fe:	a5 e3       	ldi	r26, 0x35	; 53
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e5 e3       	ldi	r30, 0x35	; 53
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_u8SetPinValue+0x1ca>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_u8SetPinValue+0x1c6>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	1d c0       	rjmp	.+58     	; 0x1362 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin); break;
    1328:	a2 e3       	ldi	r26, 0x32	; 50
    132a:	b0 e0       	ldi	r27, 0x00	; 0
    132c:	e2 e3       	ldi	r30, 0x32	; 50
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	80 81       	ld	r24, Z
    1332:	48 2f       	mov	r20, r24
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 2e       	mov	r0, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_u8SetPinValue+0x1f4>
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	0a 94       	dec	r0
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_u8SetPinValue+0x1f0>
    134a:	80 95       	com	r24
    134c:	84 23       	and	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	08 c0       	rjmp	.+16     	; 0x1362 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	89 83       	std	Y+1, r24	; 0x01
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1362:	89 81       	ldd	r24, Y+1	; 0x01
}
    1364:	28 96       	adiw	r28, 0x08	; 8
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	cf 91       	pop	r28
    1372:	df 91       	pop	r29
    1374:	08 95       	ret

00001376 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8SetPortValue+0x6>
    137c:	00 d0       	rcall	.+0      	; 0x137e <DIO_u8SetPortValue+0x8>
    137e:	0f 92       	push	r0
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	8a 83       	std	Y+2, r24	; 0x02
    1386:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    1388:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	3d 83       	std	Y+5, r19	; 0x05
    1392:	2c 83       	std	Y+4, r18	; 0x04
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	91 05       	cpc	r25, r1
    139c:	d1 f0       	breq	.+52     	; 0x13d2 <DIO_u8SetPortValue+0x5c>
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <DIO_u8SetPortValue+0x3c>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	61 f0       	breq	.+24     	; 0x13c8 <DIO_u8SetPortValue+0x52>
    13b0:	1f c0       	rjmp	.+62     	; 0x13f0 <DIO_u8SetPortValue+0x7a>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	81 f0       	breq	.+32     	; 0x13dc <DIO_u8SetPortValue+0x66>
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	9d 81       	ldd	r25, Y+5	; 0x05
    13c0:	83 30       	cpi	r24, 0x03	; 3
    13c2:	91 05       	cpc	r25, r1
    13c4:	81 f0       	breq	.+32     	; 0x13e6 <DIO_u8SetPortValue+0x70>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA:PORTA=Copy_u8Value; break;
    13c8:	eb e3       	ldi	r30, 0x3B	; 59
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	80 83       	st	Z, r24
    13d0:	11 c0       	rjmp	.+34     	; 0x13f4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB:PORTB=Copy_u8Value; break;
    13d2:	e8 e3       	ldi	r30, 0x38	; 56
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	80 83       	st	Z, r24
    13da:	0c c0       	rjmp	.+24     	; 0x13f4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC:PORTC=Copy_u8Value; break;
    13dc:	e5 e3       	ldi	r30, 0x35	; 53
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	80 83       	st	Z, r24
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD:PORTD=Copy_u8Value; break;
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	80 83       	st	Z, r24
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	27 97       	sbiw	r28, 0x07	; 7
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	f8 94       	cli
    1414:	de bf       	out	0x3e, r29	; 62
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	cd bf       	out	0x3d, r28	; 61
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	6b 83       	std	Y+3, r22	; 0x03
    141e:	5d 83       	std	Y+5, r21	; 0x05
    1420:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1422:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value!=NULL)&&(Copy_u8Pin<=7))
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	09 f4       	brne	.+2      	; 0x142e <DIO_u8GetPinValue+0x28>
    142c:	78 c0       	rjmp	.+240    	; 0x151e <DIO_u8GetPinValue+0x118>
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	88 30       	cpi	r24, 0x08	; 8
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_u8GetPinValue+0x30>
    1434:	74 c0       	rjmp	.+232    	; 0x151e <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	3f 83       	std	Y+7, r19	; 0x07
    143e:	2e 83       	std	Y+6, r18	; 0x06
    1440:	4e 81       	ldd	r20, Y+6	; 0x06
    1442:	5f 81       	ldd	r21, Y+7	; 0x07
    1444:	41 30       	cpi	r20, 0x01	; 1
    1446:	51 05       	cpc	r21, r1
    1448:	59 f1       	breq	.+86     	; 0x14a0 <DIO_u8GetPinValue+0x9a>
    144a:	8e 81       	ldd	r24, Y+6	; 0x06
    144c:	9f 81       	ldd	r25, Y+7	; 0x07
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	34 f4       	brge	.+12     	; 0x1460 <DIO_u8GetPinValue+0x5a>
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	3f 81       	ldd	r19, Y+7	; 0x07
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	69 f0       	breq	.+26     	; 0x1478 <DIO_u8GetPinValue+0x72>
    145e:	5c c0       	rjmp	.+184    	; 0x1518 <DIO_u8GetPinValue+0x112>
    1460:	4e 81       	ldd	r20, Y+6	; 0x06
    1462:	5f 81       	ldd	r21, Y+7	; 0x07
    1464:	42 30       	cpi	r20, 0x02	; 2
    1466:	51 05       	cpc	r21, r1
    1468:	79 f1       	breq	.+94     	; 0x14c8 <DIO_u8GetPinValue+0xc2>
    146a:	8e 81       	ldd	r24, Y+6	; 0x06
    146c:	9f 81       	ldd	r25, Y+7	; 0x07
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <DIO_u8GetPinValue+0x70>
    1474:	3d c0       	rjmp	.+122    	; 0x14f0 <DIO_u8GetPinValue+0xea>
    1476:	50 c0       	rjmp	.+160    	; 0x1518 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1478:	e9 e3       	ldi	r30, 0x39	; 57
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_u8GetPinValue+0x8a>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_u8GetPinValue+0x86>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	ec 81       	ldd	r30, Y+4	; 0x04
    149a:	fd 81       	ldd	r31, Y+5	; 0x05
    149c:	80 83       	st	Z, r24
    149e:	41 c0       	rjmp	.+130    	; 0x1522 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    14a0:	e6 e3       	ldi	r30, 0x36	; 54
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_u8GetPinValue+0xb2>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_u8GetPinValue+0xae>
    14bc:	ca 01       	movw	r24, r20
    14be:	81 70       	andi	r24, 0x01	; 1
    14c0:	ec 81       	ldd	r30, Y+4	; 0x04
    14c2:	fd 81       	ldd	r31, Y+5	; 0x05
    14c4:	80 83       	st	Z, r24
    14c6:	2d c0       	rjmp	.+90     	; 0x1522 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    14c8:	e3 e3       	ldi	r30, 0x33	; 51
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	88 2f       	mov	r24, r24
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_u8GetPinValue+0xda>
    14dc:	55 95       	asr	r21
    14de:	47 95       	ror	r20
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_u8GetPinValue+0xd6>
    14e4:	ca 01       	movw	r24, r20
    14e6:	81 70       	andi	r24, 0x01	; 1
    14e8:	ec 81       	ldd	r30, Y+4	; 0x04
    14ea:	fd 81       	ldd	r31, Y+5	; 0x05
    14ec:	80 83       	st	Z, r24
    14ee:	19 c0       	rjmp	.+50     	; 0x1522 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    14f0:	e0 e3       	ldi	r30, 0x30	; 48
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	a9 01       	movw	r20, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_u8GetPinValue+0x102>
    1504:	55 95       	asr	r21
    1506:	47 95       	ror	r20
    1508:	8a 95       	dec	r24
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_u8GetPinValue+0xfe>
    150c:	ca 01       	movw	r24, r20
    150e:	81 70       	andi	r24, 0x01	; 1
    1510:	ec 81       	ldd	r30, Y+4	; 0x04
    1512:	fd 81       	ldd	r31, Y+5	; 0x05
    1514:	80 83       	st	Z, r24
    1516:	05 c0       	rjmp	.+10     	; 0x1522 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1; break;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1522:	89 81       	ldd	r24, Y+1	; 0x01

}
    1524:	27 96       	adiw	r28, 0x07	; 7
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	cf 91       	pop	r28
    1532:	df 91       	pop	r29
    1534:	08 95       	ret

00001536 <EXTI_voidInt0Init>:
/*Global pointer to function to hold INT ISR address*/
void (*EXTI_pvInt0Func) (void)= NULL;
void (*EXTI_pvInt1Func) (void)= NULL;
void (*EXTI_pvInt2Func) (void)= NULL;
void EXTI_voidInt0Init(void)
{
    1536:	df 93       	push	r29
    1538:	cf 93       	push	r28
    153a:	cd b7       	in	r28, 0x3d	; 61
    153c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR,MCUCR_ISC00);
#elif INT0_SENSE==FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
	CLR_BIT(MCUCR,MCUCR_ISC00);
#elif INT0_SENSE==RISING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC01);
    153e:	a5 e5       	ldi	r26, 0x55	; 85
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e5       	ldi	r30, 0x55	; 85
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	82 60       	ori	r24, 0x02	; 2
    154a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,MCUCR_ISC00);
    154c:	a5 e5       	ldi	r26, 0x55	; 85
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e5       	ldi	r30, 0x55	; 85
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	81 60       	ori	r24, 0x01	; 1
    1558:	8c 93       	st	X, r24
#else
#error "Wrong INT0_SENSE configuration option"
#endif
	/*check peripheral interrupt enable initial state (SIE)*/
#if INT0_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT0);
    155a:	ab e5       	ldi	r26, 0x5B	; 91
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	eb e5       	ldi	r30, 0x5B	; 91
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	80 64       	ori	r24, 0x40	; 64
    1566:	8c 93       	st	X, r24
	default:break;
	}
	//Peripheral interrupt (SIE) enable for INT0
	SET_BIT(GICR,GICR_INT0);
	 */
}
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <EXTI_voidInt1Init>:

void EXTI_voidInt1Init(void)
{
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,MCUCR_ISC10);
#elif INT1_SENSE==ON_CHANGE
	CLR_BIT(MCUCR,MCUCR_ISC11);
	SET_BIT(MCUCR,MCUCR_ISC10);
#elif INT1_SENSE==FALLING_EDGE
	SET_BIT(MCUCR,MCUCR_ISC11);
    1576:	a5 e5       	ldi	r26, 0x55	; 85
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e5 e5       	ldi	r30, 0x55	; 85
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	88 60       	ori	r24, 0x08	; 8
    1582:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,MCUCR_ISC10);
    1584:	a5 e5       	ldi	r26, 0x55	; 85
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e5 e5       	ldi	r30, 0x55	; 85
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8b 7f       	andi	r24, 0xFB	; 251
    1590:	8c 93       	st	X, r24
#else
#error "Wrong INT1_SENSE configuration option"
#endif
	/*check peripheral interrupt enable initial state (SIE)*/
#if INT1_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT1);
    1592:	ab e5       	ldi	r26, 0x5B	; 91
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e5       	ldi	r30, 0x5B	; 91
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	80 68       	ori	r24, 0x80	; 128
    159e:	8c 93       	st	X, r24
		}

	//Peripheral interrupt(SIE) enable for INT1
	SET_BIT(GICR,GICR_INT1);
	 */
}
    15a0:	cf 91       	pop	r28
    15a2:	df 91       	pop	r29
    15a4:	08 95       	ret

000015a6 <EXTI_voidInt2Init>:

void EXTI_voidInt2Init(void)
{
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62

#if INT2_SENSE==FALLING_EDGE
	CLR_BIT(MCUCSR,MCUCSR_INT2);
    15ae:	a4 e5       	ldi	r26, 0x54	; 84
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e4 e5       	ldi	r30, 0x54	; 84
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8f 7b       	andi	r24, 0xBF	; 191
    15ba:	8c 93       	st	X, r24
#else
#error "Wrong INT2_SENSE configuration option"
#endif

#if INT2_INITIAL_STATE==ENABLED
	SET_BIT(GICR,GICR_INT2);
    15bc:	ab e5       	ldi	r26, 0x5B	; 91
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e5       	ldi	r30, 0x5B	; 91
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 62       	ori	r24, 0x20	; 32
    15c8:	8c 93       	st	X, r24
}
	//Peripheral interrupt(SIE) enable for INT2
	SET_BIT(GICR,GICR_INT2);
	 */

}
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <EXTI_u8Int0SenseControl>:

u8 EXTI_u8Int0SenseControl(u8 Copy_u8Sense)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <EXTI_u8Int0SenseControl+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <EXTI_u8Int0SenseControl+0x8>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    15de:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Sense)
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3c 83       	std	Y+4, r19	; 0x04
    15e8:	2b 83       	std	Y+3, r18	; 0x03
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	82 30       	cpi	r24, 0x02	; 2
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <EXTI_u8Int0SenseControl+0x26>
    15f4:	43 c0       	rjmp	.+134    	; 0x167c <EXTI_u8Int0SenseControl+0xac>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	23 30       	cpi	r18, 0x03	; 3
    15fc:	31 05       	cpc	r19, r1
    15fe:	34 f4       	brge	.+12     	; 0x160c <EXTI_u8Int0SenseControl+0x3c>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	51 f1       	breq	.+84     	; 0x165e <EXTI_u8Int0SenseControl+0x8e>
    160a:	47 c0       	rjmp	.+142    	; 0x169a <EXTI_u8Int0SenseControl+0xca>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	23 30       	cpi	r18, 0x03	; 3
    1612:	31 05       	cpc	r19, r1
    1614:	31 f0       	breq	.+12     	; 0x1622 <EXTI_u8Int0SenseControl+0x52>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	91 05       	cpc	r25, r1
    161e:	81 f0       	breq	.+32     	; 0x1640 <EXTI_u8Int0SenseControl+0x70>
    1620:	3c c0       	rjmp	.+120    	; 0x169a <EXTI_u8Int0SenseControl+0xca>
	{
	case FALLING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01);CLR_BIT(MCUCR,MCUCR_ISC00); break;
    1622:	a5 e5       	ldi	r26, 0x55	; 85
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e5       	ldi	r30, 0x55	; 85
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	82 60       	ori	r24, 0x02	; 2
    162e:	8c 93       	st	X, r24
    1630:	a5 e5       	ldi	r26, 0x55	; 85
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e5       	ldi	r30, 0x55	; 85
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	8e 7f       	andi	r24, 0xFE	; 254
    163c:	8c 93       	st	X, r24
    163e:	2f c0       	rjmp	.+94     	; 0x169e <EXTI_u8Int0SenseControl+0xce>
	case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC01);SET_BIT(MCUCR,MCUCR_ISC00);break;
    1640:	a5 e5       	ldi	r26, 0x55	; 85
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e5 e5       	ldi	r30, 0x55	; 85
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	82 60       	ori	r24, 0x02	; 2
    164c:	8c 93       	st	X, r24
    164e:	a5 e5       	ldi	r26, 0x55	; 85
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e5       	ldi	r30, 0x55	; 85
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	81 60       	ori	r24, 0x01	; 1
    165a:	8c 93       	st	X, r24
    165c:	20 c0       	rjmp	.+64     	; 0x169e <EXTI_u8Int0SenseControl+0xce>
	case LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC01);CLR_BIT(MCUCR,MCUCR_ISC00); break;
    165e:	a5 e5       	ldi	r26, 0x55	; 85
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	e5 e5       	ldi	r30, 0x55	; 85
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	80 81       	ld	r24, Z
    1668:	8d 7f       	andi	r24, 0xFD	; 253
    166a:	8c 93       	st	X, r24
    166c:	a5 e5       	ldi	r26, 0x55	; 85
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e5 e5       	ldi	r30, 0x55	; 85
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	8c 93       	st	X, r24
    167a:	11 c0       	rjmp	.+34     	; 0x169e <EXTI_u8Int0SenseControl+0xce>
	case ON_CHANGE:CLR_BIT(MCUCR,MCUCR_ISC01);SET_BIT(MCUCR,MCUCR_ISC00); break;
    167c:	a5 e5       	ldi	r26, 0x55	; 85
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e5 e5       	ldi	r30, 0x55	; 85
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	8d 7f       	andi	r24, 0xFD	; 253
    1688:	8c 93       	st	X, r24
    168a:	a5 e5       	ldi	r26, 0x55	; 85
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e5 e5       	ldi	r30, 0x55	; 85
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	8c 93       	st	X, r24
    1698:	02 c0       	rjmp	.+4      	; 0x169e <EXTI_u8Int0SenseControl+0xce>
	default:Local_u8ErrorState=NOK;
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    169e:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	cf 91       	pop	r28
    16aa:	df 91       	pop	r29
    16ac:	08 95       	ret

000016ae <EXTI_u8Int1SenseControl>:
u8 EXTI_u8Int1SenseControl(u8 Copy_u8Sense)
{
    16ae:	df 93       	push	r29
    16b0:	cf 93       	push	r28
    16b2:	00 d0       	rcall	.+0      	; 0x16b4 <EXTI_u8Int1SenseControl+0x6>
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <EXTI_u8Int1SenseControl+0x8>
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
    16ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    16bc:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Sense)
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	3c 83       	std	Y+4, r19	; 0x04
    16c6:	2b 83       	std	Y+3, r18	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	82 30       	cpi	r24, 0x02	; 2
    16ce:	91 05       	cpc	r25, r1
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <EXTI_u8Int1SenseControl+0x26>
    16d2:	43 c0       	rjmp	.+134    	; 0x175a <EXTI_u8Int1SenseControl+0xac>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	23 30       	cpi	r18, 0x03	; 3
    16da:	31 05       	cpc	r19, r1
    16dc:	34 f4       	brge	.+12     	; 0x16ea <EXTI_u8Int1SenseControl+0x3c>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	81 30       	cpi	r24, 0x01	; 1
    16e4:	91 05       	cpc	r25, r1
    16e6:	51 f1       	breq	.+84     	; 0x173c <EXTI_u8Int1SenseControl+0x8e>
    16e8:	47 c0       	rjmp	.+142    	; 0x1778 <EXTI_u8Int1SenseControl+0xca>
    16ea:	2b 81       	ldd	r18, Y+3	; 0x03
    16ec:	3c 81       	ldd	r19, Y+4	; 0x04
    16ee:	23 30       	cpi	r18, 0x03	; 3
    16f0:	31 05       	cpc	r19, r1
    16f2:	31 f0       	breq	.+12     	; 0x1700 <EXTI_u8Int1SenseControl+0x52>
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	91 05       	cpc	r25, r1
    16fc:	81 f0       	breq	.+32     	; 0x171e <EXTI_u8Int1SenseControl+0x70>
    16fe:	3c c0       	rjmp	.+120    	; 0x1778 <EXTI_u8Int1SenseControl+0xca>
	{
	case FALLING_EDGE:SET_BIT(MCUCR,MCUCR_ISC11);CLR_BIT(MCUCR,MCUCR_ISC10); break;
    1700:	a5 e5       	ldi	r26, 0x55	; 85
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e5 e5       	ldi	r30, 0x55	; 85
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	88 60       	ori	r24, 0x08	; 8
    170c:	8c 93       	st	X, r24
    170e:	a5 e5       	ldi	r26, 0x55	; 85
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	e5 e5       	ldi	r30, 0x55	; 85
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8b 7f       	andi	r24, 0xFB	; 251
    171a:	8c 93       	st	X, r24
    171c:	2f c0       	rjmp	.+94     	; 0x177c <EXTI_u8Int1SenseControl+0xce>
	case RISING_EDGE:SET_BIT(MCUCR,MCUCR_ISC11);SET_BIT(MCUCR,MCUCR_ISC10);break;
    171e:	a5 e5       	ldi	r26, 0x55	; 85
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e5       	ldi	r30, 0x55	; 85
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	88 60       	ori	r24, 0x08	; 8
    172a:	8c 93       	st	X, r24
    172c:	a5 e5       	ldi	r26, 0x55	; 85
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e5       	ldi	r30, 0x55	; 85
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	84 60       	ori	r24, 0x04	; 4
    1738:	8c 93       	st	X, r24
    173a:	20 c0       	rjmp	.+64     	; 0x177c <EXTI_u8Int1SenseControl+0xce>
	case LOW_LEVEL:CLR_BIT(MCUCR,MCUCR_ISC11);CLR_BIT(MCUCR,MCUCR_ISC10); break;
    173c:	a5 e5       	ldi	r26, 0x55	; 85
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e5 e5       	ldi	r30, 0x55	; 85
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	87 7f       	andi	r24, 0xF7	; 247
    1748:	8c 93       	st	X, r24
    174a:	a5 e5       	ldi	r26, 0x55	; 85
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e5 e5       	ldi	r30, 0x55	; 85
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8b 7f       	andi	r24, 0xFB	; 251
    1756:	8c 93       	st	X, r24
    1758:	11 c0       	rjmp	.+34     	; 0x177c <EXTI_u8Int1SenseControl+0xce>
	case ON_CHANGE:CLR_BIT(MCUCR,MCUCR_ISC11);SET_BIT(MCUCR,MCUCR_ISC10); break;
    175a:	a5 e5       	ldi	r26, 0x55	; 85
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e5 e5       	ldi	r30, 0x55	; 85
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	8c 93       	st	X, r24
    1768:	a5 e5       	ldi	r26, 0x55	; 85
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e5       	ldi	r30, 0x55	; 85
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	84 60       	ori	r24, 0x04	; 4
    1774:	8c 93       	st	X, r24
    1776:	02 c0       	rjmp	.+4      	; 0x177c <EXTI_u8Int1SenseControl+0xce>
	default:Local_u8ErrorState=NOK;
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    177c:	89 81       	ldd	r24, Y+1	; 0x01
}
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	cf 91       	pop	r28
    1788:	df 91       	pop	r29
    178a:	08 95       	ret

0000178c <EXTI_u8Int2SenseControl>:
u8 EXTI_u8Int2SenseControl(u8 Copy_u8Sense)
{
    178c:	df 93       	push	r29
    178e:	cf 93       	push	r28
    1790:	00 d0       	rcall	.+0      	; 0x1792 <EXTI_u8Int2SenseControl+0x6>
    1792:	00 d0       	rcall	.+0      	; 0x1794 <EXTI_u8Int2SenseControl+0x8>
    1794:	0f 92       	push	r0
    1796:	cd b7       	in	r28, 0x3d	; 61
    1798:	de b7       	in	r29, 0x3e	; 62
    179a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    179c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Sense)
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	3c 83       	std	Y+4, r19	; 0x04
    17a6:	2b 83       	std	Y+3, r18	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	31 f0       	breq	.+12     	; 0x17be <EXTI_u8Int2SenseControl+0x32>
    17b2:	2b 81       	ldd	r18, Y+3	; 0x03
    17b4:	3c 81       	ldd	r19, Y+4	; 0x04
    17b6:	24 30       	cpi	r18, 0x04	; 4
    17b8:	31 05       	cpc	r19, r1
    17ba:	49 f0       	breq	.+18     	; 0x17ce <EXTI_u8Int2SenseControl+0x42>
    17bc:	10 c0       	rjmp	.+32     	; 0x17de <EXTI_u8Int2SenseControl+0x52>
	{
	case FALLING_EDGE:CLR_BIT(MCUCSR,MCUCSR_INT2);break;
    17be:	a4 e5       	ldi	r26, 0x54	; 84
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e4 e5       	ldi	r30, 0x54	; 84
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	8f 7b       	andi	r24, 0xBF	; 191
    17ca:	8c 93       	st	X, r24
    17cc:	0e c0       	rjmp	.+28     	; 0x17ea <EXTI_u8Int2SenseControl+0x5e>
	case RISING_EDGE:SET_BIT(MCUCR,MCUCSR_INT2);break;
    17ce:	a5 e5       	ldi	r26, 0x55	; 85
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e5 e5       	ldi	r30, 0x55	; 85
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	80 64       	ori	r24, 0x40	; 64
    17da:	8c 93       	st	X, r24
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <EXTI_u8Int2SenseControl+0x5e>
	default:Local_u8ErrorState=NOK;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	8d 83       	std	Y+5, r24	; 0x05

	}
}
    17e6:	8d 81       	ldd	r24, Y+5	; 0x05
    17e8:	00 c0       	rjmp	.+0      	; 0x17ea <EXTI_u8Int2SenseControl+0x5e>
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <EXTI_u8IntEnable>:

u8 EXTI_u8IntEnable(u8 Copy_u8Int)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EXTI_u8IntEnable+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EXTI_u8IntEnable+0x8>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1808:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Int)
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	2b 83       	std	Y+3, r18	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	82 30       	cpi	r24, 0x02	; 2
    181a:	91 05       	cpc	r25, r1
    181c:	91 f0       	breq	.+36     	; 0x1842 <EXTI_u8IntEnable+0x48>
    181e:	2b 81       	ldd	r18, Y+3	; 0x03
    1820:	3c 81       	ldd	r19, Y+4	; 0x04
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	a9 f0       	breq	.+42     	; 0x1852 <EXTI_u8IntEnable+0x58>
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	c1 f4       	brne	.+48     	; 0x1862 <EXTI_u8IntEnable+0x68>
	{
	case INT0:SET_BIT(GICR,GICR_INT0);break;
    1832:	ab e5       	ldi	r26, 0x5B	; 91
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	eb e5       	ldi	r30, 0x5B	; 91
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	8c 93       	st	X, r24
    1840:	12 c0       	rjmp	.+36     	; 0x1866 <EXTI_u8IntEnable+0x6c>
	case INT1:SET_BIT(GICR,GICR_INT1);break;
    1842:	ab e5       	ldi	r26, 0x5B	; 91
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	eb e5       	ldi	r30, 0x5B	; 91
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	80 68       	ori	r24, 0x80	; 128
    184e:	8c 93       	st	X, r24
    1850:	0a c0       	rjmp	.+20     	; 0x1866 <EXTI_u8IntEnable+0x6c>
	case INT2:SET_BIT(GICR,GICR_INT2);break;
    1852:	ab e5       	ldi	r26, 0x5B	; 91
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e5       	ldi	r30, 0x5B	; 91
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 62       	ori	r24, 0x20	; 32
    185e:	8c 93       	st	X, r24
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <EXTI_u8IntEnable+0x6c>
	default:Local_u8ErrorState=NOK;
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    1866:	89 81       	ldd	r24, Y+1	; 0x01
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <EXTI_u8IntDisable>:
u8 EXTI_u8IntDisable(u8 Copy_u8Int)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <EXTI_u8IntDisable+0x6>
    187c:	00 d0       	rcall	.+0      	; 0x187e <EXTI_u8IntDisable+0x8>
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1884:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8Int)
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	3c 83       	std	Y+4, r19	; 0x04
    188e:	2b 83       	std	Y+3, r18	; 0x03
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	91 05       	cpc	r25, r1
    1898:	91 f0       	breq	.+36     	; 0x18be <EXTI_u8IntDisable+0x48>
    189a:	2b 81       	ldd	r18, Y+3	; 0x03
    189c:	3c 81       	ldd	r19, Y+4	; 0x04
    189e:	23 30       	cpi	r18, 0x03	; 3
    18a0:	31 05       	cpc	r19, r1
    18a2:	a9 f0       	breq	.+42     	; 0x18ce <EXTI_u8IntDisable+0x58>
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	91 05       	cpc	r25, r1
    18ac:	c1 f4       	brne	.+48     	; 0x18de <EXTI_u8IntDisable+0x68>
	{
	case INT0:CLR_BIT(GICR,GICR_INT0);break;
    18ae:	ab e5       	ldi	r26, 0x5B	; 91
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	eb e5       	ldi	r30, 0x5B	; 91
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	8f 7b       	andi	r24, 0xBF	; 191
    18ba:	8c 93       	st	X, r24
    18bc:	12 c0       	rjmp	.+36     	; 0x18e2 <EXTI_u8IntDisable+0x6c>
	case INT1:CLR_BIT(GICR,GICR_INT1);break;
    18be:	ab e5       	ldi	r26, 0x5B	; 91
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	eb e5       	ldi	r30, 0x5B	; 91
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	8f 77       	andi	r24, 0x7F	; 127
    18ca:	8c 93       	st	X, r24
    18cc:	0a c0       	rjmp	.+20     	; 0x18e2 <EXTI_u8IntDisable+0x6c>
	case INT2:CLR_BIT(GICR,GICR_INT2);break;
    18ce:	ab e5       	ldi	r26, 0x5B	; 91
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	eb e5       	ldi	r30, 0x5B	; 91
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	8f 7d       	andi	r24, 0xDF	; 223
    18da:	8c 93       	st	X, r24
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <EXTI_u8IntDisable+0x6c>
	default:Local_u8ErrorState=NOK;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack(void (*Copy_pvInt0Func) (void))
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <EXTI_u8Int0SetCallBack+0x6>
    18f8:	0f 92       	push	r0
    18fa:	cd b7       	in	r28, 0x3d	; 61
    18fc:	de b7       	in	r29, 0x3e	; 62
    18fe:	9b 83       	std	Y+3, r25	; 0x03
    1900:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1902:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt0Func!=NULL)
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	9b 81       	ldd	r25, Y+3	; 0x03
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	39 f0       	breq	.+14     	; 0x191a <EXTI_u8Int0SetCallBack+0x28>
	{
		EXTI_pvInt0Func=Copy_pvInt0Func;
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	9b 81       	ldd	r25, Y+3	; 0x03
    1910:	90 93 85 00 	sts	0x0085, r25
    1914:	80 93 84 00 	sts	0x0084, r24
    1918:	02 c0       	rjmp	.+4      	; 0x191e <EXTI_u8Int0SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
    191a:	82 e0       	ldi	r24, 0x02	; 2
    191c:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <EXTI_u8Int1SetCallBack>:

u8 EXTI_u8Int1SetCallBack(void (*Copy_pvInt1Func) (void))
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <EXTI_u8Int1SetCallBack+0x6>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	9b 83       	std	Y+3, r25	; 0x03
    193a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    193c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt1Func!=NULL)
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	9b 81       	ldd	r25, Y+3	; 0x03
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	39 f0       	breq	.+14     	; 0x1954 <EXTI_u8Int1SetCallBack+0x28>
	{
		EXTI_pvInt1Func=Copy_pvInt1Func;
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	9b 81       	ldd	r25, Y+3	; 0x03
    194a:	90 93 87 00 	sts	0x0087, r25
    194e:	80 93 86 00 	sts	0x0086, r24
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <EXTI_u8Int1SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
    1954:	82 e0       	ldi	r24, 0x02	; 2
    1956:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1958:	89 81       	ldd	r24, Y+1	; 0x01
}
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <EXTI_u8Int2SetCallBack>:

u8 EXTI_u8Int2SetCallBack(void (*Copy_pvInt2Func) (void))
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	00 d0       	rcall	.+0      	; 0x196c <EXTI_u8Int2SetCallBack+0x6>
    196c:	0f 92       	push	r0
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	9b 83       	std	Y+3, r25	; 0x03
    1974:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState=OK;
    1976:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvInt2Func!=NULL)
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	9b 81       	ldd	r25, Y+3	; 0x03
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	39 f0       	breq	.+14     	; 0x198e <EXTI_u8Int2SetCallBack+0x28>
	{
		EXTI_pvInt2Func=Copy_pvInt2Func;
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	9b 81       	ldd	r25, Y+3	; 0x03
    1984:	90 93 89 00 	sts	0x0089, r25
    1988:	80 93 88 00 	sts	0x0088, r24
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <EXTI_u8Int2SetCallBack+0x2c>
	}
	else
		Local_u8ErrorState=NULL_POINTER;
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8ErrorState;
    1992:	89 81       	ldd	r24, Y+1	; 0x01
}
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	08 95       	ret

000019a0 <__vector_1>:

void __vector_1 (void) __attribute__((signal));
void __vector_1 (void)
{
    19a0:	1f 92       	push	r1
    19a2:	0f 92       	push	r0
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	0f 92       	push	r0
    19a8:	11 24       	eor	r1, r1
    19aa:	2f 93       	push	r18
    19ac:	3f 93       	push	r19
    19ae:	4f 93       	push	r20
    19b0:	5f 93       	push	r21
    19b2:	6f 93       	push	r22
    19b4:	7f 93       	push	r23
    19b6:	8f 93       	push	r24
    19b8:	9f 93       	push	r25
    19ba:	af 93       	push	r26
    19bc:	bf 93       	push	r27
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvInt0Func!=NULL)
    19ca:	80 91 84 00 	lds	r24, 0x0084
    19ce:	90 91 85 00 	lds	r25, 0x0085
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	29 f0       	breq	.+10     	; 0x19e0 <__vector_1+0x40>
	{
	EXTI_pvInt0Func();
    19d6:	e0 91 84 00 	lds	r30, 0x0084
    19da:	f0 91 85 00 	lds	r31, 0x0085
    19de:	09 95       	icall
	}
	else
	{
		//do nothing
	}
}
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	ff 91       	pop	r31
    19e6:	ef 91       	pop	r30
    19e8:	bf 91       	pop	r27
    19ea:	af 91       	pop	r26
    19ec:	9f 91       	pop	r25
    19ee:	8f 91       	pop	r24
    19f0:	7f 91       	pop	r23
    19f2:	6f 91       	pop	r22
    19f4:	5f 91       	pop	r21
    19f6:	4f 91       	pop	r20
    19f8:	3f 91       	pop	r19
    19fa:	2f 91       	pop	r18
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <GIE_voidEnable>:
#include "Bit_Math.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1a06:	df 93       	push	r29
    1a08:	cf 93       	push	r28
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
	/*Set SREG_I bit to enable GIE */
	SET_BIT(SREG,SREG_I);
    1a0e:	af e5       	ldi	r26, 0x5F	; 95
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	ef e5       	ldi	r30, 0x5F	; 95
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	80 68       	ori	r24, 0x80	; 128
    1a1a:	8c 93       	st	X, r24
}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	/*Clear SREG_I bit to disable GIE */
	CLR_BIT(SREG,SREG_I);
    1a2a:	af e5       	ldi	r26, 0x5F	; 95
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	ef e5       	ldi	r30, 0x5F	; 95
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 77       	andi	r24, 0x7F	; 127
    1a36:	8c 93       	st	X, r24
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <PORT_voidinit>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidinit(void)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1a46:	ea e3       	ldi	r30, 0x3A	; 58
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	8f ef       	ldi	r24, 0xFF	; 255
    1a4c:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1a4e:	e7 e3       	ldi	r30, 0x37	; 55
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	88 e0       	ldi	r24, 0x08	; 8
    1a54:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1a56:	e4 e3       	ldi	r30, 0x34	; 52
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	87 e0       	ldi	r24, 0x07	; 7
    1a5c:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1a5e:	e1 e3       	ldi	r30, 0x31	; 49
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	10 82       	st	Z, r1

	PORTA=PORTA_INIT;
    1a64:	eb e3       	ldi	r30, 0x3B	; 59
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	10 82       	st	Z, r1
	PORTB=PORTB_INIT;
    1a6a:	e8 e3       	ldi	r30, 0x38	; 56
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	10 82       	st	Z, r1
	PORTC=PORTC_INIT;
    1a70:	e5 e3       	ldi	r30, 0x35	; 53
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	10 82       	st	Z, r1
	PORTD=PORTD_INIT;
    1a76:	e2 e3       	ldi	r30, 0x32	; 50
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	10 82       	st	Z, r1

}
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <PWM_Timer0_voidInit>:
#include "PWM_register.h"
#include "PWM_private.h"
#include "PWM_config.h"

void PWM_Timer0_voidInit(PWM_t * PWM)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <PWM_Timer0_voidInit+0x6>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01
	if(PWM->PWM_mode==FAST_PWM)
    1a90:	e9 81       	ldd	r30, Y+1	; 0x01
    1a92:	fa 81       	ldd	r31, Y+2	; 0x02
    1a94:	80 81       	ld	r24, Z
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	e1 f5       	brne	.+120    	; 0x1b12 <PWM_Timer0_voidInit+0x90>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);
    1a9a:	a3 e5       	ldi	r26, 0x53	; 83
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e3 e5       	ldi	r30, 0x53	; 83
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	80 64       	ori	r24, 0x40	; 64
    1aa6:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1aa8:	a3 e5       	ldi	r26, 0x53	; 83
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e3 e5       	ldi	r30, 0x53	; 83
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	88 60       	ori	r24, 0x08	; 8
    1ab4:	8c 93       	st	X, r24
		if(PWM->PWM_mode_type==NON_REVERSED_FAST_PWM)
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	81 81       	ldd	r24, Z+1	; 0x01
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	91 f4       	brne	.+36     	; 0x1ae4 <PWM_Timer0_voidInit+0x62>
		{
			SET_BIT(TCCR0,TCCR0_COM01);
    1ac0:	a3 e5       	ldi	r26, 0x53	; 83
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e3 e5       	ldi	r30, 0x53	; 83
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 62       	ori	r24, 0x20	; 32
    1acc:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,TCCR0_COM00);
    1ace:	a3 e5       	ldi	r26, 0x53	; 83
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e3 e5       	ldi	r30, 0x53	; 83
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8f 7e       	andi	r24, 0xEF	; 239
    1ada:	8c 93       	st	X, r24
			PWM_Timer0_voidSetOCR(OCR0_VAL);
    1adc:	80 e4       	ldi	r24, 0x40	; 64
    1ade:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <PWM_Timer0_voidSetOCR>
    1ae2:	2d c0       	rjmp	.+90     	; 0x1b3e <PWM_Timer0_voidInit+0xbc>

		}
		else if (PWM->PWM_mode_type==REVERSED_FAST_PWM)
    1ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae8:	81 81       	ldd	r24, Z+1	; 0x01
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	41 f5       	brne	.+80     	; 0x1b3e <PWM_Timer0_voidInit+0xbc>
		{
			SET_BIT(TCCR0,TCCR0_COM01);
    1aee:	a3 e5       	ldi	r26, 0x53	; 83
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e3 e5       	ldi	r30, 0x53	; 83
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	80 62       	ori	r24, 0x20	; 32
    1afa:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM00);
    1afc:	a3 e5       	ldi	r26, 0x53	; 83
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e3 e5       	ldi	r30, 0x53	; 83
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	80 61       	ori	r24, 0x10	; 16
    1b08:	8c 93       	st	X, r24
			PWM_Timer0_voidSetOCR(RESOLUTION-OCR0_VAL);
    1b0a:	8f eb       	ldi	r24, 0xBF	; 191
    1b0c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <PWM_Timer0_voidSetOCR>
    1b10:	16 c0       	rjmp	.+44     	; 0x1b3e <PWM_Timer0_voidInit+0xbc>
//			CLCD_voidGoToXY(0,6);
//			CLCD_voidWriteNumber(OCR0_VAL);
		}
	}
	else if(PWM->PWM_mode==PHASE_CORRECT_PWM)
    1b12:	e9 81       	ldd	r30, Y+1	; 0x01
    1b14:	fa 81       	ldd	r31, Y+2	; 0x02
    1b16:	80 81       	ld	r24, Z
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	89 f4       	brne	.+34     	; 0x1b3e <PWM_Timer0_voidInit+0xbc>
	{
		SET_BIT(TCCR0,TCCR0_WGM00);  //non reversed phase correct
    1b1c:	a3 e5       	ldi	r26, 0x53	; 83
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e3 e5       	ldi	r30, 0x53	; 83
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	80 64       	ori	r24, 0x40	; 64
    1b28:	8c 93       	st	X, r24
		CLR_BIT(TCCR0,TCCR0_WGM01);
    1b2a:	a3 e5       	ldi	r26, 0x53	; 83
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e3 e5       	ldi	r30, 0x53	; 83
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	87 7f       	andi	r24, 0xF7	; 247
    1b36:	8c 93       	st	X, r24
		PWM_Timer0_voidSetOCR(OCR0_VAL);
    1b38:	80 e4       	ldi	r24, 0x40	; 64
    1b3a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <PWM_Timer0_voidSetOCR>

	}
	TCCR0&=PRESCALER_MASK;
    1b3e:	a3 e5       	ldi	r26, 0x53	; 83
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e3 e5       	ldi	r30, 0x53	; 83
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	88 7f       	andi	r24, 0xF8	; 248
    1b4a:	8c 93       	st	X, r24
	if(PWM->Prescaler==DIVIDE_BY_8)
    1b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	41 f4       	brne	.+16     	; 0x1b66 <PWM_Timer0_voidInit+0xe4>
	{
		TCCR0|=DIVIDE_BY_8;
    1b56:	a3 e5       	ldi	r26, 0x53	; 83
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e3 e5       	ldi	r30, 0x53	; 83
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	82 60       	ori	r24, 0x02	; 2
    1b62:	8c 93       	st	X, r24
    1b64:	26 c0       	rjmp	.+76     	; 0x1bb2 <PWM_Timer0_voidInit+0x130>
	}
	else if (PWM->Prescaler==PRESCALE_DIVIDE_BY_64)
    1b66:	e9 81       	ldd	r30, Y+1	; 0x01
    1b68:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6a:	82 81       	ldd	r24, Z+2	; 0x02
    1b6c:	83 30       	cpi	r24, 0x03	; 3
    1b6e:	41 f4       	brne	.+16     	; 0x1b80 <PWM_Timer0_voidInit+0xfe>
	{
		TCCR0|=PRESCALE_DIVIDE_BY_64;
    1b70:	a3 e5       	ldi	r26, 0x53	; 83
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e3 e5       	ldi	r30, 0x53	; 83
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	83 60       	ori	r24, 0x03	; 3
    1b7c:	8c 93       	st	X, r24
    1b7e:	19 c0       	rjmp	.+50     	; 0x1bb2 <PWM_Timer0_voidInit+0x130>
	}
	else if(PWM->Prescaler==PRESCALE_DIVIDE_BY_256)
    1b80:	e9 81       	ldd	r30, Y+1	; 0x01
    1b82:	fa 81       	ldd	r31, Y+2	; 0x02
    1b84:	82 81       	ldd	r24, Z+2	; 0x02
    1b86:	84 30       	cpi	r24, 0x04	; 4
    1b88:	41 f4       	brne	.+16     	; 0x1b9a <PWM_Timer0_voidInit+0x118>
	{
		TCCR0|=PRESCALE_DIVIDE_BY_256;
    1b8a:	a3 e5       	ldi	r26, 0x53	; 83
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e3 e5       	ldi	r30, 0x53	; 83
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	84 60       	ori	r24, 0x04	; 4
    1b96:	8c 93       	st	X, r24
    1b98:	0c c0       	rjmp	.+24     	; 0x1bb2 <PWM_Timer0_voidInit+0x130>
	}
	else if(PWM->Prescaler==PRESCALE_DIVIDE_BY_1024)
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ba0:	85 30       	cpi	r24, 0x05	; 5
    1ba2:	39 f4       	brne	.+14     	; 0x1bb2 <PWM_Timer0_voidInit+0x130>
	{
		TCCR0|=PRESCALE_DIVIDE_BY_1024;
    1ba4:	a3 e5       	ldi	r26, 0x53	; 83
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	e3 e5       	ldi	r30, 0x53	; 83
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	85 60       	ori	r24, 0x05	; 5
    1bb0:	8c 93       	st	X, r24
	}
}
    1bb2:	0f 90       	pop	r0
    1bb4:	0f 90       	pop	r0
    1bb6:	cf 91       	pop	r28
    1bb8:	df 91       	pop	r29
    1bba:	08 95       	ret

00001bbc <PWM_Timer1_voidInit>:
void PWM_Timer1_voidInit(PWM_t * PWM)
{
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	00 d0       	rcall	.+0      	; 0x1bc2 <PWM_Timer1_voidInit+0x6>
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	/*Fast PWM Set on top clear on compare*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1bca:	af e4       	ldi	r26, 0x4F	; 79
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	ef e4       	ldi	r30, 0x4F	; 79
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 68       	ori	r24, 0x80	; 128
    1bd6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1bd8:	af e4       	ldi	r26, 0x4F	; 79
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ef e4       	ldi	r30, 0x4F	; 79
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7b       	andi	r24, 0xBF	; 191
    1be4:	8c 93       	st	X, r24

	/*CTC mode TOP ICR editing*/
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1be6:	ae e4       	ldi	r26, 0x4E	; 78
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ee e4       	ldi	r30, 0x4E	; 78
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 61       	ori	r24, 0x10	; 16
    1bf2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1bf4:	ae e4       	ldi	r26, 0x4E	; 78
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ee e4       	ldi	r30, 0x4E	; 78
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	88 60       	ori	r24, 0x08	; 8
    1c00:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1c02:	af e4       	ldi	r26, 0x4F	; 79
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	ef e4       	ldi	r30, 0x4F	; 79
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	82 60       	ori	r24, 0x02	; 2
    1c0e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1c10:	af e4       	ldi	r26, 0x4F	; 79
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	ef e4       	ldi	r30, 0x4F	; 79
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8e 7f       	andi	r24, 0xFE	; 254
    1c1c:	8c 93       	st	X, r24

	/*Set Prescaler*/
	TCCR1B&=PRESCALER_MASK;
    1c1e:	ae e4       	ldi	r26, 0x4E	; 78
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ee e4       	ldi	r30, 0x4E	; 78
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	88 7f       	andi	r24, 0xF8	; 248
    1c2a:	8c 93       	st	X, r24
	TCCR1B|=DIVIDE_BY_8;
    1c2c:	ae e4       	ldi	r26, 0x4E	; 78
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ee e4       	ldi	r30, 0x4E	; 78
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	82 60       	ori	r24, 0x02	; 2
    1c38:	8c 93       	st	X, r24

}
    1c3a:	0f 90       	pop	r0
    1c3c:	0f 90       	pop	r0
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <PWM_Timer0_voidSetOCR>:
void PWM_Timer0_voidSetOCR(u8 Copy_u8OCRVal)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	0f 92       	push	r0
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCRVal;
    1c50:	ec e5       	ldi	r30, 0x5C	; 92
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	80 83       	st	Z, r24
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <PWM_Timer1_voidSetICR>:
void PWM_Timer1_voidSetICR(u16 Copy_u16ICRTop)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <PWM_Timer1_voidSetICR+0x6>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16ICRTop;
    1c6e:	e6 e4       	ldi	r30, 0x46	; 70
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	91 83       	std	Z+1, r25	; 0x01
    1c78:	80 83       	st	Z, r24
}
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <PWM_Timer1_voidSetOCRA>:

void PWM_Timer1_voidSetOCRA(u16 Copy_u16OCRAVal)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <PWM_Timer1_voidSetOCRA+0x6>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16OCRAVal;
    1c92:	ea e4       	ldi	r30, 0x4A	; 74
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <PWM_Timer1_voidSetOCRB>:
void PWM_Timer1_voidSetOCRB(u16 Copy_u16OCRBVal)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <PWM_Timer1_voidSetOCRB+0x6>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16OCRBVal;
    1cb6:	e8 e4       	ldi	r30, 0x48	; 72
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	80 83       	st	Z, r24
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <TIMER0_voidInit>:
static void (*TIMER1_CTCA_pvCallBackFunc)(void)=NULL;
static void (*TIMER1_CTCB_pvCallBackFunc)(void)=NULL;
static void (*ICU_pv_CallBackFunc)(void)=NULL;

void TIMER0_voidInit(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62

#elif TIMER_MODE==CTC_MODE
	/*Choose CTC mode*/
	//	CLR_BIT(TCCR0,TCCR0_WGM00);
	//	SET_BIT(TCCR0,TCCR0_WGM01);
	SET_BIT(TCCR0,TCCR0_WGM00);
    1cd4:	a3 e5       	ldi	r26, 0x53	; 83
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e3 e5       	ldi	r30, 0x53	; 83
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	80 64       	ori	r24, 0x40	; 64
    1ce0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    1ce2:	a3 e5       	ldi	r26, 0x53	; 83
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e3 e5       	ldi	r30, 0x53	; 83
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	88 60       	ori	r24, 0x08	; 8
    1cee:	8c 93       	st	X, r24
	/*Output match interrupt enable */
	SET_BIT(TIMSK,TIMSK_OCIE0);
    1cf0:	a9 e5       	ldi	r26, 0x59	; 89
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e9 e5       	ldi	r30, 0x59	; 89
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	82 60       	ori	r24, 0x02	; 2
    1cfc:	8c 93       	st	X, r24
	Timer0_voidSetOCR(OCR0_VAL);
    1cfe:	80 e4       	ldi	r24, 0x40	; 64
    1d00:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <Timer0_voidSetOCR>

#endif


	TCCR0 &=CLOCK_SELCET_MASK;
    1d04:	a3 e5       	ldi	r26, 0x53	; 83
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e3 e5       	ldi	r30, 0x53	; 83
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	88 7f       	andi	r24, 0xF8	; 248
    1d10:	8c 93       	st	X, r24
#if CLOCK_SELECT== NO_CLOCK_SRC
	TCCR0|=NO_CLOCK_SRC;
#elif CLOCK_SELECT== NO_PRESCALING
	TCCR0|=NO_PRESCALING;
#elif CLOCK_SELECT== PRESCALE_DIVIDE_BY_8
	TCCR0|=PRESCALE_DIVIDE_BY_8;
    1d12:	a3 e5       	ldi	r26, 0x53	; 83
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	e3 e5       	ldi	r30, 0x53	; 83
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	82 60       	ori	r24, 0x02	; 2
    1d1e:	8c 93       	st	X, r24
#elif CLOCK_SELECT== PRESCALE_DIVIDE_BY_1024
	TCCR0|=PRESCALE_DIVIDE_BY_1024;
#error "Wrong Clock select Specifications"
#endif

}
    1d20:	cf 91       	pop	r28
    1d22:	df 91       	pop	r29
    1d24:	08 95       	ret

00001d26 <TIMER1_voidInit>:
void TIMER1_voidInit(Timer1_t * Timer1)
{
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	00 d0       	rcall	.+0      	; 0x1d2c <TIMER1_voidInit+0x6>
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
	if (Timer1->Timer1_Mode==NORMAL_MODE)
    1d34:	e9 81       	ldd	r30, Y+1	; 0x01
    1d36:	fa 81       	ldd	r31, Y+2	; 0x02
    1d38:	80 81       	ld	r24, Z
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	21 f5       	brne	.+72     	; 0x1d86 <TIMER1_voidInit+0x60>
	{
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1d3e:	ae e4       	ldi	r26, 0x4E	; 78
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	ee e4       	ldi	r30, 0x4E	; 78
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 7e       	andi	r24, 0xEF	; 239
    1d4a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B,TCCR1B_WGM12);
    1d4c:	ae e4       	ldi	r26, 0x4E	; 78
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	ee e4       	ldi	r30, 0x4E	; 78
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	87 7f       	andi	r24, 0xF7	; 247
    1d58:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1d5a:	af e4       	ldi	r26, 0x4F	; 79
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ef e4       	ldi	r30, 0x4F	; 79
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	8d 7f       	andi	r24, 0xFD	; 253
    1d66:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1d68:	af e4       	ldi	r26, 0x4F	; 79
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	ef e4       	ldi	r30, 0x4F	; 79
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_TOIE1);
    1d76:	a9 e5       	ldi	r26, 0x59	; 89
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e9 e5       	ldi	r30, 0x59	; 89
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	84 60       	ori	r24, 0x04	; 4
    1d82:	8c 93       	st	X, r24
    1d84:	37 c0       	rjmp	.+110    	; 0x1df4 <TIMER1_voidInit+0xce>
//		TIMER1_voidSetTimerVal(TCNT1_VAL);
	}
	else if(Timer1->Timer1_Mode==CTC_MODE)
    1d86:	e9 81       	ldd	r30, Y+1	; 0x01
    1d88:	fa 81       	ldd	r31, Y+2	; 0x02
    1d8a:	80 81       	ld	r24, Z
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	91 f5       	brne	.+100    	; 0x1df4 <TIMER1_voidInit+0xce>
	{
		CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1d90:	ae e4       	ldi	r26, 0x4E	; 78
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ee e4       	ldi	r30, 0x4E	; 78
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 7e       	andi	r24, 0xEF	; 239
    1d9c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    1d9e:	ae e4       	ldi	r26, 0x4E	; 78
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	ee e4       	ldi	r30, 0x4E	; 78
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 60       	ori	r24, 0x08	; 8
    1daa:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1dac:	af e4       	ldi	r26, 0x4F	; 79
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	ef e4       	ldi	r30, 0x4F	; 79
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8d 7f       	andi	r24, 0xFD	; 253
    1db8:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1dba:	af e4       	ldi	r26, 0x4F	; 79
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ef e4       	ldi	r30, 0x4F	; 79
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8e 7f       	andi	r24, 0xFE	; 254
    1dc6:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1A);
    1dc8:	a9 e5       	ldi	r26, 0x59	; 89
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e9 e5       	ldi	r30, 0x59	; 89
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	80 61       	ori	r24, 0x10	; 16
    1dd4:	8c 93       	st	X, r24
		SET_BIT(TIMSK,TIMSK_OCIE1B);
    1dd6:	a9 e5       	ldi	r26, 0x59	; 89
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e9 e5       	ldi	r30, 0x59	; 89
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	88 60       	ori	r24, 0x08	; 8
    1de2:	8c 93       	st	X, r24
		Timer1_voidSetOCR1A(OCR1A_VAL);
    1de4:	80 e4       	ldi	r24, 0x40	; 64
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <Timer1_voidSetOCR1A>
		Timer1_voidSetOCR1B(OCR1B_VAL);
    1dec:	80 e4       	ldi	r24, 0x40	; 64
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0e 94 01 10 	call	0x2002	; 0x2002 <Timer1_voidSetOCR1B>
	}

	TCCR1B&=CLOCK_SELCET_MASK;
    1df4:	ae e4       	ldi	r26, 0x4E	; 78
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	ee e4       	ldi	r30, 0x4E	; 78
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 7f       	andi	r24, 0xF8	; 248
    1e00:	8c 93       	st	X, r24
	if(Timer1->Prescaler==PRESCALE_DIVIDE_BY_8)
    1e02:	e9 81       	ldd	r30, Y+1	; 0x01
    1e04:	fa 81       	ldd	r31, Y+2	; 0x02
    1e06:	81 81       	ldd	r24, Z+1	; 0x01
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <TIMER1_voidInit+0xf6>
	{
		TCCR1B|=PRESCALE_DIVIDE_BY_8;
    1e0c:	ae e4       	ldi	r26, 0x4E	; 78
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ee e4       	ldi	r30, 0x4E	; 78
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	82 60       	ori	r24, 0x02	; 2
    1e18:	8c 93       	st	X, r24
    1e1a:	26 c0       	rjmp	.+76     	; 0x1e68 <TIMER1_voidInit+0x142>
	}
	else if(Timer1->Prescaler==PRESCALE_DIVIDE_BY_64)
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	81 81       	ldd	r24, Z+1	; 0x01
    1e22:	83 30       	cpi	r24, 0x03	; 3
    1e24:	41 f4       	brne	.+16     	; 0x1e36 <TIMER1_voidInit+0x110>
	{
		TCCR1B|=PRESCALE_DIVIDE_BY_64;
    1e26:	ae e4       	ldi	r26, 0x4E	; 78
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	ee e4       	ldi	r30, 0x4E	; 78
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	83 60       	ori	r24, 0x03	; 3
    1e32:	8c 93       	st	X, r24
    1e34:	19 c0       	rjmp	.+50     	; 0x1e68 <TIMER1_voidInit+0x142>
	}
	else if(Timer1->Prescaler==PRESCALE_DIVIDE_BY_256)
    1e36:	e9 81       	ldd	r30, Y+1	; 0x01
    1e38:	fa 81       	ldd	r31, Y+2	; 0x02
    1e3a:	81 81       	ldd	r24, Z+1	; 0x01
    1e3c:	84 30       	cpi	r24, 0x04	; 4
    1e3e:	41 f4       	brne	.+16     	; 0x1e50 <TIMER1_voidInit+0x12a>
	{
		TCCR1B|=PRESCALE_DIVIDE_BY_256;
    1e40:	ae e4       	ldi	r26, 0x4E	; 78
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	ee e4       	ldi	r30, 0x4E	; 78
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	84 60       	ori	r24, 0x04	; 4
    1e4c:	8c 93       	st	X, r24
    1e4e:	0c c0       	rjmp	.+24     	; 0x1e68 <TIMER1_voidInit+0x142>
	}
	else if(Timer1->Prescaler==PRESCALE_DIVIDE_BY_1024)
    1e50:	e9 81       	ldd	r30, Y+1	; 0x01
    1e52:	fa 81       	ldd	r31, Y+2	; 0x02
    1e54:	81 81       	ldd	r24, Z+1	; 0x01
    1e56:	85 30       	cpi	r24, 0x05	; 5
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <TIMER1_voidInit+0x142>
	{
		TCCR1B|=PRESCALE_DIVIDE_BY_1024;
    1e5a:	ae e4       	ldi	r26, 0x4E	; 78
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	ee e4       	ldi	r30, 0x4E	; 78
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	85 60       	ori	r24, 0x05	; 5
    1e66:	8c 93       	st	X, r24
	}
}
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	cf 91       	pop	r28
    1e6e:	df 91       	pop	r29
    1e70:	08 95       	ret

00001e72 <ICU_voidInit>:

void ICU_voidInit(void)
{
    1e72:	df 93       	push	r29
    1e74:	cf 93       	push	r28
    1e76:	cd b7       	in	r28, 0x3d	; 61
    1e78:	de b7       	in	r29, 0x3e	; 62
	/*Set trigger source to rising edge initially*/
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    1e7a:	ae e4       	ldi	r26, 0x4E	; 78
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	ee e4       	ldi	r30, 0x4E	; 78
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	80 64       	ori	r24, 0x40	; 64
    1e86:	8c 93       	st	X, r24
	/*enable input capture interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1e88:	a9 e5       	ldi	r26, 0x59	; 89
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	e9 e5       	ldi	r30, 0x59	; 89
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	80 62       	ori	r24, 0x20	; 32
    1e94:	8c 93       	st	X, r24
}
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret

00001e9c <ICU_u8SetTriggerEdge>:
u8 ICU_u8SetTriggerEdge(u8 Copy_u8TrigEdge)
{
    1e9c:	df 93       	push	r29
    1e9e:	cf 93       	push	r28
    1ea0:	00 d0       	rcall	.+0      	; 0x1ea2 <ICU_u8SetTriggerEdge+0x6>
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1ea8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8TrigEdge==ICU_Rising)
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	81 30       	cpi	r24, 0x01	; 1
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <ICU_u8SetTriggerEdge+0x24>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1eb0:	ae e4       	ldi	r26, 0x4E	; 78
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	ee e4       	ldi	r30, 0x4E	; 78
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	80 64       	ori	r24, 0x40	; 64
    1ebc:	8c 93       	st	X, r24
    1ebe:	0d c0       	rjmp	.+26     	; 0x1eda <ICU_u8SetTriggerEdge+0x3e>
	}

	else if(Copy_u8TrigEdge==ICU_Falling)
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	41 f4       	brne	.+16     	; 0x1ed6 <ICU_u8SetTriggerEdge+0x3a>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1ec6:	ae e4       	ldi	r26, 0x4E	; 78
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	ee e4       	ldi	r30, 0x4E	; 78
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	8f 7b       	andi	r24, 0xBF	; 191
    1ed2:	8c 93       	st	X, r24
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <ICU_u8SetTriggerEdge+0x3e>
	}
	else
	{
		Local_u8ErrorStatus=NOK;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorStatus;
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
}
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	08 95       	ret

00001ee6 <ICU_voidEnableInterrupt>:
void ICU_voidEnableInterrupt(void)
{
    1ee6:	df 93       	push	r29
    1ee8:	cf 93       	push	r28
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1eee:	a9 e5       	ldi	r26, 0x59	; 89
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e9 e5       	ldi	r30, 0x59	; 89
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	80 62       	ori	r24, 0x20	; 32
    1efa:	8c 93       	st	X, r24
}
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <ICU_voidDisableInterrupt>:
void ICU_voidDisableInterrupt(void)
{
    1f02:	df 93       	push	r29
    1f04:	cf 93       	push	r28
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1f0a:	a9 e5       	ldi	r26, 0x59	; 89
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e9 e5       	ldi	r30, 0x59	; 89
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	8f 7d       	andi	r24, 0xDF	; 223
    1f16:	8c 93       	st	X, r24

}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <ICU_u16ReadICR>:
u16 ICU_u16ReadICR(void)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1f26:	e6 e4       	ldi	r30, 0x46	; 70
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <ICU_u8SetCallback>:

u8 ICU_u8SetCallback(void (*Copy_pvCallBackFunc)(void))
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	00 d0       	rcall	.+0      	; 0x1f3a <ICU_u8SetCallback+0x6>
    1f3a:	0f 92       	push	r0
    1f3c:	cd b7       	in	r28, 0x3d	; 61
    1f3e:	de b7       	in	r29, 0x3e	; 62
    1f40:	9b 83       	std	Y+3, r25	; 0x03
    1f42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    1f44:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pvCallBackFunc==NULL)
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	11 f4       	brne	.+4      	; 0x1f52 <ICU_u8SetCallback+0x1e>
	{
		Local_u8ErrorStatus=NULL;
    1f4e:	19 82       	std	Y+1, r1	; 0x01
    1f50:	06 c0       	rjmp	.+12     	; 0x1f5e <ICU_u8SetCallback+0x2a>
	}
	else
	{
		ICU_pv_CallBackFunc=Copy_pvCallBackFunc;
    1f52:	8a 81       	ldd	r24, Y+2	; 0x02
    1f54:	9b 81       	ldd	r25, Y+3	; 0x03
    1f56:	90 93 95 00 	sts	0x0095, r25
    1f5a:	80 93 94 00 	sts	0x0094, r24
	}
	return Local_u8ErrorStatus;
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	cf 91       	pop	r28
    1f68:	df 91       	pop	r29
    1f6a:	08 95       	ret

00001f6c <TIMER0_voidSetTimerVal>:
void TIMER0_voidSetTimerVal(u8 Copy_u8TimerVal)
{
    1f6c:	df 93       	push	r29
    1f6e:	cf 93       	push	r28
    1f70:	0f 92       	push	r0
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8TimerVal;
    1f78:	e2 e5       	ldi	r30, 0x52	; 82
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	80 83       	st	Z, r24
}
    1f80:	0f 90       	pop	r0
    1f82:	cf 91       	pop	r28
    1f84:	df 91       	pop	r29
    1f86:	08 95       	ret

00001f88 <Timer0_voidSetOCR>:
void Timer0_voidSetOCR(u8 Copy_u8OCRVal)
{
    1f88:	df 93       	push	r29
    1f8a:	cf 93       	push	r28
    1f8c:	0f 92       	push	r0
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCRVal;
    1f94:	ec e5       	ldi	r30, 0x5C	; 92
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	80 83       	st	Z, r24
}
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <TIMER1_voidGetTimer1Reading>:

u16 TIMER1_voidGetTimer1Reading(void)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	cd b7       	in	r28, 0x3d	; 61
    1faa:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    1fac:	ec e4       	ldi	r30, 0x4C	; 76
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	91 81       	ldd	r25, Z+1	; 0x01
}
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <TIMER1_voidSetTimerVal>:
void TIMER1_voidSetTimerVal(u16 Copy_u16TimerVal)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <TIMER1_voidSetTimerVal+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16TimerVal;
    1fc8:	ec e4       	ldi	r30, 0x4C	; 76
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd0:	91 83       	std	Z+1, r25	; 0x01
    1fd2:	80 83       	st	Z, r24
}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	cf 91       	pop	r28
    1fda:	df 91       	pop	r29
    1fdc:	08 95       	ret

00001fde <Timer1_voidSetOCR1A>:
void Timer1_voidSetOCR1A(u16 Copy_u16OCRVal)
{
    1fde:	df 93       	push	r29
    1fe0:	cf 93       	push	r28
    1fe2:	00 d0       	rcall	.+0      	; 0x1fe4 <Timer1_voidSetOCR1A+0x6>
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16OCRVal;
    1fec:	ea e4       	ldi	r30, 0x4A	; 74
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	91 83       	std	Z+1, r25	; 0x01
    1ff6:	80 83       	st	Z, r24
}
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	cf 91       	pop	r28
    1ffe:	df 91       	pop	r29
    2000:	08 95       	ret

00002002 <Timer1_voidSetOCR1B>:

void Timer1_voidSetOCR1B(u16 Copy_u16OCRVal)
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <Timer1_voidSetOCR1B+0x6>
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	9a 83       	std	Y+2, r25	; 0x02
    200e:	89 83       	std	Y+1, r24	; 0x01
	OCR1B=Copy_u16OCRVal;
    2010:	e8 e4       	ldi	r30, 0x48	; 72
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
}
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	cf 91       	pop	r28
    2022:	df 91       	pop	r29
    2024:	08 95       	ret

00002026 <TIMER0_CTC_u8SetCallBack>:
//Timer 0 CTC mode Set callback
u8 TIMER0_CTC_u8SetCallBack(void (*Copy_pvCallbackFunc) (void))
{
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	00 d0       	rcall	.+0      	; 0x202c <TIMER0_CTC_u8SetCallBack+0x6>
    202c:	0f 92       	push	r0
    202e:	cd b7       	in	r28, 0x3d	; 61
    2030:	de b7       	in	r29, 0x3e	; 62
    2032:	9b 83       	std	Y+3, r25	; 0x03
    2034:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2036:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallbackFunc==NULL)
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	9b 81       	ldd	r25, Y+3	; 0x03
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	19 f4       	brne	.+6      	; 0x2046 <TIMER0_CTC_u8SetCallBack+0x20>
		Local_u8ErrorStatus=NULL_POINTER;
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	06 c0       	rjmp	.+12     	; 0x2052 <TIMER0_CTC_u8SetCallBack+0x2c>
	else
	{
		TIMER0_CTC_pvCallBackFunc=Copy_pvCallbackFunc;
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	90 93 8b 00 	sts	0x008B, r25
    204e:	80 93 8a 00 	sts	0x008A, r24
	}
	return Local_u8ErrorStatus;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <TIMER0_Normal_u8SetCallBack>:
//Timer 0 Normal mode Set callback
u8 TIMER0_Normal_u8SetCallBack(void (*Copy_pvCallbackFunc) (void))
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <TIMER0_Normal_u8SetCallBack+0x6>
    2066:	0f 92       	push	r0
    2068:	cd b7       	in	r28, 0x3d	; 61
    206a:	de b7       	in	r29, 0x3e	; 62
    206c:	9b 83       	std	Y+3, r25	; 0x03
    206e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    2070:	19 82       	std	Y+1, r1	; 0x01
		if(Copy_pvCallbackFunc==NULL)
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	19 f4       	brne	.+6      	; 0x2080 <TIMER0_Normal_u8SetCallBack+0x20>
			Local_u8ErrorStatus=NULL_POINTER;
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	89 83       	std	Y+1, r24	; 0x01
    207e:	06 c0       	rjmp	.+12     	; 0x208c <TIMER0_Normal_u8SetCallBack+0x2c>
		else
		{
			TIMER0_Normal_pvCallBackFunc=Copy_pvCallbackFunc;
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	90 93 8d 00 	sts	0x008D, r25
    2088:	80 93 8c 00 	sts	0x008C, r24
		}
		return Local_u8ErrorStatus;
    208c:	89 81       	ldd	r24, Y+1	; 0x01
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	cf 91       	pop	r28
    2096:	df 91       	pop	r29
    2098:	08 95       	ret

0000209a <TIMER1_Normal_u8SetCallBack>:
//Timer 1 Normal mode Set callback
u8 TIMER1_Normal_u8SetCallBack(void (*Copy_pvCallbackFunc) (void))
{
    209a:	df 93       	push	r29
    209c:	cf 93       	push	r28
    209e:	00 d0       	rcall	.+0      	; 0x20a0 <TIMER1_Normal_u8SetCallBack+0x6>
    20a0:	0f 92       	push	r0
    20a2:	cd b7       	in	r28, 0x3d	; 61
    20a4:	de b7       	in	r29, 0x3e	; 62
    20a6:	9b 83       	std	Y+3, r25	; 0x03
    20a8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    20aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallbackFunc==NULL)
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	00 97       	sbiw	r24, 0x00	; 0
    20b2:	19 f4       	brne	.+6      	; 0x20ba <TIMER1_Normal_u8SetCallBack+0x20>
		Local_u8ErrorStatus=NULL_POINTER;
    20b4:	82 e0       	ldi	r24, 0x02	; 2
    20b6:	89 83       	std	Y+1, r24	; 0x01
    20b8:	06 c0       	rjmp	.+12     	; 0x20c6 <TIMER1_Normal_u8SetCallBack+0x2c>
	else
	{
		TIMER1_Normal_pvCallBackFunc=Copy_pvCallbackFunc;
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	90 93 8f 00 	sts	0x008F, r25
    20c2:	80 93 8e 00 	sts	0x008E, r24
	}
	return Local_u8ErrorStatus;
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20c8:	0f 90       	pop	r0
    20ca:	0f 90       	pop	r0
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <TIMER1_CTCA_u8SetCallBack>:
//Timer 1 CTCA mode Set callback
u8 TIMER1_CTCA_u8SetCallBack(void (*Copy_pvCallbackFunc) (void))
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	00 d0       	rcall	.+0      	; 0x20da <TIMER1_CTCA_u8SetCallBack+0x6>
    20da:	0f 92       	push	r0
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	9b 83       	std	Y+3, r25	; 0x03
    20e2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    20e4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallbackFunc==NULL)
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	00 97       	sbiw	r24, 0x00	; 0
    20ec:	19 f4       	brne	.+6      	; 0x20f4 <TIMER1_CTCA_u8SetCallBack+0x20>
		Local_u8ErrorStatus=NULL_POINTER;
    20ee:	82 e0       	ldi	r24, 0x02	; 2
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	06 c0       	rjmp	.+12     	; 0x2100 <TIMER1_CTCA_u8SetCallBack+0x2c>
	else
	{
		TIMER1_CTCA_pvCallBackFunc=Copy_pvCallbackFunc;
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	9b 81       	ldd	r25, Y+3	; 0x03
    20f8:	90 93 91 00 	sts	0x0091, r25
    20fc:	80 93 90 00 	sts	0x0090, r24
	}
	return Local_u8ErrorStatus;
    2100:	89 81       	ldd	r24, Y+1	; 0x01
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	cf 91       	pop	r28
    210a:	df 91       	pop	r29
    210c:	08 95       	ret

0000210e <TIMER1_CTCB_u8SetCallBack>:
//Timer 1 CTCB mode Set callback
u8 TIMER1_CTCB_u8SetCallBack(void (*Copy_pvCallbackFunc) (void))
{
    210e:	df 93       	push	r29
    2110:	cf 93       	push	r28
    2112:	00 d0       	rcall	.+0      	; 0x2114 <TIMER1_CTCB_u8SetCallBack+0x6>
    2114:	0f 92       	push	r0
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9b 83       	std	Y+3, r25	; 0x03
    211c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorStatus=OK;
    211e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallbackFunc==NULL)
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	19 f4       	brne	.+6      	; 0x212e <TIMER1_CTCB_u8SetCallBack+0x20>
		Local_u8ErrorStatus=NULL_POINTER;
    2128:	82 e0       	ldi	r24, 0x02	; 2
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	06 c0       	rjmp	.+12     	; 0x213a <TIMER1_CTCB_u8SetCallBack+0x2c>
	else
	{
		TIMER1_CTCB_pvCallBackFunc=Copy_pvCallbackFunc;
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	9b 81       	ldd	r25, Y+3	; 0x03
    2132:	90 93 93 00 	sts	0x0093, r25
    2136:	80 93 92 00 	sts	0x0092, r24
	}
	return Local_u8ErrorStatus;
    213a:	89 81       	ldd	r24, Y+1	; 0x01
}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <__vector_10>:


//Compare match timer 0 interrupt
void __vector_10 (void)  __attribute__((signal));
void __vector_10 (void)
{
    2148:	1f 92       	push	r1
    214a:	0f 92       	push	r0
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	0f 92       	push	r0
    2150:	11 24       	eor	r1, r1
    2152:	2f 93       	push	r18
    2154:	3f 93       	push	r19
    2156:	4f 93       	push	r20
    2158:	5f 93       	push	r21
    215a:	6f 93       	push	r22
    215c:	7f 93       	push	r23
    215e:	8f 93       	push	r24
    2160:	9f 93       	push	r25
    2162:	af 93       	push	r26
    2164:	bf 93       	push	r27
    2166:	ef 93       	push	r30
    2168:	ff 93       	push	r31
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_pvCallBackFunc!=NULL)
    2172:	80 91 8a 00 	lds	r24, 0x008A
    2176:	90 91 8b 00 	lds	r25, 0x008B
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	29 f0       	breq	.+10     	; 0x2188 <__vector_10+0x40>
	{
		TIMER0_CTC_pvCallBackFunc();
    217e:	e0 91 8a 00 	lds	r30, 0x008A
    2182:	f0 91 8b 00 	lds	r31, 0x008B
    2186:	09 95       	icall
	}
}
    2188:	cf 91       	pop	r28
    218a:	df 91       	pop	r29
    218c:	ff 91       	pop	r31
    218e:	ef 91       	pop	r30
    2190:	bf 91       	pop	r27
    2192:	af 91       	pop	r26
    2194:	9f 91       	pop	r25
    2196:	8f 91       	pop	r24
    2198:	7f 91       	pop	r23
    219a:	6f 91       	pop	r22
    219c:	5f 91       	pop	r21
    219e:	4f 91       	pop	r20
    21a0:	3f 91       	pop	r19
    21a2:	2f 91       	pop	r18
    21a4:	0f 90       	pop	r0
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	0f 90       	pop	r0
    21aa:	1f 90       	pop	r1
    21ac:	18 95       	reti

000021ae <__vector_11>:
//Normal mode timer 0 interrupt
void __vector_11 (void)  __attribute__((signal));
void __vector_11 (void)
{
    21ae:	1f 92       	push	r1
    21b0:	0f 92       	push	r0
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	0f 92       	push	r0
    21b6:	11 24       	eor	r1, r1
    21b8:	2f 93       	push	r18
    21ba:	3f 93       	push	r19
    21bc:	4f 93       	push	r20
    21be:	5f 93       	push	r21
    21c0:	6f 93       	push	r22
    21c2:	7f 93       	push	r23
    21c4:	8f 93       	push	r24
    21c6:	9f 93       	push	r25
    21c8:	af 93       	push	r26
    21ca:	bf 93       	push	r27
    21cc:	ef 93       	push	r30
    21ce:	ff 93       	push	r31
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	cd b7       	in	r28, 0x3d	; 61
    21d6:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_Normal_pvCallBackFunc!=NULL)
    21d8:	80 91 8c 00 	lds	r24, 0x008C
    21dc:	90 91 8d 00 	lds	r25, 0x008D
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	29 f0       	breq	.+10     	; 0x21ee <__vector_11+0x40>
	{
		TIMER0_Normal_pvCallBackFunc();
    21e4:	e0 91 8c 00 	lds	r30, 0x008C
    21e8:	f0 91 8d 00 	lds	r31, 0x008D
    21ec:	09 95       	icall
	}
}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	bf 91       	pop	r27
    21f8:	af 91       	pop	r26
    21fa:	9f 91       	pop	r25
    21fc:	8f 91       	pop	r24
    21fe:	7f 91       	pop	r23
    2200:	6f 91       	pop	r22
    2202:	5f 91       	pop	r21
    2204:	4f 91       	pop	r20
    2206:	3f 91       	pop	r19
    2208:	2f 91       	pop	r18
    220a:	0f 90       	pop	r0
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	0f 90       	pop	r0
    2210:	1f 90       	pop	r1
    2212:	18 95       	reti

00002214 <__vector_9>:
//Normal mode timer 1 interrupt
void __vector_9 (void)  __attribute__((signal));
void __vector_9 (void)
{
    2214:	1f 92       	push	r1
    2216:	0f 92       	push	r0
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	0f 92       	push	r0
    221c:	11 24       	eor	r1, r1
    221e:	2f 93       	push	r18
    2220:	3f 93       	push	r19
    2222:	4f 93       	push	r20
    2224:	5f 93       	push	r21
    2226:	6f 93       	push	r22
    2228:	7f 93       	push	r23
    222a:	8f 93       	push	r24
    222c:	9f 93       	push	r25
    222e:	af 93       	push	r26
    2230:	bf 93       	push	r27
    2232:	ef 93       	push	r30
    2234:	ff 93       	push	r31
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_Normal_pvCallBackFunc!=NULL)
    223e:	80 91 8e 00 	lds	r24, 0x008E
    2242:	90 91 8f 00 	lds	r25, 0x008F
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	29 f0       	breq	.+10     	; 0x2254 <__vector_9+0x40>
	{
		TIMER1_Normal_pvCallBackFunc();
    224a:	e0 91 8e 00 	lds	r30, 0x008E
    224e:	f0 91 8f 00 	lds	r31, 0x008F
    2252:	09 95       	icall
	}
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	ff 91       	pop	r31
    225a:	ef 91       	pop	r30
    225c:	bf 91       	pop	r27
    225e:	af 91       	pop	r26
    2260:	9f 91       	pop	r25
    2262:	8f 91       	pop	r24
    2264:	7f 91       	pop	r23
    2266:	6f 91       	pop	r22
    2268:	5f 91       	pop	r21
    226a:	4f 91       	pop	r20
    226c:	3f 91       	pop	r19
    226e:	2f 91       	pop	r18
    2270:	0f 90       	pop	r0
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	0f 90       	pop	r0
    2276:	1f 90       	pop	r1
    2278:	18 95       	reti

0000227a <__vector_7>:

//Compare match A timer 1 interrupt
void __vector_7 (void)  __attribute__((signal));
void __vector_7 (void)
{
    227a:	1f 92       	push	r1
    227c:	0f 92       	push	r0
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	0f 92       	push	r0
    2282:	11 24       	eor	r1, r1
    2284:	2f 93       	push	r18
    2286:	3f 93       	push	r19
    2288:	4f 93       	push	r20
    228a:	5f 93       	push	r21
    228c:	6f 93       	push	r22
    228e:	7f 93       	push	r23
    2290:	8f 93       	push	r24
    2292:	9f 93       	push	r25
    2294:	af 93       	push	r26
    2296:	bf 93       	push	r27
    2298:	ef 93       	push	r30
    229a:	ff 93       	push	r31
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CTCA_pvCallBackFunc!=NULL)
    22a4:	80 91 90 00 	lds	r24, 0x0090
    22a8:	90 91 91 00 	lds	r25, 0x0091
    22ac:	00 97       	sbiw	r24, 0x00	; 0
    22ae:	29 f0       	breq	.+10     	; 0x22ba <__vector_7+0x40>
	{
		TIMER1_CTCA_pvCallBackFunc();
    22b0:	e0 91 90 00 	lds	r30, 0x0090
    22b4:	f0 91 91 00 	lds	r31, 0x0091
    22b8:	09 95       	icall
	}
}
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	ff 91       	pop	r31
    22c0:	ef 91       	pop	r30
    22c2:	bf 91       	pop	r27
    22c4:	af 91       	pop	r26
    22c6:	9f 91       	pop	r25
    22c8:	8f 91       	pop	r24
    22ca:	7f 91       	pop	r23
    22cc:	6f 91       	pop	r22
    22ce:	5f 91       	pop	r21
    22d0:	4f 91       	pop	r20
    22d2:	3f 91       	pop	r19
    22d4:	2f 91       	pop	r18
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	0f 90       	pop	r0
    22dc:	1f 90       	pop	r1
    22de:	18 95       	reti

000022e0 <__vector_8>:
//Compare match B timer 1 interrupt
void __vector_8 (void)  __attribute__((signal));
void __vector_8 (void)
{
    22e0:	1f 92       	push	r1
    22e2:	0f 92       	push	r0
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	0f 92       	push	r0
    22e8:	11 24       	eor	r1, r1
    22ea:	2f 93       	push	r18
    22ec:	3f 93       	push	r19
    22ee:	4f 93       	push	r20
    22f0:	5f 93       	push	r21
    22f2:	6f 93       	push	r22
    22f4:	7f 93       	push	r23
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	af 93       	push	r26
    22fc:	bf 93       	push	r27
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CTCB_pvCallBackFunc!=NULL)
    230a:	80 91 92 00 	lds	r24, 0x0092
    230e:	90 91 93 00 	lds	r25, 0x0093
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	29 f0       	breq	.+10     	; 0x2320 <__vector_8+0x40>
	{
		TIMER1_CTCB_pvCallBackFunc();
    2316:	e0 91 92 00 	lds	r30, 0x0092
    231a:	f0 91 93 00 	lds	r31, 0x0093
    231e:	09 95       	icall
	}
}
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	ff 91       	pop	r31
    2326:	ef 91       	pop	r30
    2328:	bf 91       	pop	r27
    232a:	af 91       	pop	r26
    232c:	9f 91       	pop	r25
    232e:	8f 91       	pop	r24
    2330:	7f 91       	pop	r23
    2332:	6f 91       	pop	r22
    2334:	5f 91       	pop	r21
    2336:	4f 91       	pop	r20
    2338:	3f 91       	pop	r19
    233a:	2f 91       	pop	r18
    233c:	0f 90       	pop	r0
    233e:	0f be       	out	0x3f, r0	; 63
    2340:	0f 90       	pop	r0
    2342:	1f 90       	pop	r1
    2344:	18 95       	reti

00002346 <__vector_6>:
//Input capture unit ISR
void __vector_6 (void)  __attribute__((signal));
void __vector_6 (void)
{
    2346:	1f 92       	push	r1
    2348:	0f 92       	push	r0
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	0f 92       	push	r0
    234e:	11 24       	eor	r1, r1
    2350:	2f 93       	push	r18
    2352:	3f 93       	push	r19
    2354:	4f 93       	push	r20
    2356:	5f 93       	push	r21
    2358:	6f 93       	push	r22
    235a:	7f 93       	push	r23
    235c:	8f 93       	push	r24
    235e:	9f 93       	push	r25
    2360:	af 93       	push	r26
    2362:	bf 93       	push	r27
    2364:	ef 93       	push	r30
    2366:	ff 93       	push	r31
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	if(ICU_pv_CallBackFunc!=NULL)
    2370:	80 91 94 00 	lds	r24, 0x0094
    2374:	90 91 95 00 	lds	r25, 0x0095
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	29 f0       	breq	.+10     	; 0x2386 <__vector_6+0x40>
	{
		ICU_pv_CallBackFunc();
    237c:	e0 91 94 00 	lds	r30, 0x0094
    2380:	f0 91 95 00 	lds	r31, 0x0095
    2384:	09 95       	icall
	}
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	ff 91       	pop	r31
    238c:	ef 91       	pop	r30
    238e:	bf 91       	pop	r27
    2390:	af 91       	pop	r26
    2392:	9f 91       	pop	r25
    2394:	8f 91       	pop	r24
    2396:	7f 91       	pop	r23
    2398:	6f 91       	pop	r22
    239a:	5f 91       	pop	r21
    239c:	4f 91       	pop	r20
    239e:	3f 91       	pop	r19
    23a0:	2f 91       	pop	r18
    23a2:	0f 90       	pop	r0
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	0f 90       	pop	r0
    23a8:	1f 90       	pop	r1
    23aa:	18 95       	reti

000023ac <main>:
static u16 Overflows=0;
void ICU_SW(void);
void ICU_HW(void);
void Timer1_overflow(void);
void main (void)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	2a 97       	sbiw	r28, 0x0a	; 10
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61

	PORT_voidinit();
    23c0:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <PORT_voidinit>
	ICU_voidInit();
    23c4:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <ICU_voidInit>
	ICU_u8SetCallback(&ICU_HW);
    23c8:	8f e8       	ldi	r24, 0x8F	; 143
    23ca:	92 e1       	ldi	r25, 0x12	; 18
    23cc:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <ICU_u8SetCallback>
	TIMER1_Normal_u8SetCallBack(&Timer1_overflow);
    23d0:	84 e1       	ldi	r24, 0x14	; 20
    23d2:	93 e1       	ldi	r25, 0x13	; 19
    23d4:	0e 94 4d 10 	call	0x209a	; 0x209a <TIMER1_Normal_u8SetCallBack>
//	EXTI_voidInt0Init();
//	EXTI_u8Int0SetCallBack(&ICU);
	CLCD_voidInit();
    23d8:	0e 94 08 07 	call	0xe10	; 0xe10 <CLCD_voidInit>
	PWM_t pwm={FAST_PWM,NON_REVERSED_FAST_PWM,DIVIDE_BY_8};
    23dc:	ce 01       	movw	r24, r28
    23de:	01 96       	adiw	r24, 0x01	; 1
    23e0:	9f 83       	std	Y+7, r25	; 0x07
    23e2:	8e 83       	std	Y+6, r24	; 0x06
    23e4:	e0 e8       	ldi	r30, 0x80	; 128
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	f9 87       	std	Y+9, r31	; 0x09
    23ea:	e8 87       	std	Y+8, r30	; 0x08
    23ec:	f3 e0       	ldi	r31, 0x03	; 3
    23ee:	fa 87       	std	Y+10, r31	; 0x0a
    23f0:	e8 85       	ldd	r30, Y+8	; 0x08
    23f2:	f9 85       	ldd	r31, Y+9	; 0x09
    23f4:	00 80       	ld	r0, Z
    23f6:	88 85       	ldd	r24, Y+8	; 0x08
    23f8:	99 85       	ldd	r25, Y+9	; 0x09
    23fa:	01 96       	adiw	r24, 0x01	; 1
    23fc:	99 87       	std	Y+9, r25	; 0x09
    23fe:	88 87       	std	Y+8, r24	; 0x08
    2400:	ee 81       	ldd	r30, Y+6	; 0x06
    2402:	ff 81       	ldd	r31, Y+7	; 0x07
    2404:	00 82       	st	Z, r0
    2406:	8e 81       	ldd	r24, Y+6	; 0x06
    2408:	9f 81       	ldd	r25, Y+7	; 0x07
    240a:	01 96       	adiw	r24, 0x01	; 1
    240c:	9f 83       	std	Y+7, r25	; 0x07
    240e:	8e 83       	std	Y+6, r24	; 0x06
    2410:	9a 85       	ldd	r25, Y+10	; 0x0a
    2412:	91 50       	subi	r25, 0x01	; 1
    2414:	9a 87       	std	Y+10, r25	; 0x0a
    2416:	ea 85       	ldd	r30, Y+10	; 0x0a
    2418:	ee 23       	and	r30, r30
    241a:	51 f7       	brne	.-44     	; 0x23f0 <main+0x44>
	PWM_Timer0_voidInit(&pwm);
    241c:	ce 01       	movw	r24, r28
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <PWM_Timer0_voidInit>
	Timer1_t timer1={NORMAL_MODE,PRESCALE_DIVIDE_BY_8};
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	8c 83       	std	Y+4, r24	; 0x04
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	8d 83       	std	Y+5, r24	; 0x05
	TIMER1_voidInit(&timer1);
    242c:	ce 01       	movw	r24, r28
    242e:	04 96       	adiw	r24, 0x04	; 4
    2430:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <TIMER1_voidInit>

	GIE_voidEnable();
    2434:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <GIE_voidEnable>

	while(1)
	{
		while((periodTicks==0)&&(ONTicks==0));
    2438:	80 91 96 00 	lds	r24, 0x0096
    243c:	90 91 97 00 	lds	r25, 0x0097
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	31 f4       	brne	.+12     	; 0x2450 <main+0xa4>
    2444:	80 91 98 00 	lds	r24, 0x0098
    2448:	90 91 99 00 	lds	r25, 0x0099
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	a1 f3       	breq	.-24     	; 0x2438 <main+0x8c>
		CLCD_voidGoToXY(0,0);
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
		CLCD_voidSendString("Period Ticks:");
    2458:	80 e6       	ldi	r24, 0x60	; 96
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
		CLCD_voidWriteNumber(periodTicks);
    2460:	80 91 96 00 	lds	r24, 0x0096
    2464:	90 91 97 00 	lds	r25, 0x0097
    2468:	cc 01       	movw	r24, r24
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>
		CLCD_voidGoToXY(1,0);
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	60 e0       	ldi	r22, 0x00	; 0
    247a:	0e 94 96 07 	call	0xf2c	; 0xf2c <CLCD_voidGoToXY>
		CLCD_voidSendString("ON Ticks:");
    247e:	8e e6       	ldi	r24, 0x6E	; 110
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidSendString>
		CLCD_voidWriteNumber(ONTicks);
    2486:	80 91 98 00 	lds	r24, 0x0098
    248a:	90 91 99 00 	lds	r25, 0x0099
    248e:	cc 01       	movw	r24, r24
    2490:	a0 e0       	ldi	r26, 0x00	; 0
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 f5 07 	call	0xfea	; 0xfea <CLCD_voidWriteNumber>
    249c:	cd cf       	rjmp	.-102    	; 0x2438 <main+0x8c>

0000249e <ICU_SW>:
	}
}
void ICU_SW(void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	counter++;
    24a6:	80 91 9c 00 	lds	r24, 0x009C
    24aa:	8f 5f       	subi	r24, 0xFF	; 255
    24ac:	80 93 9c 00 	sts	0x009C, r24
	if(counter==1)
    24b0:	80 91 9c 00 	lds	r24, 0x009C
    24b4:	81 30       	cpi	r24, 0x01	; 1
    24b6:	29 f4       	brne	.+10     	; 0x24c2 <ICU_SW+0x24>
	{
		TIMER1_voidSetTimerVal(0);
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <TIMER1_voidSetTimerVal>
    24c0:	2b c0       	rjmp	.+86     	; 0x2518 <ICU_SW+0x7a>
	}
	else if (counter==2)
    24c2:	80 91 9c 00 	lds	r24, 0x009C
    24c6:	82 30       	cpi	r24, 0x02	; 2
    24c8:	51 f4       	brne	.+20     	; 0x24de <ICU_SW+0x40>
	{
		periodTicks=TIMER1_voidGetTimer1Reading();
    24ca:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TIMER1_voidGetTimer1Reading>
    24ce:	90 93 97 00 	sts	0x0097, r25
    24d2:	80 93 96 00 	sts	0x0096, r24
		EXTI_u8Int0SenseControl(FALLING_EDGE);
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <EXTI_u8Int0SenseControl>
    24dc:	1d c0       	rjmp	.+58     	; 0x2518 <ICU_SW+0x7a>
	}
	else if(counter==3)
    24de:	80 91 9c 00 	lds	r24, 0x009C
    24e2:	83 30       	cpi	r24, 0x03	; 3
    24e4:	c9 f4       	brne	.+50     	; 0x2518 <ICU_SW+0x7a>
	{
		ONTicks=TIMER1_voidGetTimer1Reading();
    24e6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <TIMER1_voidGetTimer1Reading>
    24ea:	90 93 99 00 	sts	0x0099, r25
    24ee:	80 93 98 00 	sts	0x0098, r24
		ONTicks-=periodTicks;
    24f2:	20 91 98 00 	lds	r18, 0x0098
    24f6:	30 91 99 00 	lds	r19, 0x0099
    24fa:	80 91 96 00 	lds	r24, 0x0096
    24fe:	90 91 97 00 	lds	r25, 0x0097
    2502:	a9 01       	movw	r20, r18
    2504:	48 1b       	sub	r20, r24
    2506:	59 0b       	sbc	r21, r25
    2508:	ca 01       	movw	r24, r20
    250a:	90 93 99 00 	sts	0x0099, r25
    250e:	80 93 98 00 	sts	0x0098, r24
		EXTI_u8IntDisable(INT0);
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	0e 94 3b 0c 	call	0x1876	; 0x1876 <EXTI_u8IntDisable>

	}
}
    2518:	cf 91       	pop	r28
    251a:	df 91       	pop	r29
    251c:	08 95       	ret

0000251e <ICU_HW>:
void ICU_HW(void)
{
    251e:	df 93       	push	r29
    2520:	cf 93       	push	r28
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	static u16 read1,read2,read3;
	static u16 Local_u16Counter=0;
	Local_u16Counter++;
    2526:	80 91 9d 00 	lds	r24, 0x009D
    252a:	90 91 9e 00 	lds	r25, 0x009E
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	90 93 9e 00 	sts	0x009E, r25
    2534:	80 93 9d 00 	sts	0x009D, r24
	if(Local_u16Counter==1)
    2538:	80 91 9d 00 	lds	r24, 0x009D
    253c:	90 91 9e 00 	lds	r25, 0x009E
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	91 05       	cpc	r25, r1
    2544:	a1 f4       	brne	.+40     	; 0x256e <ICU_HW+0x50>
	{
		read1=ICU_u16ReadICR()+(Overflows*RES);
    2546:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <ICU_u16ReadICR>
    254a:	9c 01       	movw	r18, r24
    254c:	80 91 9a 00 	lds	r24, 0x009A
    2550:	90 91 9b 00 	lds	r25, 0x009B
    2554:	cc 01       	movw	r24, r24
    2556:	a0 e0       	ldi	r26, 0x00	; 0
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	dc 01       	movw	r26, r24
    255c:	99 27       	eor	r25, r25
    255e:	88 27       	eor	r24, r24
    2560:	82 0f       	add	r24, r18
    2562:	93 1f       	adc	r25, r19
    2564:	90 93 a4 00 	sts	0x00A4, r25
    2568:	80 93 a3 00 	sts	0x00A3, r24
    256c:	5a c0       	rjmp	.+180    	; 0x2622 <ICU_HW+0x104>
	}
	else if (Local_u16Counter==2)
    256e:	80 91 9d 00 	lds	r24, 0x009D
    2572:	90 91 9e 00 	lds	r25, 0x009E
    2576:	82 30       	cpi	r24, 0x02	; 2
    2578:	91 05       	cpc	r25, r1
    257a:	39 f5       	brne	.+78     	; 0x25ca <ICU_HW+0xac>
	{
		read2=ICU_u16ReadICR()+(Overflows*RES);
    257c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <ICU_u16ReadICR>
    2580:	9c 01       	movw	r18, r24
    2582:	80 91 9a 00 	lds	r24, 0x009A
    2586:	90 91 9b 00 	lds	r25, 0x009B
    258a:	cc 01       	movw	r24, r24
    258c:	a0 e0       	ldi	r26, 0x00	; 0
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	dc 01       	movw	r26, r24
    2592:	99 27       	eor	r25, r25
    2594:	88 27       	eor	r24, r24
    2596:	82 0f       	add	r24, r18
    2598:	93 1f       	adc	r25, r19
    259a:	90 93 a2 00 	sts	0x00A2, r25
    259e:	80 93 a1 00 	sts	0x00A1, r24
		periodTicks=read2-read1;
    25a2:	20 91 a1 00 	lds	r18, 0x00A1
    25a6:	30 91 a2 00 	lds	r19, 0x00A2
    25aa:	80 91 a3 00 	lds	r24, 0x00A3
    25ae:	90 91 a4 00 	lds	r25, 0x00A4
    25b2:	a9 01       	movw	r20, r18
    25b4:	48 1b       	sub	r20, r24
    25b6:	59 0b       	sbc	r21, r25
    25b8:	ca 01       	movw	r24, r20
    25ba:	90 93 97 00 	sts	0x0097, r25
    25be:	80 93 96 00 	sts	0x0096, r24
		ICU_u8SetTriggerEdge(ICU_Falling);
    25c2:	82 e0       	ldi	r24, 0x02	; 2
    25c4:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <ICU_u8SetTriggerEdge>
    25c8:	2c c0       	rjmp	.+88     	; 0x2622 <ICU_HW+0x104>
	}
	else if(Local_u16Counter==3)
    25ca:	80 91 9d 00 	lds	r24, 0x009D
    25ce:	90 91 9e 00 	lds	r25, 0x009E
    25d2:	83 30       	cpi	r24, 0x03	; 3
    25d4:	91 05       	cpc	r25, r1
    25d6:	29 f5       	brne	.+74     	; 0x2622 <ICU_HW+0x104>
	{
		read3=ICU_u16ReadICR()+(Overflows*RES);
    25d8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <ICU_u16ReadICR>
    25dc:	9c 01       	movw	r18, r24
    25de:	80 91 9a 00 	lds	r24, 0x009A
    25e2:	90 91 9b 00 	lds	r25, 0x009B
    25e6:	cc 01       	movw	r24, r24
    25e8:	a0 e0       	ldi	r26, 0x00	; 0
    25ea:	b0 e0       	ldi	r27, 0x00	; 0
    25ec:	dc 01       	movw	r26, r24
    25ee:	99 27       	eor	r25, r25
    25f0:	88 27       	eor	r24, r24
    25f2:	82 0f       	add	r24, r18
    25f4:	93 1f       	adc	r25, r19
    25f6:	90 93 a0 00 	sts	0x00A0, r25
    25fa:	80 93 9f 00 	sts	0x009F, r24
		ONTicks=read3-read2;
    25fe:	20 91 9f 00 	lds	r18, 0x009F
    2602:	30 91 a0 00 	lds	r19, 0x00A0
    2606:	80 91 a1 00 	lds	r24, 0x00A1
    260a:	90 91 a2 00 	lds	r25, 0x00A2
    260e:	a9 01       	movw	r20, r18
    2610:	48 1b       	sub	r20, r24
    2612:	59 0b       	sbc	r21, r25
    2614:	ca 01       	movw	r24, r20
    2616:	90 93 99 00 	sts	0x0099, r25
    261a:	80 93 98 00 	sts	0x0098, r24
		ICU_voidDisableInterrupt();
    261e:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <ICU_voidDisableInterrupt>
	}
}
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <Timer1_overflow>:
void Timer1_overflow(void)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
	Overflows++;
    2630:	80 91 9a 00 	lds	r24, 0x009A
    2634:	90 91 9b 00 	lds	r25, 0x009B
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	90 93 9b 00 	sts	0x009B, r25
    263e:	80 93 9a 00 	sts	0x009A, r24
}
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <__mulsi3>:
    2648:	62 9f       	mul	r22, r18
    264a:	d0 01       	movw	r26, r0
    264c:	73 9f       	mul	r23, r19
    264e:	f0 01       	movw	r30, r0
    2650:	82 9f       	mul	r24, r18
    2652:	e0 0d       	add	r30, r0
    2654:	f1 1d       	adc	r31, r1
    2656:	64 9f       	mul	r22, r20
    2658:	e0 0d       	add	r30, r0
    265a:	f1 1d       	adc	r31, r1
    265c:	92 9f       	mul	r25, r18
    265e:	f0 0d       	add	r31, r0
    2660:	83 9f       	mul	r24, r19
    2662:	f0 0d       	add	r31, r0
    2664:	74 9f       	mul	r23, r20
    2666:	f0 0d       	add	r31, r0
    2668:	65 9f       	mul	r22, r21
    266a:	f0 0d       	add	r31, r0
    266c:	99 27       	eor	r25, r25
    266e:	72 9f       	mul	r23, r18
    2670:	b0 0d       	add	r27, r0
    2672:	e1 1d       	adc	r30, r1
    2674:	f9 1f       	adc	r31, r25
    2676:	63 9f       	mul	r22, r19
    2678:	b0 0d       	add	r27, r0
    267a:	e1 1d       	adc	r30, r1
    267c:	f9 1f       	adc	r31, r25
    267e:	bd 01       	movw	r22, r26
    2680:	cf 01       	movw	r24, r30
    2682:	11 24       	eor	r1, r1
    2684:	08 95       	ret

00002686 <__udivmodsi4>:
    2686:	a1 e2       	ldi	r26, 0x21	; 33
    2688:	1a 2e       	mov	r1, r26
    268a:	aa 1b       	sub	r26, r26
    268c:	bb 1b       	sub	r27, r27
    268e:	fd 01       	movw	r30, r26
    2690:	0d c0       	rjmp	.+26     	; 0x26ac <__udivmodsi4_ep>

00002692 <__udivmodsi4_loop>:
    2692:	aa 1f       	adc	r26, r26
    2694:	bb 1f       	adc	r27, r27
    2696:	ee 1f       	adc	r30, r30
    2698:	ff 1f       	adc	r31, r31
    269a:	a2 17       	cp	r26, r18
    269c:	b3 07       	cpc	r27, r19
    269e:	e4 07       	cpc	r30, r20
    26a0:	f5 07       	cpc	r31, r21
    26a2:	20 f0       	brcs	.+8      	; 0x26ac <__udivmodsi4_ep>
    26a4:	a2 1b       	sub	r26, r18
    26a6:	b3 0b       	sbc	r27, r19
    26a8:	e4 0b       	sbc	r30, r20
    26aa:	f5 0b       	sbc	r31, r21

000026ac <__udivmodsi4_ep>:
    26ac:	66 1f       	adc	r22, r22
    26ae:	77 1f       	adc	r23, r23
    26b0:	88 1f       	adc	r24, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	1a 94       	dec	r1
    26b6:	69 f7       	brne	.-38     	; 0x2692 <__udivmodsi4_loop>
    26b8:	60 95       	com	r22
    26ba:	70 95       	com	r23
    26bc:	80 95       	com	r24
    26be:	90 95       	com	r25
    26c0:	9b 01       	movw	r18, r22
    26c2:	ac 01       	movw	r20, r24
    26c4:	bd 01       	movw	r22, r26
    26c6:	cf 01       	movw	r24, r30
    26c8:	08 95       	ret

000026ca <__prologue_saves__>:
    26ca:	2f 92       	push	r2
    26cc:	3f 92       	push	r3
    26ce:	4f 92       	push	r4
    26d0:	5f 92       	push	r5
    26d2:	6f 92       	push	r6
    26d4:	7f 92       	push	r7
    26d6:	8f 92       	push	r8
    26d8:	9f 92       	push	r9
    26da:	af 92       	push	r10
    26dc:	bf 92       	push	r11
    26de:	cf 92       	push	r12
    26e0:	df 92       	push	r13
    26e2:	ef 92       	push	r14
    26e4:	ff 92       	push	r15
    26e6:	0f 93       	push	r16
    26e8:	1f 93       	push	r17
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	cd b7       	in	r28, 0x3d	; 61
    26f0:	de b7       	in	r29, 0x3e	; 62
    26f2:	ca 1b       	sub	r28, r26
    26f4:	db 0b       	sbc	r29, r27
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	09 94       	ijmp

00002702 <__epilogue_restores__>:
    2702:	2a 88       	ldd	r2, Y+18	; 0x12
    2704:	39 88       	ldd	r3, Y+17	; 0x11
    2706:	48 88       	ldd	r4, Y+16	; 0x10
    2708:	5f 84       	ldd	r5, Y+15	; 0x0f
    270a:	6e 84       	ldd	r6, Y+14	; 0x0e
    270c:	7d 84       	ldd	r7, Y+13	; 0x0d
    270e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2710:	9b 84       	ldd	r9, Y+11	; 0x0b
    2712:	aa 84       	ldd	r10, Y+10	; 0x0a
    2714:	b9 84       	ldd	r11, Y+9	; 0x09
    2716:	c8 84       	ldd	r12, Y+8	; 0x08
    2718:	df 80       	ldd	r13, Y+7	; 0x07
    271a:	ee 80       	ldd	r14, Y+6	; 0x06
    271c:	fd 80       	ldd	r15, Y+5	; 0x05
    271e:	0c 81       	ldd	r16, Y+4	; 0x04
    2720:	1b 81       	ldd	r17, Y+3	; 0x03
    2722:	aa 81       	ldd	r26, Y+2	; 0x02
    2724:	b9 81       	ldd	r27, Y+1	; 0x01
    2726:	ce 0f       	add	r28, r30
    2728:	d1 1d       	adc	r29, r1
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	ed 01       	movw	r28, r26
    2736:	08 95       	ret

00002738 <_exit>:
    2738:	f8 94       	cli

0000273a <__stop_program>:
    273a:	ff cf       	rjmp	.-2      	; 0x273a <__stop_program>
