
Motor_Dash.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a0  00800060  00002df8  00002e8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800200  00800200  0000302c  2**0
                  ALLOC
  3 .stab         000029d0  00000000  00000000  0000302c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f48  00000000  00000000  000059fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000090e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a467  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b640  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000baf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 30       	cpi	r26, 0x00	; 0
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e0       	ldi	r26, 0x00	; 0
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 30       	cpi	r26, 0x02	; 2
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 13 	call	0x272a	; 0x272a <main>
      8a:	0c 94 fa 16 	jmp	0x2df4	; 0x2df4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f ed       	ldi	r22, 0xDF	; 223
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ef 16 	jmp	0x2dde	; 0x2dde <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 cb 16 	jmp	0x2d96	; 0x2d96 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e7 16 	jmp	0x2dce	; 0x2dce <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e9 51       	subi	r30, 0x19	; 25
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <CLCD_voidSendCommand>:
#include "CLCD_private.h"
#include "CLCD_interface.h"

u8 Global_u8ReadingStyle;
void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	2f 97       	sbiw	r28, 0x0f	; 15
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
     e42:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS to low for command*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     e4e:	82 e0       	ldi	r24, 0x02	; 2
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	/*Set Command to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Command);
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e5c:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     e60:	82 e0       	ldi	r24, 0x02	; 2
     e62:	62 e0       	ldi	r22, 0x02	; 2
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
     e6a:	80 e0       	ldi	r24, 0x00	; 0
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	a0 e0       	ldi	r26, 0x00	; 0
     e70:	b0 e4       	ldi	r27, 0x40	; 64
     e72:	8b 87       	std	Y+11, r24	; 0x0b
     e74:	9c 87       	std	Y+12, r25	; 0x0c
     e76:	ad 87       	std	Y+13, r26	; 0x0d
     e78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4a ef       	ldi	r20, 0xFA	; 250
     e88:	54 e4       	ldi	r21, 0x44	; 68
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	8f 83       	std	Y+7, r24	; 0x07
     e94:	98 87       	std	Y+8, r25	; 0x08
     e96:	a9 87       	std	Y+9, r26	; 0x09
     e98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e8       	ldi	r20, 0x80	; 128
     ea8:	5f e3       	ldi	r21, 0x3F	; 63
     eaa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     eae:	88 23       	and	r24, r24
     eb0:	2c f4       	brge	.+10     	; 0xebc <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9e 83       	std	Y+6, r25	; 0x06
     eb8:	8d 83       	std	Y+5, r24	; 0x05
     eba:	3f c0       	rjmp	.+126    	; 0xf3a <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ed0:	18 16       	cp	r1, r24
     ed2:	4c f5       	brge	.+82     	; 0xf26 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eda:	9e 85       	ldd	r25, Y+14	; 0x0e
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e2       	ldi	r20, 0x20	; 32
     ee2:	51 e4       	ldi	r21, 0x41	; 65
     ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee8:	dc 01       	movw	r26, r24
     eea:	cb 01       	movw	r24, r22
     eec:	bc 01       	movw	r22, r24
     eee:	cd 01       	movw	r24, r26
     ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	9e 83       	std	Y+6, r25	; 0x06
     efa:	8d 83       	std	Y+5, r24	; 0x05
     efc:	0f c0       	rjmp	.+30     	; 0xf1c <CLCD_voidSendCommand+0xee>
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	9c 83       	std	Y+4, r25	; 0x04
     f04:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <CLCD_voidSendCommand+0xdc>
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f12:	8d 81       	ldd	r24, Y+5	; 0x05
     f14:	9e 81       	ldd	r25, Y+6	; 0x06
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	9e 83       	std	Y+6, r25	; 0x06
     f1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1c:	8d 81       	ldd	r24, Y+5	; 0x05
     f1e:	9e 81       	ldd	r25, Y+6	; 0x06
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <CLCD_voidSendCommand+0xd0>
     f24:	14 c0       	rjmp	.+40     	; 0xf4e <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	9e 83       	std	Y+6, r25	; 0x06
     f38:	8d 83       	std	Y+5, r24	; 0x05
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	9a 81       	ldd	r25, Y+2	; 0x02
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	f1 f7       	brne	.-4      	; 0xf46 <CLCD_voidSendCommand+0x118>
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	62 e0       	ldi	r22, 0x02	; 2
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>


}
     f58:	2f 96       	adiw	r28, 0x0f	; 15
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	2f 97       	sbiw	r28, 0x0f	; 15
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS to high for data*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
     f80:	82 e0       	ldi	r24, 0x02	; 2
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	/*Set RW to low for write*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN,DIO_u8PIN_LOW);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	/*Set data to data pins*/
	DIO_u8SetPortValue(CLCD_DATA_PORT,Copy_u8Data);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	6f 85       	ldd	r22, Y+15	; 0x0f
     f98:	0e 94 bc 0c 	call	0x1978	; 0x1978 <DIO_u8SetPortValue>
	/*Send enable pulse*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	62 e0       	ldi	r22, 0x02	; 2
     fa0:	41 e0       	ldi	r20, 0x01	; 1
     fa2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e0       	ldi	r26, 0x00	; 0
     fac:	b0 e4       	ldi	r27, 0x40	; 64
     fae:	8b 87       	std	Y+11, r24	; 0x0b
     fb0:	9c 87       	std	Y+12, r25	; 0x0c
     fb2:	ad 87       	std	Y+13, r26	; 0x0d
     fb4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fba:	8d 85       	ldd	r24, Y+13	; 0x0d
     fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a ef       	ldi	r20, 0xFA	; 250
     fc4:	54 e4       	ldi	r21, 0x44	; 68
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8f 83       	std	Y+7, r24	; 0x07
     fd0:	98 87       	std	Y+8, r25	; 0x08
     fd2:	a9 87       	std	Y+9, r26	; 0x09
     fd4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fd6:	6f 81       	ldd	r22, Y+7	; 0x07
     fd8:	78 85       	ldd	r23, Y+8	; 0x08
     fda:	89 85       	ldd	r24, Y+9	; 0x09
     fdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	6b 85       	ldd	r22, Y+11	; 0x0b
    1012:	7c 85       	ldd	r23, Y+12	; 0x0c
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9e 83       	std	Y+6, r25	; 0x06
    1036:	8d 83       	std	Y+5, r24	; 0x05
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <CLCD_voidSendData+0xee>
    103a:	88 ec       	ldi	r24, 0xC8	; 200
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9c 83       	std	Y+4, r25	; 0x04
    1040:	8b 83       	std	Y+3, r24	; 0x03
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	9c 81       	ldd	r25, Y+4	; 0x04
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <CLCD_voidSendData+0xdc>
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9e 83       	std	Y+6, r25	; 0x06
    1056:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8d 81       	ldd	r24, Y+5	; 0x05
    105a:	9e 81       	ldd	r25, Y+6	; 0x06
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <CLCD_voidSendData+0xd0>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6f 81       	ldd	r22, Y+7	; 0x07
    1064:	78 85       	ldd	r23, Y+8	; 0x08
    1066:	89 85       	ldd	r24, Y+9	; 0x09
    1068:	9a 85       	ldd	r25, Y+10	; 0x0a
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9e 83       	std	Y+6, r25	; 0x06
    1074:	8d 83       	std	Y+5, r24	; 0x05
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	9a 83       	std	Y+2, r25	; 0x02
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <CLCD_voidSendData+0x118>
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	62 e0       	ldi	r22, 0x02	; 2
    108e:	40 e0       	ldi	r20, 0x00	; 0
    1090:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>

}
    1094:	2f 96       	adiw	r28, 0x0f	; 15
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <CLCD_voidSendString>:

void CLCD_voidSendString(const char* Copy_pcData)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <CLCD_voidSendString+0x6>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	9b 83       	std	Y+3, r25	; 0x03
    10b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    10b6:	19 82       	std	Y+1, r1	; 0x01
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <CLCD_voidSendString+0x30>
	while((Copy_pcData[Local_u8Counter])!='\0')
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	fc 01       	movw	r30, r24
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	80 81       	ld	r24, Z
    10cc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
		Local_u8Counter++;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidSendString(const char* Copy_pcData)
{
	u8 Local_u8Counter=0;
	while((Copy_pcData[Local_u8Counter])!='\0')
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	9b 81       	ldd	r25, Y+3	; 0x03
    10e0:	fc 01       	movw	r30, r24
    10e2:	e2 0f       	add	r30, r18
    10e4:	f3 1f       	adc	r31, r19
    10e6:	80 81       	ld	r24, Z
    10e8:	88 23       	and	r24, r24
    10ea:	39 f7       	brne	.-50     	; 0x10ba <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData((Copy_pcData[Local_u8Counter]));
		Local_u8Counter++;
	}

}
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	2e 97       	sbiw	r28, 0x0e	; 14
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e2       	ldi	r26, 0x20	; 32
    1112:	b2 e4       	ldi	r27, 0x42	; 66
    1114:	8b 87       	std	Y+11, r24	; 0x0b
    1116:	9c 87       	std	Y+12, r25	; 0x0c
    1118:	ad 87       	std	Y+13, r26	; 0x0d
    111a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111c:	6b 85       	ldd	r22, Y+11	; 0x0b
    111e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1120:	8d 85       	ldd	r24, Y+13	; 0x0d
    1122:	9e 85       	ldd	r25, Y+14	; 0x0e
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	4a ef       	ldi	r20, 0xFA	; 250
    112a:	54 e4       	ldi	r21, 0x44	; 68
    112c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	8f 83       	std	Y+7, r24	; 0x07
    1136:	98 87       	std	Y+8, r25	; 0x08
    1138:	a9 87       	std	Y+9, r26	; 0x09
    113a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	40 e8       	ldi	r20, 0x80	; 128
    114a:	5f e3       	ldi	r21, 0x3F	; 63
    114c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1150:	88 23       	and	r24, r24
    1152:	2c f4       	brge	.+10     	; 0x115e <CLCD_voidInit+0x66>
		__ticks = 1;
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
    115c:	3f c0       	rjmp	.+126    	; 0x11dc <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    115e:	6f 81       	ldd	r22, Y+7	; 0x07
    1160:	78 85       	ldd	r23, Y+8	; 0x08
    1162:	89 85       	ldd	r24, Y+9	; 0x09
    1164:	9a 85       	ldd	r25, Y+10	; 0x0a
    1166:	20 e0       	ldi	r18, 0x00	; 0
    1168:	3f ef       	ldi	r19, 0xFF	; 255
    116a:	4f e7       	ldi	r20, 0x7F	; 127
    116c:	57 e4       	ldi	r21, 0x47	; 71
    116e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1176:	6b 85       	ldd	r22, Y+11	; 0x0b
    1178:	7c 85       	ldd	r23, Y+12	; 0x0c
    117a:	8d 85       	ldd	r24, Y+13	; 0x0d
    117c:	9e 85       	ldd	r25, Y+14	; 0x0e
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e2       	ldi	r20, 0x20	; 32
    1184:	51 e4       	ldi	r21, 0x41	; 65
    1186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	bc 01       	movw	r22, r24
    1190:	cd 01       	movw	r24, r26
    1192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	9e 83       	std	Y+6, r25	; 0x06
    119c:	8d 83       	std	Y+5, r24	; 0x05
    119e:	0f c0       	rjmp	.+30     	; 0x11be <CLCD_voidInit+0xc6>
    11a0:	88 ec       	ldi	r24, 0xC8	; 200
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 83       	std	Y+4, r25	; 0x04
    11a6:	8b 83       	std	Y+3, r24	; 0x03
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <CLCD_voidInit+0xb4>
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9e 83       	std	Y+6, r25	; 0x06
    11bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	69 f7       	brne	.-38     	; 0x11a0 <CLCD_voidInit+0xa8>
    11c6:	14 c0       	rjmp	.+40     	; 0x11f0 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ca:	78 85       	ldd	r23, Y+8	; 0x08
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9e 83       	std	Y+6, r25	; 0x06
    11da:	8d 83       	std	Y+5, r24	; 0x05
    11dc:	8d 81       	ldd	r24, Y+5	; 0x05
    11de:	9e 81       	ldd	r25, Y+6	; 0x06
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	9a 81       	ldd	r25, Y+2	; 0x02
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <CLCD_voidInit+0xf0>
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
	/*Wait for more than 30ms*/
	_delay_ms(40);
	/*Function set command:2 lines ,5*8 Font size*/
	CLCD_voidSendCommand(0b00111000);
    11f0:	88 e3       	ldi	r24, 0x38	; 56
    11f2:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*display on/off control:display enable,disable cursor,no blink cursor*/
	CLCD_voidSendCommand(0b00001100);
    11f6:	8c e0       	ldi	r24, 0x0C	; 12
    11f8:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Clear display*/
	CLCD_voidSendCommand(1);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>

}
    1202:	2e 96       	adiw	r28, 0x0e	; 14
    1204:	0f b6       	in	r0, 0x3f	; 63
    1206:	f8 94       	cli
    1208:	de bf       	out	0x3e, r29	; 62
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	cd bf       	out	0x3d, r28	; 61
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <CLCD_voidGoToXY>:

void CLCD_voidGoToXY(u8 Copy_u8XPos, u8 Copy_u8YPos)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	00 d0       	rcall	.+0      	; 0x121a <CLCD_voidGoToXY+0x6>
    121a:	0f 92       	push	r0
    121c:	cd b7       	in	r28, 0x3d	; 61
    121e:	de b7       	in	r29, 0x3e	; 62
    1220:	8a 83       	std	Y+2, r24	; 0x02
    1222:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	if(Copy_u8XPos==0)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	88 23       	and	r24, r24
    1228:	19 f4       	brne	.+6      	; 0x1230 <CLCD_voidGoToXY+0x1c>
	{
		//locate in the first line
		Local_u8Adress=Copy_u8YPos;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	06 c0       	rjmp	.+12     	; 0x123c <CLCD_voidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	81 30       	cpi	r24, 0x01	; 1
    1234:	19 f4       	brne	.+6      	; 0x123c <CLCD_voidGoToXY+0x28>
	{
		//locate in the second line
		Local_u8Adress=Copy_u8YPos+0x40;
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	80 5c       	subi	r24, 0xC0	; 192
    123a:	89 83       	std	Y+1, r24	; 0x01
	}
	//Send bit 8 in DDRAM and then the rest bits are the address then send it .
	CLCD_voidSendCommand(Local_u8Adress+128);
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	80 58       	subi	r24, 0x80	; 128
    1240:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
}
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <CLCD_voidWriteSpecialCharacter>:

void CLCD_voidWriteSpecialCharacter(u8 * Copy_pu8Pattern,u8 Copy_pu8PatternNumber,u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	27 97       	sbiw	r28, 0x07	; 7
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	6d 83       	std	Y+5, r22	; 0x05
    126a:	4e 83       	std	Y+6, r20	; 0x06
    126c:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAdress=0,Local_u8iterator;
    126e:	1a 82       	std	Y+2, r1	; 0x02
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
    1270:	8d 81       	ldd	r24, Y+5	; 0x05
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	8a 83       	std	Y+2, r24	; 0x02
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	80 5c       	subi	r24, 0xC0	; 192
    1288:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	0e c0       	rjmp	.+28     	; 0x12ac <CLCD_voidWriteSpecialCharacter+0x5c>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	80 81       	ld	r24, Z
    12a2:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
	//getting CGRAM Address where each block consists of 8 bytes
	Local_u8CGRAMAdress=Copy_pu8PatternNumber*8;
	// send CGRAM address to save the required pattern in CGRAM
	CLCD_voidSendCommand(Local_u8CGRAMAdress+64);
	/*Writing the pattern on the CGRAM*/
	for(Local_u8iterator=0;Local_u8iterator<8;Local_u8iterator++)
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	89 83       	std	Y+1, r24	; 0x01
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	78 f3       	brcs	.-34     	; 0x1290 <CLCD_voidWriteSpecialCharacter+0x40>
	{
		CLCD_voidSendData(Copy_pu8Pattern[Local_u8iterator]);
	}
	/*go back to DDRAM to display the pattern */
	CLCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    12b2:	8e 81       	ldd	r24, Y+6	; 0x06
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	//Display the pattern written on the CGRAM
	CLCD_voidSendData(Copy_pu8PatternNumber);
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>

}
    12c0:	27 96       	adiw	r28, 0x07	; 7
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Copy_u32Number)//99
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	2e 97       	sbiw	r28, 0x0e	; 14
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	6b 87       	std	Y+11, r22	; 0x0b
    12e8:	7c 87       	std	Y+12, r23	; 0x0c
    12ea:	8d 87       	std	Y+13, r24	; 0x0d
    12ec:	9e 87       	std	Y+14, r25	; 0x0e
	u8 Local_u8Counter=0,Local_u8LcdNumber;
    12ee:	1a 86       	std	Y+10, r1	; 0x0a
	u32 Local_u32divisible=1;
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	9e 83       	std	Y+6, r25	; 0x06
    12fc:	af 83       	std	Y+7, r26	; 0x07
    12fe:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_u32temp=Copy_u32Number;
    1300:	8b 85       	ldd	r24, Y+11	; 0x0b
    1302:	9c 85       	ldd	r25, Y+12	; 0x0c
    1304:	ad 85       	ldd	r26, Y+13	; 0x0d
    1306:	be 85       	ldd	r27, Y+14	; 0x0e
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	ab 83       	std	Y+3, r26	; 0x03
    130e:	bc 83       	std	Y+4, r27	; 0x04
	if(Copy_u32Number==0)
    1310:	8b 85       	ldd	r24, Y+11	; 0x0b
    1312:	9c 85       	ldd	r25, Y+12	; 0x0c
    1314:	ad 85       	ldd	r26, Y+13	; 0x0d
    1316:	be 85       	ldd	r27, Y+14	; 0x0e
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	a1 05       	cpc	r26, r1
    131c:	b1 05       	cpc	r27, r1
    131e:	c9 f4       	brne	.+50     	; 0x1352 <CLCD_voidWriteNumber+0x80>
		CLCD_voidSendData('0');
    1320:	80 e3       	ldi	r24, 0x30	; 48
    1322:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
    1326:	80 c0       	rjmp	.+256    	; 0x1428 <CLCD_voidWriteNumber+0x156>
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
		{
			Local_u8Counter++;
    1328:	8a 85       	ldd	r24, Y+10	; 0x0a
    132a:	8f 5f       	subi	r24, 0xFF	; 255
    132c:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32temp=Local_u32temp/10;
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	9a 81       	ldd	r25, Y+2	; 0x02
    1332:	ab 81       	ldd	r26, Y+3	; 0x03
    1334:	bc 81       	ldd	r27, Y+4	; 0x04
    1336:	2a e0       	ldi	r18, 0x0A	; 10
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
    133e:	bc 01       	movw	r22, r24
    1340:	cd 01       	movw	r24, r26
    1342:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__udivmodsi4>
    1346:	da 01       	movw	r26, r20
    1348:	c9 01       	movw	r24, r18
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	9a 83       	std	Y+2, r25	; 0x02
    134e:	ab 83       	std	Y+3, r26	; 0x03
    1350:	bc 83       	std	Y+4, r27	; 0x04
	u32 Local_u32temp=Copy_u32Number;
	if(Copy_u32Number==0)
		CLCD_voidSendData('0');
	else
	{
		while(Local_u32temp!=0) /*getting the number of the digits*/
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	9a 81       	ldd	r25, Y+2	; 0x02
    1356:	ab 81       	ldd	r26, Y+3	; 0x03
    1358:	bc 81       	ldd	r27, Y+4	; 0x04
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	a1 05       	cpc	r26, r1
    135e:	b1 05       	cpc	r27, r1
    1360:	19 f7       	brne	.-58     	; 0x1328 <CLCD_voidWriteNumber+0x56>
    1362:	15 c0       	rjmp	.+42     	; 0x138e <CLCD_voidWriteNumber+0xbc>

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
		{
			Local_u8Counter--;
    1364:	8a 85       	ldd	r24, Y+10	; 0x0a
    1366:	81 50       	subi	r24, 0x01	; 1
    1368:	8a 87       	std	Y+10, r24	; 0x0a
			Local_u32divisible*=10;
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	af 81       	ldd	r26, Y+7	; 0x07
    1370:	b8 85       	ldd	r27, Y+8	; 0x08
    1372:	2a e0       	ldi	r18, 0x0A	; 10
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	bc 01       	movw	r22, r24
    137c:	cd 01       	movw	r24, r26
    137e:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__mulsi3>
    1382:	dc 01       	movw	r26, r24
    1384:	cb 01       	movw	r24, r22
    1386:	8d 83       	std	Y+5, r24	; 0x05
    1388:	9e 83       	std	Y+6, r25	; 0x06
    138a:	af 83       	std	Y+7, r26	; 0x07
    138c:	b8 87       	std	Y+8, r27	; 0x08
			Local_u8Counter++;
			Local_u32temp=Local_u32temp/10;

		}

		while(Local_u8Counter>1) /*getting the divisible to get each number seperately*/
    138e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	40 f7       	brcc	.-48     	; 0x1364 <CLCD_voidWriteNumber+0x92>
    1394:	40 c0       	rjmp	.+128    	; 0x1416 <CLCD_voidWriteNumber+0x144>
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
		{
			Local_u8LcdNumber=Copy_u32Number/Local_u32divisible;
    1396:	8b 85       	ldd	r24, Y+11	; 0x0b
    1398:	9c 85       	ldd	r25, Y+12	; 0x0c
    139a:	ad 85       	ldd	r26, Y+13	; 0x0d
    139c:	be 85       	ldd	r27, Y+14	; 0x0e
    139e:	2d 81       	ldd	r18, Y+5	; 0x05
    13a0:	3e 81       	ldd	r19, Y+6	; 0x06
    13a2:	4f 81       	ldd	r20, Y+7	; 0x07
    13a4:	58 85       	ldd	r21, Y+8	; 0x08
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__udivmodsi4>
    13ae:	da 01       	movw	r26, r20
    13b0:	c9 01       	movw	r24, r18
    13b2:	89 87       	std	Y+9, r24	; 0x09
			CLCD_voidSendData(Local_u8LcdNumber+'0');
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	80 5d       	subi	r24, 0xD0	; 208
    13b8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <CLCD_voidSendData>
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
    13bc:	89 85       	ldd	r24, Y+9	; 0x09
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a0 e0       	ldi	r26, 0x00	; 0
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	2d 81       	ldd	r18, Y+5	; 0x05
    13c8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ca:	4f 81       	ldd	r20, Y+7	; 0x07
    13cc:	58 85       	ldd	r21, Y+8	; 0x08
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <__mulsi3>
    13d6:	9b 01       	movw	r18, r22
    13d8:	ac 01       	movw	r20, r24
    13da:	8b 85       	ldd	r24, Y+11	; 0x0b
    13dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13de:	ad 85       	ldd	r26, Y+13	; 0x0d
    13e0:	be 85       	ldd	r27, Y+14	; 0x0e
    13e2:	82 1b       	sub	r24, r18
    13e4:	93 0b       	sbc	r25, r19
    13e6:	a4 0b       	sbc	r26, r20
    13e8:	b5 0b       	sbc	r27, r21
    13ea:	8b 87       	std	Y+11, r24	; 0x0b
    13ec:	9c 87       	std	Y+12, r25	; 0x0c
    13ee:	ad 87       	std	Y+13, r26	; 0x0d
    13f0:	be 87       	std	Y+14, r27	; 0x0e
			Local_u32divisible=Local_u32divisible/10;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	af 81       	ldd	r26, Y+7	; 0x07
    13f8:	b8 85       	ldd	r27, Y+8	; 0x08
    13fa:	2a e0       	ldi	r18, 0x0A	; 10
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e0       	ldi	r20, 0x00	; 0
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__udivmodsi4>
    140a:	da 01       	movw	r26, r20
    140c:	c9 01       	movw	r24, r18
    140e:	8d 83       	std	Y+5, r24	; 0x05
    1410:	9e 83       	std	Y+6, r25	; 0x06
    1412:	af 83       	std	Y+7, r26	; 0x07
    1414:	b8 87       	std	Y+8, r27	; 0x08
		{
			Local_u8Counter--;
			Local_u32divisible*=10;
		}

		while(Local_u32divisible!=0)  /*getting each number and send it to the LCD*/
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	af 81       	ldd	r26, Y+7	; 0x07
    141c:	b8 85       	ldd	r27, Y+8	; 0x08
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	a1 05       	cpc	r26, r1
    1422:	b1 05       	cpc	r27, r1
    1424:	09 f0       	breq	.+2      	; 0x1428 <CLCD_voidWriteNumber+0x156>
    1426:	b7 cf       	rjmp	.-146    	; 0x1396 <CLCD_voidWriteNumber+0xc4>
			CLCD_voidSendData(Local_u8LcdNumber+'0');
			Copy_u32Number=Copy_u32Number-(Local_u8LcdNumber*Local_u32divisible);
			Local_u32divisible=Local_u32divisible/10;
		}
	}
}
    1428:	2e 96       	adiw	r28, 0x0e	; 14
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DCM_voidRotateClockwise>:
#include "DCM_interface.h"
#include "DCM_config.h"
#include "DCM_private.h"

void DCM_voidRotateClockwise(void)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR1,DIO_u8PIN_HIGH);
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	41 e0       	ldi	r20, 0x01	; 1
    1448:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR2,DIO_u8PIN_LOW);
    144c:	83 e0       	ldi	r24, 0x03	; 3
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
}
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <DCM_voidRotateAnticlockwise>:
void DCM_voidRotateAnticlockwise(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR1,DIO_u8PIN_LOW);
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	60 e0       	ldi	r22, 0x00	; 0
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR2,DIO_u8PIN_HIGH);
    146e:	83 e0       	ldi	r24, 0x03	; 3
    1470:	61 e0       	ldi	r22, 0x01	; 1
    1472:	41 e0       	ldi	r20, 0x01	; 1
    1474:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <DCM_voidStop>:
void DCM_voidStop(void)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR1,DIO_u8PIN_LOW);
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	60 e0       	ldi	r22, 0x00	; 0
    148a:	40 e0       	ldi	r20, 0x00	; 0
    148c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,DCM_DIR2,DIO_u8PIN_LOW);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
}
    149a:	cf 91       	pop	r28
    149c:	df 91       	pop	r29
    149e:	08 95       	ret

000014a0 <DIO_u8SetPinDirection>:
#include "DIO_register.h"
#include "DCM_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Direction)
{
    14a0:	df 93       	push	r29
    14a2:	cf 93       	push	r28
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	28 97       	sbiw	r28, 0x08	; 8
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	8a 83       	std	Y+2, r24	; 0x02
    14b6:	6b 83       	std	Y+3, r22	; 0x03
    14b8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    14ba:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <DIO_u8SetPinDirection+0x24>
    14c2:	f4 c0       	rjmp	.+488    	; 0x16ac <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction==DIO_u8PIN_OUTPUT)
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	09 f0       	breq	.+2      	; 0x14cc <DIO_u8SetPinDirection+0x2c>
    14ca:	72 c0       	rjmp	.+228    	; 0x15b0 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	38 87       	std	Y+8, r19	; 0x08
    14d4:	2f 83       	std	Y+7, r18	; 0x07
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
    14d8:	98 85       	ldd	r25, Y+8	; 0x08
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	49 f1       	breq	.+82     	; 0x1532 <DIO_u8SetPinDirection+0x92>
    14e0:	2f 81       	ldd	r18, Y+7	; 0x07
    14e2:	38 85       	ldd	r19, Y+8	; 0x08
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <DIO_u8SetPinDirection+0x54>
    14ea:	8f 81       	ldd	r24, Y+7	; 0x07
    14ec:	98 85       	ldd	r25, Y+8	; 0x08
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <DIO_u8SetPinDirection+0x6a>
    14f2:	5b c0       	rjmp	.+182    	; 0x15aa <DIO_u8SetPinDirection+0x10a>
    14f4:	2f 81       	ldd	r18, Y+7	; 0x07
    14f6:	38 85       	ldd	r19, Y+8	; 0x08
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	71 f1       	breq	.+92     	; 0x155a <DIO_u8SetPinDirection+0xba>
    14fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1500:	98 85       	ldd	r25, Y+8	; 0x08
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	e9 f1       	breq	.+122    	; 0x1582 <DIO_u8SetPinDirection+0xe2>
    1508:	50 c0       	rjmp	.+160    	; 0x15aa <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8PORTA:SET_BIT(DDRA,Copy_u8Pin); break;
    150a:	aa e3       	ldi	r26, 0x3A	; 58
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ea e3       	ldi	r30, 0x3A	; 58
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	48 2f       	mov	r20, r24
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 2e       	mov	r0, r18
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <DIO_u8SetPinDirection+0x88>
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	0a 94       	dec	r0
    152a:	e2 f7       	brpl	.-8      	; 0x1524 <DIO_u8SetPinDirection+0x84>
    152c:	84 2b       	or	r24, r20
    152e:	8c 93       	st	X, r24
    1530:	bf c0       	rjmp	.+382    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:SET_BIT(DDRB,Copy_u8Pin); break;
    1532:	a7 e3       	ldi	r26, 0x37	; 55
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e7 e3       	ldi	r30, 0x37	; 55
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	48 2f       	mov	r20, r24
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	02 2e       	mov	r0, r18
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <DIO_u8SetPinDirection+0xb0>
    154c:	88 0f       	add	r24, r24
    154e:	99 1f       	adc	r25, r25
    1550:	0a 94       	dec	r0
    1552:	e2 f7       	brpl	.-8      	; 0x154c <DIO_u8SetPinDirection+0xac>
    1554:	84 2b       	or	r24, r20
    1556:	8c 93       	st	X, r24
    1558:	ab c0       	rjmp	.+342    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:SET_BIT(DDRC,Copy_u8Pin); break;
    155a:	a4 e3       	ldi	r26, 0x34	; 52
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e4 e3       	ldi	r30, 0x34	; 52
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	48 2f       	mov	r20, r24
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	02 2e       	mov	r0, r18
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <DIO_u8SetPinDirection+0xd8>
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	0a 94       	dec	r0
    157a:	e2 f7       	brpl	.-8      	; 0x1574 <DIO_u8SetPinDirection+0xd4>
    157c:	84 2b       	or	r24, r20
    157e:	8c 93       	st	X, r24
    1580:	97 c0       	rjmp	.+302    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:SET_BIT(DDRD,Copy_u8Pin); break;
    1582:	a1 e3       	ldi	r26, 0x31	; 49
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e1 e3       	ldi	r30, 0x31	; 49
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	48 2f       	mov	r20, r24
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	02 2e       	mov	r0, r18
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <DIO_u8SetPinDirection+0x100>
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	0a 94       	dec	r0
    15a2:	e2 f7       	brpl	.-8      	; 0x159c <DIO_u8SetPinDirection+0xfc>
    15a4:	84 2b       	or	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	83 c0       	rjmp	.+262    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	80 c0       	rjmp	.+256    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else if(Copy_u8Direction==DIO_u8PIN_INPUT)
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	88 23       	and	r24, r24
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <DIO_u8SetPinDirection+0x118>
    15b6:	77 c0       	rjmp	.+238    	; 0x16a6 <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3e 83       	std	Y+6, r19	; 0x06
    15c0:	2d 83       	std	Y+5, r18	; 0x05
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	59 f1       	breq	.+86     	; 0x1622 <DIO_u8SetPinDirection+0x182>
    15cc:	2d 81       	ldd	r18, Y+5	; 0x05
    15ce:	3e 81       	ldd	r19, Y+6	; 0x06
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <DIO_u8SetPinDirection+0x140>
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	69 f0       	breq	.+26     	; 0x15f8 <DIO_u8SetPinDirection+0x158>
    15de:	60 c0       	rjmp	.+192    	; 0x16a0 <DIO_u8SetPinDirection+0x200>
    15e0:	2d 81       	ldd	r18, Y+5	; 0x05
    15e2:	3e 81       	ldd	r19, Y+6	; 0x06
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	89 f1       	breq	.+98     	; 0x164c <DIO_u8SetPinDirection+0x1ac>
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <DIO_u8SetPinDirection+0x156>
    15f4:	40 c0       	rjmp	.+128    	; 0x1676 <DIO_u8SetPinDirection+0x1d6>
    15f6:	54 c0       	rjmp	.+168    	; 0x16a0 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8PORTA:CLR_BIT(DDRA,Copy_u8Pin); break;
    15f8:	aa e3       	ldi	r26, 0x3A	; 58
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	ea e3       	ldi	r30, 0x3A	; 58
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	48 2f       	mov	r20, r24
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 2e       	mov	r0, r18
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <DIO_u8SetPinDirection+0x176>
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	0a 94       	dec	r0
    1618:	e2 f7       	brpl	.-8      	; 0x1612 <DIO_u8SetPinDirection+0x172>
    161a:	80 95       	com	r24
    161c:	84 23       	and	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	47 c0       	rjmp	.+142    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTB:CLR_BIT(DDRB,Copy_u8Pin); break;
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_u8SetPinDirection+0x1a0>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_u8SetPinDirection+0x19c>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	32 c0       	rjmp	.+100    	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTC:CLR_BIT(DDRC,Copy_u8Pin); break;
    164c:	a4 e3       	ldi	r26, 0x34	; 52
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e4 e3       	ldi	r30, 0x34	; 52
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_u8SetPinDirection+0x1ca>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_u8SetPinDirection+0x1c6>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	1d c0       	rjmp	.+58     	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			case DIO_u8PORTD:CLR_BIT(DDRD,Copy_u8Pin); break;
    1676:	a1 e3       	ldi	r26, 0x31	; 49
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e1 e3       	ldi	r30, 0x31	; 49
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_u8SetPinDirection+0x1f4>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_u8SetPinDirection+0x1f0>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			default: Local_u8ErrorState=1; break;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	05 c0       	rjmp	.+10     	; 0x16b0 <DIO_u8SetPinDirection+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    16b0:	89 81       	ldd	r24, Y+1	; 0x01

}
    16b2:	28 96       	adiw	r28, 0x08	; 8
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8Port ,u8 Copy_u8Direction)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_u8SetPortDirection+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <DIO_u8SetPortDirection+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8a 83       	std	Y+2, r24	; 0x02
    16d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    16d6:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3d 83       	std	Y+5, r19	; 0x05
    16e0:	2c 83       	std	Y+4, r18	; 0x04
    16e2:	8c 81       	ldd	r24, Y+4	; 0x04
    16e4:	9d 81       	ldd	r25, Y+5	; 0x05
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	d1 f0       	breq	.+52     	; 0x1720 <DIO_u8SetPortDirection+0x5c>
    16ec:	2c 81       	ldd	r18, Y+4	; 0x04
    16ee:	3d 81       	ldd	r19, Y+5	; 0x05
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	2c f4       	brge	.+10     	; 0x1700 <DIO_u8SetPortDirection+0x3c>
    16f6:	8c 81       	ldd	r24, Y+4	; 0x04
    16f8:	9d 81       	ldd	r25, Y+5	; 0x05
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	61 f0       	breq	.+24     	; 0x1716 <DIO_u8SetPortDirection+0x52>
    16fe:	1f c0       	rjmp	.+62     	; 0x173e <DIO_u8SetPortDirection+0x7a>
    1700:	2c 81       	ldd	r18, Y+4	; 0x04
    1702:	3d 81       	ldd	r19, Y+5	; 0x05
    1704:	22 30       	cpi	r18, 0x02	; 2
    1706:	31 05       	cpc	r19, r1
    1708:	81 f0       	breq	.+32     	; 0x172a <DIO_u8SetPortDirection+0x66>
    170a:	8c 81       	ldd	r24, Y+4	; 0x04
    170c:	9d 81       	ldd	r25, Y+5	; 0x05
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	91 05       	cpc	r25, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <DIO_u8SetPortDirection+0x70>
    1714:	14 c0       	rjmp	.+40     	; 0x173e <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8PORTA:DDRA=Copy_u8Direction; break;
    1716:	ea e3       	ldi	r30, 0x3A	; 58
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	80 83       	st	Z, r24
    171e:	11 c0       	rjmp	.+34     	; 0x1742 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTB:DDRB=Copy_u8Direction; break;
    1720:	e7 e3       	ldi	r30, 0x37	; 55
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	80 83       	st	Z, r24
    1728:	0c c0       	rjmp	.+24     	; 0x1742 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTC:DDRC=Copy_u8Direction; break;
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	80 83       	st	Z, r24
    1732:	07 c0       	rjmp	.+14     	; 0x1742 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8PORTD:DDRD=Copy_u8Direction; break;
    1734:	e1 e3       	ldi	r30, 0x31	; 49
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	80 83       	st	Z, r24
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <DIO_u8SetPortDirection+0x7e>
	default: Local_u8ErrorState=1; break;
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1742:	89 81       	ldd	r24, Y+1	; 0x01
}
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	cd b7       	in	r28, 0x3d	; 61
    175a:	de b7       	in	r29, 0x3e	; 62
    175c:	28 97       	sbiw	r28, 0x08	; 8
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	8a 83       	std	Y+2, r24	; 0x02
    176a:	6b 83       	std	Y+3, r22	; 0x03
    176c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    176e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin<=DIO_u8PIN7)
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	88 30       	cpi	r24, 0x08	; 8
    1774:	08 f0       	brcs	.+2      	; 0x1778 <DIO_u8SetPinValue+0x24>
    1776:	f4 c0       	rjmp	.+488    	; 0x1960 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value==DIO_u8PIN_HIGH)
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	09 f0       	breq	.+2      	; 0x1780 <DIO_u8SetPinValue+0x2c>
    177e:	72 c0       	rjmp	.+228    	; 0x1864 <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	38 87       	std	Y+8, r19	; 0x08
    1788:	2f 83       	std	Y+7, r18	; 0x07
    178a:	8f 81       	ldd	r24, Y+7	; 0x07
    178c:	98 85       	ldd	r25, Y+8	; 0x08
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	49 f1       	breq	.+82     	; 0x17e6 <DIO_u8SetPinValue+0x92>
    1794:	2f 81       	ldd	r18, Y+7	; 0x07
    1796:	38 85       	ldd	r19, Y+8	; 0x08
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	31 05       	cpc	r19, r1
    179c:	2c f4       	brge	.+10     	; 0x17a8 <DIO_u8SetPinValue+0x54>
    179e:	8f 81       	ldd	r24, Y+7	; 0x07
    17a0:	98 85       	ldd	r25, Y+8	; 0x08
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	61 f0       	breq	.+24     	; 0x17be <DIO_u8SetPinValue+0x6a>
    17a6:	5b c0       	rjmp	.+182    	; 0x185e <DIO_u8SetPinValue+0x10a>
    17a8:	2f 81       	ldd	r18, Y+7	; 0x07
    17aa:	38 85       	ldd	r19, Y+8	; 0x08
    17ac:	22 30       	cpi	r18, 0x02	; 2
    17ae:	31 05       	cpc	r19, r1
    17b0:	71 f1       	breq	.+92     	; 0x180e <DIO_u8SetPinValue+0xba>
    17b2:	8f 81       	ldd	r24, Y+7	; 0x07
    17b4:	98 85       	ldd	r25, Y+8	; 0x08
    17b6:	83 30       	cpi	r24, 0x03	; 3
    17b8:	91 05       	cpc	r25, r1
    17ba:	e9 f1       	breq	.+122    	; 0x1836 <DIO_u8SetPinValue+0xe2>
    17bc:	50 c0       	rjmp	.+160    	; 0x185e <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8PORTA:SET_BIT(PORTA,Copy_u8Pin); break;
    17be:	ab e3       	ldi	r26, 0x3B	; 59
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	eb e3       	ldi	r30, 0x3B	; 59
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_u8SetPinValue+0x88>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_u8SetPinValue+0x84>
    17e0:	84 2b       	or	r24, r20
    17e2:	8c 93       	st	X, r24
    17e4:	bf c0       	rjmp	.+382    	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:SET_BIT(PORTB,Copy_u8Pin); break;
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_u8SetPinValue+0xb0>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_u8SetPinValue+0xac>
    1808:	84 2b       	or	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	ab c0       	rjmp	.+342    	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:SET_BIT(PORTC,Copy_u8Pin); break;
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_u8SetPinValue+0xd8>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_u8SetPinValue+0xd4>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	97 c0       	rjmp	.+302    	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:SET_BIT(PORTD,Copy_u8Pin); break;
    1836:	a2 e3       	ldi	r26, 0x32	; 50
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e2 e3       	ldi	r30, 0x32	; 50
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	48 2f       	mov	r20, r24
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	02 2e       	mov	r0, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_u8SetPinValue+0x100>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	0a 94       	dec	r0
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_u8SetPinValue+0xfc>
    1858:	84 2b       	or	r24, r20
    185a:	8c 93       	st	X, r24
    185c:	83 c0       	rjmp	.+262    	; 0x1964 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	89 83       	std	Y+1, r24	; 0x01
    1862:	80 c0       	rjmp	.+256    	; 0x1964 <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value==DIO_u8PIN_LOW)
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	88 23       	and	r24, r24
    1868:	09 f0       	breq	.+2      	; 0x186c <DIO_u8SetPinValue+0x118>
    186a:	77 c0       	rjmp	.+238    	; 0x195a <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    186c:	8a 81       	ldd	r24, Y+2	; 0x02
    186e:	28 2f       	mov	r18, r24
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	3e 83       	std	Y+6, r19	; 0x06
    1874:	2d 83       	std	Y+5, r18	; 0x05
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	91 05       	cpc	r25, r1
    187e:	59 f1       	breq	.+86     	; 0x18d6 <DIO_u8SetPinValue+0x182>
    1880:	2d 81       	ldd	r18, Y+5	; 0x05
    1882:	3e 81       	ldd	r19, Y+6	; 0x06
    1884:	22 30       	cpi	r18, 0x02	; 2
    1886:	31 05       	cpc	r19, r1
    1888:	2c f4       	brge	.+10     	; 0x1894 <DIO_u8SetPinValue+0x140>
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f0       	breq	.+26     	; 0x18ac <DIO_u8SetPinValue+0x158>
    1892:	60 c0       	rjmp	.+192    	; 0x1954 <DIO_u8SetPinValue+0x200>
    1894:	2d 81       	ldd	r18, Y+5	; 0x05
    1896:	3e 81       	ldd	r19, Y+6	; 0x06
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	89 f1       	breq	.+98     	; 0x1900 <DIO_u8SetPinValue+0x1ac>
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	83 30       	cpi	r24, 0x03	; 3
    18a4:	91 05       	cpc	r25, r1
    18a6:	09 f4       	brne	.+2      	; 0x18aa <DIO_u8SetPinValue+0x156>
    18a8:	40 c0       	rjmp	.+128    	; 0x192a <DIO_u8SetPinValue+0x1d6>
    18aa:	54 c0       	rjmp	.+168    	; 0x1954 <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8PORTA:CLR_BIT(PORTA,Copy_u8Pin); break;
    18ac:	ab e3       	ldi	r26, 0x3B	; 59
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_u8SetPinValue+0x176>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_u8SetPinValue+0x172>
    18ce:	80 95       	com	r24
    18d0:	84 23       	and	r24, r20
    18d2:	8c 93       	st	X, r24
    18d4:	47 c0       	rjmp	.+142    	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTB:CLR_BIT(PORTB,Copy_u8Pin); break;
    18d6:	a8 e3       	ldi	r26, 0x38	; 56
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e8 e3       	ldi	r30, 0x38	; 56
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	48 2f       	mov	r20, r24
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	28 2f       	mov	r18, r24
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	02 2e       	mov	r0, r18
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <DIO_u8SetPinValue+0x1a0>
    18f0:	88 0f       	add	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	0a 94       	dec	r0
    18f6:	e2 f7       	brpl	.-8      	; 0x18f0 <DIO_u8SetPinValue+0x19c>
    18f8:	80 95       	com	r24
    18fa:	84 23       	and	r24, r20
    18fc:	8c 93       	st	X, r24
    18fe:	32 c0       	rjmp	.+100    	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTC:CLR_BIT(PORTC,Copy_u8Pin); break;
    1900:	a5 e3       	ldi	r26, 0x35	; 53
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e5 e3       	ldi	r30, 0x35	; 53
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	48 2f       	mov	r20, r24
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	28 2f       	mov	r18, r24
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 2e       	mov	r0, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_u8SetPinValue+0x1ca>
    191a:	88 0f       	add	r24, r24
    191c:	99 1f       	adc	r25, r25
    191e:	0a 94       	dec	r0
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_u8SetPinValue+0x1c6>
    1922:	80 95       	com	r24
    1924:	84 23       	and	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	1d c0       	rjmp	.+58     	; 0x1964 <DIO_u8SetPinValue+0x210>
			case DIO_u8PORTD:CLR_BIT(PORTD,Copy_u8Pin); break;
    192a:	a2 e3       	ldi	r26, 0x32	; 50
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <DIO_u8SetPinValue+0x1f4>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <DIO_u8SetPinValue+0x1f0>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	08 c0       	rjmp	.+16     	; 0x1964 <DIO_u8SetPinValue+0x210>
			default: Local_u8ErrorState=1; break;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState=1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1964:	89 81       	ldd	r24, Y+1	; 0x01
}
    1966:	28 96       	adiw	r28, 0x08	; 8
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8Port,u8 Copy_u8Value)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <DIO_u8SetPortValue+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <DIO_u8SetPortValue+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	8a 83       	std	Y+2, r24	; 0x02
    1988:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState=0;
    198a:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port)
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3d 83       	std	Y+5, r19	; 0x05
    1994:	2c 83       	std	Y+4, r18	; 0x04
    1996:	8c 81       	ldd	r24, Y+4	; 0x04
    1998:	9d 81       	ldd	r25, Y+5	; 0x05
    199a:	81 30       	cpi	r24, 0x01	; 1
    199c:	91 05       	cpc	r25, r1
    199e:	d1 f0       	breq	.+52     	; 0x19d4 <DIO_u8SetPortValue+0x5c>
    19a0:	2c 81       	ldd	r18, Y+4	; 0x04
    19a2:	3d 81       	ldd	r19, Y+5	; 0x05
    19a4:	22 30       	cpi	r18, 0x02	; 2
    19a6:	31 05       	cpc	r19, r1
    19a8:	2c f4       	brge	.+10     	; 0x19b4 <DIO_u8SetPortValue+0x3c>
    19aa:	8c 81       	ldd	r24, Y+4	; 0x04
    19ac:	9d 81       	ldd	r25, Y+5	; 0x05
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	61 f0       	breq	.+24     	; 0x19ca <DIO_u8SetPortValue+0x52>
    19b2:	1f c0       	rjmp	.+62     	; 0x19f2 <DIO_u8SetPortValue+0x7a>
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	22 30       	cpi	r18, 0x02	; 2
    19ba:	31 05       	cpc	r19, r1
    19bc:	81 f0       	breq	.+32     	; 0x19de <DIO_u8SetPortValue+0x66>
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	9d 81       	ldd	r25, Y+5	; 0x05
    19c2:	83 30       	cpi	r24, 0x03	; 3
    19c4:	91 05       	cpc	r25, r1
    19c6:	81 f0       	breq	.+32     	; 0x19e8 <DIO_u8SetPortValue+0x70>
    19c8:	14 c0       	rjmp	.+40     	; 0x19f2 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8PORTA:PORTA=Copy_u8Value; break;
    19ca:	eb e3       	ldi	r30, 0x3B	; 59
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	80 83       	st	Z, r24
    19d2:	11 c0       	rjmp	.+34     	; 0x19f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTB:PORTB=Copy_u8Value; break;
    19d4:	e8 e3       	ldi	r30, 0x38	; 56
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	80 83       	st	Z, r24
    19dc:	0c c0       	rjmp	.+24     	; 0x19f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTC:PORTC=Copy_u8Value; break;
    19de:	e5 e3       	ldi	r30, 0x35	; 53
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	80 83       	st	Z, r24
    19e6:	07 c0       	rjmp	.+14     	; 0x19f6 <DIO_u8SetPortValue+0x7e>
	case DIO_u8PORTD:PORTD=Copy_u8Value; break;
    19e8:	e2 e3       	ldi	r30, 0x32	; 50
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	80 83       	st	Z, r24
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_u8SetPortValue+0x7e>
	default: Local_u8ErrorState=1; break;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    19f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	cf 91       	pop	r28
    1a04:	df 91       	pop	r29
    1a06:	08 95       	ret

00001a08 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8* Copy_u8Value)
{
    1a08:	df 93       	push	r29
    1a0a:	cf 93       	push	r28
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	27 97       	sbiw	r28, 0x07	; 7
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	6b 83       	std	Y+3, r22	; 0x03
    1a20:	5d 83       	std	Y+5, r21	; 0x05
    1a22:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=0;
    1a24:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Value!=NULL)&&(Copy_u8Pin<=7))
    1a26:	8c 81       	ldd	r24, Y+4	; 0x04
    1a28:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <DIO_u8GetPinValue+0x28>
    1a2e:	78 c0       	rjmp	.+240    	; 0x1b20 <DIO_u8GetPinValue+0x118>
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	88 30       	cpi	r24, 0x08	; 8
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <DIO_u8GetPinValue+0x30>
    1a36:	74 c0       	rjmp	.+232    	; 0x1b20 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	28 2f       	mov	r18, r24
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	3f 83       	std	Y+7, r19	; 0x07
    1a40:	2e 83       	std	Y+6, r18	; 0x06
    1a42:	4e 81       	ldd	r20, Y+6	; 0x06
    1a44:	5f 81       	ldd	r21, Y+7	; 0x07
    1a46:	41 30       	cpi	r20, 0x01	; 1
    1a48:	51 05       	cpc	r21, r1
    1a4a:	59 f1       	breq	.+86     	; 0x1aa2 <DIO_u8GetPinValue+0x9a>
    1a4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	91 05       	cpc	r25, r1
    1a54:	34 f4       	brge	.+12     	; 0x1a62 <DIO_u8GetPinValue+0x5a>
    1a56:	2e 81       	ldd	r18, Y+6	; 0x06
    1a58:	3f 81       	ldd	r19, Y+7	; 0x07
    1a5a:	21 15       	cp	r18, r1
    1a5c:	31 05       	cpc	r19, r1
    1a5e:	69 f0       	breq	.+26     	; 0x1a7a <DIO_u8GetPinValue+0x72>
    1a60:	5c c0       	rjmp	.+184    	; 0x1b1a <DIO_u8GetPinValue+0x112>
    1a62:	4e 81       	ldd	r20, Y+6	; 0x06
    1a64:	5f 81       	ldd	r21, Y+7	; 0x07
    1a66:	42 30       	cpi	r20, 0x02	; 2
    1a68:	51 05       	cpc	r21, r1
    1a6a:	79 f1       	breq	.+94     	; 0x1aca <DIO_u8GetPinValue+0xc2>
    1a6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	09 f4       	brne	.+2      	; 0x1a78 <DIO_u8GetPinValue+0x70>
    1a76:	3d c0       	rjmp	.+122    	; 0x1af2 <DIO_u8GetPinValue+0xea>
    1a78:	50 c0       	rjmp	.+160    	; 0x1b1a <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8PORTA:*Copy_u8Value=GET_BIT(PINA,Copy_u8Pin);break;
    1a7a:	e9 e3       	ldi	r30, 0x39	; 57
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	88 2f       	mov	r24, r24
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a9 01       	movw	r20, r18
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <DIO_u8GetPinValue+0x8a>
    1a8e:	55 95       	asr	r21
    1a90:	47 95       	ror	r20
    1a92:	8a 95       	dec	r24
    1a94:	e2 f7       	brpl	.-8      	; 0x1a8e <DIO_u8GetPinValue+0x86>
    1a96:	ca 01       	movw	r24, r20
    1a98:	81 70       	andi	r24, 0x01	; 1
    1a9a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a9c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a9e:	80 83       	st	Z, r24
    1aa0:	41 c0       	rjmp	.+130    	; 0x1b24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTB:*Copy_u8Value=GET_BIT(PINB,Copy_u8Pin);break;
    1aa2:	e6 e3       	ldi	r30, 0x36	; 54
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	28 2f       	mov	r18, r24
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	8b 81       	ldd	r24, Y+3	; 0x03
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	a9 01       	movw	r20, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_u8GetPinValue+0xb2>
    1ab6:	55 95       	asr	r21
    1ab8:	47 95       	ror	r20
    1aba:	8a 95       	dec	r24
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_u8GetPinValue+0xae>
    1abe:	ca 01       	movw	r24, r20
    1ac0:	81 70       	andi	r24, 0x01	; 1
    1ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac6:	80 83       	st	Z, r24
    1ac8:	2d c0       	rjmp	.+90     	; 0x1b24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTC:*Copy_u8Value=GET_BIT(PINC,Copy_u8Pin);break;
    1aca:	e3 e3       	ldi	r30, 0x33	; 51
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	a9 01       	movw	r20, r18
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <DIO_u8GetPinValue+0xda>
    1ade:	55 95       	asr	r21
    1ae0:	47 95       	ror	r20
    1ae2:	8a 95       	dec	r24
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <DIO_u8GetPinValue+0xd6>
    1ae6:	ca 01       	movw	r24, r20
    1ae8:	81 70       	andi	r24, 0x01	; 1
    1aea:	ec 81       	ldd	r30, Y+4	; 0x04
    1aec:	fd 81       	ldd	r31, Y+5	; 0x05
    1aee:	80 83       	st	Z, r24
    1af0:	19 c0       	rjmp	.+50     	; 0x1b24 <DIO_u8GetPinValue+0x11c>
		case DIO_u8PORTD:*Copy_u8Value=GET_BIT(PIND,Copy_u8Pin);break;
    1af2:	e0 e3       	ldi	r30, 0x30	; 48
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	28 2f       	mov	r18, r24
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a9 01       	movw	r20, r18
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <DIO_u8GetPinValue+0x102>
    1b06:	55 95       	asr	r21
    1b08:	47 95       	ror	r20
    1b0a:	8a 95       	dec	r24
    1b0c:	e2 f7       	brpl	.-8      	; 0x1b06 <DIO_u8GetPinValue+0xfe>
    1b0e:	ca 01       	movw	r24, r20
    1b10:	81 70       	andi	r24, 0x01	; 1
    1b12:	ec 81       	ldd	r30, Y+4	; 0x04
    1b14:	fd 81       	ldd	r31, Y+5	; 0x05
    1b16:	80 83       	st	Z, r24
    1b18:	05 c0       	rjmp	.+10     	; 0x1b24 <DIO_u8GetPinValue+0x11c>
		default:Local_u8ErrorState=1; break;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState=1;
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1b24:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b26:	27 96       	adiw	r28, 0x07	; 7
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <GIE_voidEnable>:
#include "Bit_Math.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	/*Set SREG_I bit to enable GIE */
	SET_BIT(SREG,SREG_I);
    1b40:	af e5       	ldi	r26, 0x5F	; 95
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	ef e5       	ldi	r30, 0x5F	; 95
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 68       	ori	r24, 0x80	; 128
    1b4c:	8c 93       	st	X, r24
}
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
	/*Clear SREG_I bit to disable GIE */
	CLR_BIT(SREG,SREG_I);
    1b5c:	af e5       	ldi	r26, 0x5F	; 95
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	ef e5       	ldi	r30, 0x5F	; 95
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8f 77       	andi	r24, 0x7F	; 127
    1b68:	8c 93       	st	X, r24
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <KPD_u8GetPressedKey>:
#include "KPD_config.h"
#include "KPD_private.h"
#include "KPD_interface.h"

u8 KPD_u8GetPressedKey(void)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <KPD_u8GetPressedKey+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <KPD_u8GetPressedKey+0x8>
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY,Local_u8ColumnIndex,Local_u8RowIndex,Local_u8PinState;
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
    1b82:	1a 82       	std	Y+2, r1	; 0x02
    1b84:	5e c0       	rjmp	.+188    	; 0x1c42 <KPD_u8GetPressedKey+0xd2>
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	e5 51       	subi	r30, 0x15	; 21
    1b90:	fe 4f       	sbci	r31, 0xFE	; 254
    1b92:	90 81       	ld	r25, Z
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	69 2f       	mov	r22, r25
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUMBER;Local_u8RowIndex++)
    1b9e:	19 82       	std	Y+1, r1	; 0x01
    1ba0:	3d c0       	rjmp	.+122    	; 0x1c1c <KPD_u8GetPressedKey+0xac>
		{
			/*Read the current row*/
			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e9 51       	subi	r30, 0x19	; 25
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	90 81       	ld	r25, Z
    1bb0:	9e 01       	movw	r18, r28
    1bb2:	2c 5f       	subi	r18, 0xFC	; 252
    1bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	69 2f       	mov	r22, r25
    1bba:	a9 01       	movw	r20, r18
    1bbc:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_u8GetPinValue>
			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	88 23       	and	r24, r24
    1bc4:	41 f5       	brne	.+80     	; 0x1c16 <KPD_u8GetPressedKey+0xa6>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	48 2f       	mov	r20, r24
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bce:	28 2f       	mov	r18, r24
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	88 0f       	add	r24, r24
    1bda:	99 1f       	adc	r25, r25
    1bdc:	82 0f       	add	r24, r18
    1bde:	93 1f       	adc	r25, r19
    1be0:	fc 01       	movw	r30, r24
    1be2:	e1 51       	subi	r30, 0x11	; 17
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	80 81       	ld	r24, Z
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	0f c0       	rjmp	.+30     	; 0x1c0a <KPD_u8GetPressedKey+0x9a>
				/*polling busy wait to avoid the repeation of the code many times while the button is pressed*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	e9 51       	subi	r30, 0x19	; 25
    1bf6:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf8:	90 81       	ld	r25, Z
    1bfa:	9e 01       	movw	r18, r28
    1bfc:	2c 5f       	subi	r18, 0xFC	; 252
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	69 2f       	mov	r22, r25
    1c04:	a9 01       	movw	r20, r18
    1c06:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <DIO_u8GetPinValue>
			/*Check if switch is pressed*/
			if(Local_u8PinState==DIO_u8PIN_LOW)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				/*polling busy wait to avoid the repeation of the code many times while the button is pressed*/
				while(Local_u8PinState==DIO_u8PIN_LOW)
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	88 23       	and	r24, r24
    1c0e:	71 f3       	breq	.-36     	; 0x1bec <KPD_u8GetPressedKey+0x7c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinState);
				}
				return Local_u8PressedKey;
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	1c c0       	rjmp	.+56     	; 0x1c4e <KPD_u8GetPressedKey+0xde>

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
	{
		/*Activate the current column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_LOW);
		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUMBER;Local_u8RowIndex++)
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8f 5f       	subi	r24, 0xFF	; 255
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	08 f4       	brcc	.+2      	; 0x1c24 <KPD_u8GetPressedKey+0xb4>
    1c22:	bf cf       	rjmp	.-130    	; 0x1ba2 <KPD_u8GetPressedKey+0x32>
				return Local_u8PressedKey;
			}

		}
		/*Deactivate the cuurent column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColumnArr[Local_u8ColumnIndex],DIO_u8PIN_HIGH);
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e5 51       	subi	r30, 0x15	; 21
    1c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c30:	90 81       	ld	r25, Z
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	69 2f       	mov	r22, r25
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>

	static u8 Local_u8KPDColumnArr[COLUMN_NUMBER]={KPD_COLUMN0_PIN,KPD_COLUMN1_PIN,KPD_COLUMN2_PIN,KPD_COLUMN3_PIN};
	static u8 Local_u8KPDRowArr[ROW_NUMBER]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};


	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUMBER;Local_u8ColumnIndex++)
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	8a 83       	std	Y+2, r24	; 0x02
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	84 30       	cpi	r24, 0x04	; 4
    1c46:	08 f4       	brcc	.+2      	; 0x1c4a <KPD_u8GetPressedKey+0xda>
    1c48:	9e cf       	rjmp	.-196    	; 0x1b86 <KPD_u8GetPressedKey+0x16>





	return Local_u8PressedKey;
    1c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4c:	8d 83       	std	Y+5, r24	; 0x05
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <PORT_voidinit>:
#include "PORT_private.h"
#include "PORT_register.h"
#include "PORT_interface.h"

void PORT_voidinit(void)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	DDRA=PORTA_DIR;
    1c68:	ea e3       	ldi	r30, 0x3A	; 58
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 ef       	ldi	r24, 0xF0	; 240
    1c6e:	80 83       	st	Z, r24
	DDRB=PORTB_DIR;
    1c70:	e7 e3       	ldi	r30, 0x37	; 55
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	8f ef       	ldi	r24, 0xFF	; 255
    1c76:	80 83       	st	Z, r24
	DDRC=PORTC_DIR;
    1c78:	e4 e3       	ldi	r30, 0x34	; 52
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	87 e0       	ldi	r24, 0x07	; 7
    1c7e:	80 83       	st	Z, r24
	DDRD=PORTD_DIR;
    1c80:	e1 e3       	ldi	r30, 0x31	; 49
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	8f ef       	ldi	r24, 0xFF	; 255
    1c86:	80 83       	st	Z, r24

	PORTA=PORTA_INIT;
    1c88:	eb e3       	ldi	r30, 0x3B	; 59
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	80 83       	st	Z, r24
	PORTB=PORTB_INIT;
    1c90:	e8 e3       	ldi	r30, 0x38	; 56
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	8f ef       	ldi	r24, 0xFF	; 255
    1c96:	80 83       	st	Z, r24
	PORTC=PORTC_INIT;
    1c98:	e5 e3       	ldi	r30, 0x35	; 53
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	10 82       	st	Z, r1
	PORTD=PORTD_INIT;
    1c9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	10 82       	st	Z, r1

}
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <Timer1_voidInit>:
#include "PWM_interface.h"
#include "PWM_register.h"
#include "PWM_private.h"
#include "PWM_config.h"
void Timer1_voidInit(void)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM Set on top clear on compare*/
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    1cb2:	af e4       	ldi	r26, 0x4F	; 79
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	ef e4       	ldi	r30, 0x4F	; 79
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 68       	ori	r24, 0x80	; 128
    1cbe:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    1cc0:	af e4       	ldi	r26, 0x4F	; 79
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ef e4       	ldi	r30, 0x4F	; 79
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	8f 7b       	andi	r24, 0xBF	; 191
    1ccc:	8c 93       	st	X, r24

	/*CTC mode TOP ICR editing*/
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1cce:	ae e4       	ldi	r26, 0x4E	; 78
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	ee e4       	ldi	r30, 0x4E	; 78
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	80 61       	ori	r24, 0x10	; 16
    1cda:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1cdc:	ae e4       	ldi	r26, 0x4E	; 78
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ee e4       	ldi	r30, 0x4E	; 78
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 60       	ori	r24, 0x08	; 8
    1ce8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1cea:	af e4       	ldi	r26, 0x4F	; 79
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ef e4       	ldi	r30, 0x4F	; 79
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	82 60       	ori	r24, 0x02	; 2
    1cf6:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1cf8:	af e4       	ldi	r26, 0x4F	; 79
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	ef e4       	ldi	r30, 0x4F	; 79
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8e 7f       	andi	r24, 0xFE	; 254
    1d04:	8c 93       	st	X, r24

	/*Set Prescaler*/
   TCCR1B&=PRESCALER_MASK;
    1d06:	ae e4       	ldi	r26, 0x4E	; 78
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	ee e4       	ldi	r30, 0x4E	; 78
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	88 7f       	andi	r24, 0xF8	; 248
    1d12:	8c 93       	st	X, r24
   TCCR1B|=DIVIDE_BY_8;
    1d14:	ae e4       	ldi	r26, 0x4E	; 78
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	ee e4       	ldi	r30, 0x4E	; 78
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	82 60       	ori	r24, 0x02	; 2
    1d20:	8c 93       	st	X, r24

}
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <Timer1_voidSetICR>:
void Timer1_voidSetICR(u16 Copy_u16ICRTop)
{
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	00 d0       	rcall	.+0      	; 0x1d2e <Timer1_voidSetICR+0x6>
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16ICRTop;
    1d36:	e6 e4       	ldi	r30, 0x46	; 70
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
}
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	cf 91       	pop	r28
    1d48:	df 91       	pop	r29
    1d4a:	08 95       	ret

00001d4c <Timer1_voidSetOCR>:

void Timer1_voidSetOCR(u16 Copy_u16OCRVal)
{
    1d4c:	df 93       	push	r29
    1d4e:	cf 93       	push	r28
    1d50:	00 d0       	rcall	.+0      	; 0x1d52 <Timer1_voidSetOCR+0x6>
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16OCRVal;
    1d5a:	ea e4       	ldi	r30, 0x4A	; 74
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
}
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <STEP_u16SetAngleAntiClockwise>:
#include "STEP_interface.h"
#include "STEP_private.h"
#include "util/delay.h"

void STEP_u16SetAngleAntiClockwise(u16 Copy_u16Angle)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	ec 97       	sbiw	r28, 0x3c	; 60
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	9c af       	std	Y+60, r25	; 0x3c
    1d86:	8b af       	std	Y+59, r24	; 0x3b
	u16 Local_u16Steps=0;
    1d88:	1a ae       	std	Y+58, r1	; 0x3a
    1d8a:	19 ae       	std	Y+57, r1	; 0x39
	Local_u16Steps=(Copy_u16Angle/0.175)/4;
    1d8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d90:	cc 01       	movw	r24, r24
    1d92:	a0 e0       	ldi	r26, 0x00	; 0
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	bc 01       	movw	r22, r24
    1d98:	cd 01       	movw	r24, r26
    1d9a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	23 e3       	ldi	r18, 0x33	; 51
    1da8:	33 e3       	ldi	r19, 0x33	; 51
    1daa:	43 e3       	ldi	r20, 0x33	; 51
    1dac:	5e e3       	ldi	r21, 0x3E	; 62
    1dae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	bc 01       	movw	r22, r24
    1db8:	cd 01       	movw	r24, r26
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	40 e8       	ldi	r20, 0x80	; 128
    1dc0:	50 e4       	ldi	r21, 0x40	; 64
    1dc2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9a af       	std	Y+58, r25	; 0x3a
    1dd8:	89 af       	std	Y+57, r24	; 0x39
    1dda:	1d c2       	rjmp	.+1082   	; 0x2216 <STEP_u16SetAngleAntiClockwise+0x4a6>
	for(Local_u16Steps;Local_u16Steps>0;Local_u16Steps--)
	{
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_LOW);
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	62 e0       	ldi	r22, 0x02	; 2
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    1de6:	83 e0       	ldi	r24, 0x03	; 3
    1de8:	63 e0       	ldi	r22, 0x03	; 3
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	64 e0       	ldi	r22, 0x04	; 4
    1df4:	41 e0       	ldi	r20, 0x01	; 1
    1df6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	65 e0       	ldi	r22, 0x05	; 5
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a0 e0       	ldi	r26, 0x00	; 0
    1e0a:	b0 e4       	ldi	r27, 0x40	; 64
    1e0c:	8d ab       	std	Y+53, r24	; 0x35
    1e0e:	9e ab       	std	Y+54, r25	; 0x36
    1e10:	af ab       	std	Y+55, r26	; 0x37
    1e12:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	6d a9       	ldd	r22, Y+53	; 0x35
    1e16:	7e a9       	ldd	r23, Y+54	; 0x36
    1e18:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a ef       	ldi	r20, 0xFA	; 250
    1e22:	54 e4       	ldi	r21, 0x44	; 68
    1e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	89 ab       	std	Y+49, r24	; 0x31
    1e2e:	9a ab       	std	Y+50, r25	; 0x32
    1e30:	ab ab       	std	Y+51, r26	; 0x33
    1e32:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e34:	69 a9       	ldd	r22, Y+49	; 0x31
    1e36:	7a a9       	ldd	r23, Y+50	; 0x32
    1e38:	8b a9       	ldd	r24, Y+51	; 0x33
    1e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 e8       	ldi	r20, 0x80	; 128
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e48:	88 23       	and	r24, r24
    1e4a:	2c f4       	brge	.+10     	; 0x1e56 <STEP_u16SetAngleAntiClockwise+0xe6>
		__ticks = 1;
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	98 ab       	std	Y+48, r25	; 0x30
    1e52:	8f a7       	std	Y+47, r24	; 0x2f
    1e54:	3f c0       	rjmp	.+126    	; 0x1ed4 <STEP_u16SetAngleAntiClockwise+0x164>
	else if (__tmp > 65535)
    1e56:	69 a9       	ldd	r22, Y+49	; 0x31
    1e58:	7a a9       	ldd	r23, Y+50	; 0x32
    1e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f e7       	ldi	r20, 0x7F	; 127
    1e64:	57 e4       	ldi	r21, 0x47	; 71
    1e66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e6a:	18 16       	cp	r1, r24
    1e6c:	4c f5       	brge	.+82     	; 0x1ec0 <STEP_u16SetAngleAntiClockwise+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e70:	7e a9       	ldd	r23, Y+54	; 0x36
    1e72:	8f a9       	ldd	r24, Y+55	; 0x37
    1e74:	98 ad       	ldd	r25, Y+56	; 0x38
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e2       	ldi	r20, 0x20	; 32
    1e7c:	51 e4       	ldi	r21, 0x41	; 65
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	bc 01       	movw	r22, r24
    1e88:	cd 01       	movw	r24, r26
    1e8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	98 ab       	std	Y+48, r25	; 0x30
    1e94:	8f a7       	std	Y+47, r24	; 0x2f
    1e96:	0f c0       	rjmp	.+30     	; 0x1eb6 <STEP_u16SetAngleAntiClockwise+0x146>
    1e98:	88 ec       	ldi	r24, 0xC8	; 200
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9e a7       	std	Y+46, r25	; 0x2e
    1e9e:	8d a7       	std	Y+45, r24	; 0x2d
    1ea0:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ea2:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ea4:	01 97       	sbiw	r24, 0x01	; 1
    1ea6:	f1 f7       	brne	.-4      	; 0x1ea4 <STEP_u16SetAngleAntiClockwise+0x134>
    1ea8:	9e a7       	std	Y+46, r25	; 0x2e
    1eaa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eae:	98 a9       	ldd	r25, Y+48	; 0x30
    1eb0:	01 97       	sbiw	r24, 0x01	; 1
    1eb2:	98 ab       	std	Y+48, r25	; 0x30
    1eb4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	69 f7       	brne	.-38     	; 0x1e98 <STEP_u16SetAngleAntiClockwise+0x128>
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <STEP_u16SetAngleAntiClockwise+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ec2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ec4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	98 ab       	std	Y+48, r25	; 0x30
    1ed2:	8f a7       	std	Y+47, r24	; 0x2f
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	9c a7       	std	Y+44, r25	; 0x2c
    1eda:	8b a7       	std	Y+43, r24	; 0x2b
    1edc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ede:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <STEP_u16SetAngleAntiClockwise+0x170>
    1ee4:	9c a7       	std	Y+44, r25	; 0x2c
    1ee6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    1ee8:	83 e0       	ldi	r24, 0x03	; 3
    1eea:	62 e0       	ldi	r22, 0x02	; 2
    1eec:	41 e0       	ldi	r20, 0x01	; 1
    1eee:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_LOW);
    1ef2:	83 e0       	ldi	r24, 0x03	; 3
    1ef4:	63 e0       	ldi	r22, 0x03	; 3
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	64 e0       	ldi	r22, 0x04	; 4
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	65 e0       	ldi	r22, 0x05	; 5
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	a0 e0       	ldi	r26, 0x00	; 0
    1f16:	b0 e4       	ldi	r27, 0x40	; 64
    1f18:	8f a3       	std	Y+39, r24	; 0x27
    1f1a:	98 a7       	std	Y+40, r25	; 0x28
    1f1c:	a9 a7       	std	Y+41, r26	; 0x29
    1f1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f20:	6f a1       	ldd	r22, Y+39	; 0x27
    1f22:	78 a5       	ldd	r23, Y+40	; 0x28
    1f24:	89 a5       	ldd	r24, Y+41	; 0x29
    1f26:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	4a ef       	ldi	r20, 0xFA	; 250
    1f2e:	54 e4       	ldi	r21, 0x44	; 68
    1f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	8b a3       	std	Y+35, r24	; 0x23
    1f3a:	9c a3       	std	Y+36, r25	; 0x24
    1f3c:	ad a3       	std	Y+37, r26	; 0x25
    1f3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f40:	6b a1       	ldd	r22, Y+35	; 0x23
    1f42:	7c a1       	ldd	r23, Y+36	; 0x24
    1f44:	8d a1       	ldd	r24, Y+37	; 0x25
    1f46:	9e a1       	ldd	r25, Y+38	; 0x26
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	2c f4       	brge	.+10     	; 0x1f62 <STEP_u16SetAngleAntiClockwise+0x1f2>
		__ticks = 1;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9a a3       	std	Y+34, r25	; 0x22
    1f5e:	89 a3       	std	Y+33, r24	; 0x21
    1f60:	3f c0       	rjmp	.+126    	; 0x1fe0 <STEP_u16SetAngleAntiClockwise+0x270>
	else if (__tmp > 65535)
    1f62:	6b a1       	ldd	r22, Y+35	; 0x23
    1f64:	7c a1       	ldd	r23, Y+36	; 0x24
    1f66:	8d a1       	ldd	r24, Y+37	; 0x25
    1f68:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	3f ef       	ldi	r19, 0xFF	; 255
    1f6e:	4f e7       	ldi	r20, 0x7F	; 127
    1f70:	57 e4       	ldi	r21, 0x47	; 71
    1f72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f76:	18 16       	cp	r1, r24
    1f78:	4c f5       	brge	.+82     	; 0x1fcc <STEP_u16SetAngleAntiClockwise+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f7c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f7e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f80:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e2       	ldi	r20, 0x20	; 32
    1f88:	51 e4       	ldi	r21, 0x41	; 65
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	bc 01       	movw	r22, r24
    1f94:	cd 01       	movw	r24, r26
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9a a3       	std	Y+34, r25	; 0x22
    1fa0:	89 a3       	std	Y+33, r24	; 0x21
    1fa2:	0f c0       	rjmp	.+30     	; 0x1fc2 <STEP_u16SetAngleAntiClockwise+0x252>
    1fa4:	88 ec       	ldi	r24, 0xC8	; 200
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 a3       	std	Y+32, r25	; 0x20
    1faa:	8f 8f       	std	Y+31, r24	; 0x1f
    1fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fae:	98 a1       	ldd	r25, Y+32	; 0x20
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <STEP_u16SetAngleAntiClockwise+0x240>
    1fb4:	98 a3       	std	Y+32, r25	; 0x20
    1fb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fba:	9a a1       	ldd	r25, Y+34	; 0x22
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	9a a3       	std	Y+34, r25	; 0x22
    1fc0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	69 f7       	brne	.-38     	; 0x1fa4 <STEP_u16SetAngleAntiClockwise+0x234>
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <STEP_u16SetAngleAntiClockwise+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fcc:	6b a1       	ldd	r22, Y+35	; 0x23
    1fce:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd0:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd2:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9a a3       	std	Y+34, r25	; 0x22
    1fde:	89 a3       	std	Y+33, r24	; 0x21
    1fe0:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe2:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe4:	9e 8f       	std	Y+30, r25	; 0x1e
    1fe6:	8d 8f       	std	Y+29, r24	; 0x1d
    1fe8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <STEP_u16SetAngleAntiClockwise+0x27c>
    1ff0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ff2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    1ff4:	83 e0       	ldi	r24, 0x03	; 3
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	41 e0       	ldi	r20, 0x01	; 1
    1ffa:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    1ffe:	83 e0       	ldi	r24, 0x03	; 3
    2000:	63 e0       	ldi	r22, 0x03	; 3
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_LOW);
    2008:	83 e0       	ldi	r24, 0x03	; 3
    200a:	64 e0       	ldi	r22, 0x04	; 4
    200c:	40 e0       	ldi	r20, 0x00	; 0
    200e:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    2012:	83 e0       	ldi	r24, 0x03	; 3
    2014:	65 e0       	ldi	r22, 0x05	; 5
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	a0 e0       	ldi	r26, 0x00	; 0
    2022:	b0 e4       	ldi	r27, 0x40	; 64
    2024:	89 8f       	std	Y+25, r24	; 0x19
    2026:	9a 8f       	std	Y+26, r25	; 0x1a
    2028:	ab 8f       	std	Y+27, r26	; 0x1b
    202a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	69 8d       	ldd	r22, Y+25	; 0x19
    202e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2030:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2032:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8d 8b       	std	Y+21, r24	; 0x15
    2046:	9e 8b       	std	Y+22, r25	; 0x16
    2048:	af 8b       	std	Y+23, r26	; 0x17
    204a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    204c:	6d 89       	ldd	r22, Y+21	; 0x15
    204e:	7e 89       	ldd	r23, Y+22	; 0x16
    2050:	8f 89       	ldd	r24, Y+23	; 0x17
    2052:	98 8d       	ldd	r25, Y+24	; 0x18
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <STEP_u16SetAngleAntiClockwise+0x2fe>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <STEP_u16SetAngleAntiClockwise+0x37c>
	else if (__tmp > 65535)
    206e:	6d 89       	ldd	r22, Y+21	; 0x15
    2070:	7e 89       	ldd	r23, Y+22	; 0x16
    2072:	8f 89       	ldd	r24, Y+23	; 0x17
    2074:	98 8d       	ldd	r25, Y+24	; 0x18
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <STEP_u16SetAngleAntiClockwise+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	69 8d       	ldd	r22, Y+25	; 0x19
    2088:	7a 8d       	ldd	r23, Y+26	; 0x1a
    208a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    208c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9c 8b       	std	Y+20, r25	; 0x14
    20ac:	8b 8b       	std	Y+19, r24	; 0x13
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <STEP_u16SetAngleAntiClockwise+0x35e>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9a 8b       	std	Y+18, r25	; 0x12
    20b6:	89 8b       	std	Y+17, r24	; 0x11
    20b8:	89 89       	ldd	r24, Y+17	; 0x11
    20ba:	9a 89       	ldd	r25, Y+18	; 0x12
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <STEP_u16SetAngleAntiClockwise+0x34c>
    20c0:	9a 8b       	std	Y+18, r25	; 0x12
    20c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8b 89       	ldd	r24, Y+19	; 0x13
    20c6:	9c 89       	ldd	r25, Y+20	; 0x14
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9c 8b       	std	Y+20, r25	; 0x14
    20cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8b 89       	ldd	r24, Y+19	; 0x13
    20d0:	9c 89       	ldd	r25, Y+20	; 0x14
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <STEP_u16SetAngleAntiClockwise+0x340>
    20d6:	14 c0       	rjmp	.+40     	; 0x2100 <STEP_u16SetAngleAntiClockwise+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6d 89       	ldd	r22, Y+21	; 0x15
    20da:	7e 89       	ldd	r23, Y+22	; 0x16
    20dc:	8f 89       	ldd	r24, Y+23	; 0x17
    20de:	98 8d       	ldd	r25, Y+24	; 0x18
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9c 8b       	std	Y+20, r25	; 0x14
    20ea:	8b 8b       	std	Y+19, r24	; 0x13
    20ec:	8b 89       	ldd	r24, Y+19	; 0x13
    20ee:	9c 89       	ldd	r25, Y+20	; 0x14
    20f0:	98 8b       	std	Y+16, r25	; 0x10
    20f2:	8f 87       	std	Y+15, r24	; 0x0f
    20f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20f6:	98 89       	ldd	r25, Y+16	; 0x10
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <STEP_u16SetAngleAntiClockwise+0x388>
    20fc:	98 8b       	std	Y+16, r25	; 0x10
    20fe:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    2100:	83 e0       	ldi	r24, 0x03	; 3
    2102:	62 e0       	ldi	r22, 0x02	; 2
    2104:	41 e0       	ldi	r20, 0x01	; 1
    2106:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    210a:	83 e0       	ldi	r24, 0x03	; 3
    210c:	63 e0       	ldi	r22, 0x03	; 3
    210e:	41 e0       	ldi	r20, 0x01	; 1
    2110:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	64 e0       	ldi	r22, 0x04	; 4
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_LOW);
    211e:	83 e0       	ldi	r24, 0x03	; 3
    2120:	65 e0       	ldi	r22, 0x05	; 5
    2122:	40 e0       	ldi	r20, 0x00	; 0
    2124:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	a0 e0       	ldi	r26, 0x00	; 0
    212e:	b0 e4       	ldi	r27, 0x40	; 64
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	9c 87       	std	Y+12, r25	; 0x0c
    2134:	ad 87       	std	Y+13, r26	; 0x0d
    2136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2138:	6b 85       	ldd	r22, Y+11	; 0x0b
    213a:	7c 85       	ldd	r23, Y+12	; 0x0c
    213c:	8d 85       	ldd	r24, Y+13	; 0x0d
    213e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4a ef       	ldi	r20, 0xFA	; 250
    2146:	54 e4       	ldi	r21, 0x44	; 68
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	8f 83       	std	Y+7, r24	; 0x07
    2152:	98 87       	std	Y+8, r25	; 0x08
    2154:	a9 87       	std	Y+9, r26	; 0x09
    2156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2158:	6f 81       	ldd	r22, Y+7	; 0x07
    215a:	78 85       	ldd	r23, Y+8	; 0x08
    215c:	89 85       	ldd	r24, Y+9	; 0x09
    215e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	5f e3       	ldi	r21, 0x3F	; 63
    2168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    216c:	88 23       	and	r24, r24
    216e:	2c f4       	brge	.+10     	; 0x217a <STEP_u16SetAngleAntiClockwise+0x40a>
		__ticks = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	9e 83       	std	Y+6, r25	; 0x06
    2176:	8d 83       	std	Y+5, r24	; 0x05
    2178:	3f c0       	rjmp	.+126    	; 0x21f8 <STEP_u16SetAngleAntiClockwise+0x488>
	else if (__tmp > 65535)
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	3f ef       	ldi	r19, 0xFF	; 255
    2186:	4f e7       	ldi	r20, 0x7F	; 127
    2188:	57 e4       	ldi	r21, 0x47	; 71
    218a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    218e:	18 16       	cp	r1, r24
    2190:	4c f5       	brge	.+82     	; 0x21e4 <STEP_u16SetAngleAntiClockwise+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2192:	6b 85       	ldd	r22, Y+11	; 0x0b
    2194:	7c 85       	ldd	r23, Y+12	; 0x0c
    2196:	8d 85       	ldd	r24, Y+13	; 0x0d
    2198:	9e 85       	ldd	r25, Y+14	; 0x0e
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e2       	ldi	r20, 0x20	; 32
    21a0:	51 e4       	ldi	r21, 0x41	; 65
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a6:	dc 01       	movw	r26, r24
    21a8:	cb 01       	movw	r24, r22
    21aa:	bc 01       	movw	r22, r24
    21ac:	cd 01       	movw	r24, r26
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	0f c0       	rjmp	.+30     	; 0x21da <STEP_u16SetAngleAntiClockwise+0x46a>
    21bc:	88 ec       	ldi	r24, 0xC8	; 200
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9c 83       	std	Y+4, r25	; 0x04
    21c2:	8b 83       	std	Y+3, r24	; 0x03
    21c4:	8b 81       	ldd	r24, Y+3	; 0x03
    21c6:	9c 81       	ldd	r25, Y+4	; 0x04
    21c8:	01 97       	sbiw	r24, 0x01	; 1
    21ca:	f1 f7       	brne	.-4      	; 0x21c8 <STEP_u16SetAngleAntiClockwise+0x458>
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
    21d2:	9e 81       	ldd	r25, Y+6	; 0x06
    21d4:	01 97       	sbiw	r24, 0x01	; 1
    21d6:	9e 83       	std	Y+6, r25	; 0x06
    21d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21da:	8d 81       	ldd	r24, Y+5	; 0x05
    21dc:	9e 81       	ldd	r25, Y+6	; 0x06
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	69 f7       	brne	.-38     	; 0x21bc <STEP_u16SetAngleAntiClockwise+0x44c>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <STEP_u16SetAngleAntiClockwise+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e4:	6f 81       	ldd	r22, Y+7	; 0x07
    21e6:	78 85       	ldd	r23, Y+8	; 0x08
    21e8:	89 85       	ldd	r24, Y+9	; 0x09
    21ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	9e 83       	std	Y+6, r25	; 0x06
    21f6:	8d 83       	std	Y+5, r24	; 0x05
    21f8:	8d 81       	ldd	r24, Y+5	; 0x05
    21fa:	9e 81       	ldd	r25, Y+6	; 0x06
    21fc:	9a 83       	std	Y+2, r25	; 0x02
    21fe:	89 83       	std	Y+1, r24	; 0x01
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	9a 81       	ldd	r25, Y+2	; 0x02
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	f1 f7       	brne	.-4      	; 0x2204 <STEP_u16SetAngleAntiClockwise+0x494>
    2208:	9a 83       	std	Y+2, r25	; 0x02
    220a:	89 83       	std	Y+1, r24	; 0x01

void STEP_u16SetAngleAntiClockwise(u16 Copy_u16Angle)
{
	u16 Local_u16Steps=0;
	Local_u16Steps=(Copy_u16Angle/0.175)/4;
	for(Local_u16Steps;Local_u16Steps>0;Local_u16Steps--)
    220c:	89 ad       	ldd	r24, Y+57	; 0x39
    220e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2210:	01 97       	sbiw	r24, 0x01	; 1
    2212:	9a af       	std	Y+58, r25	; 0x3a
    2214:	89 af       	std	Y+57, r24	; 0x39
    2216:	89 ad       	ldd	r24, Y+57	; 0x39
    2218:	9a ad       	ldd	r25, Y+58	; 0x3a
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	09 f0       	breq	.+2      	; 0x2220 <STEP_u16SetAngleAntiClockwise+0x4b0>
    221e:	de cd       	rjmp	.-1092   	; 0x1ddc <STEP_u16SetAngleAntiClockwise+0x6c>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_LOW);
		_delay_ms(2);
	}
}
    2220:	ec 96       	adiw	r28, 0x3c	; 60
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <STEP_u16SetAngleClockwise>:

void STEP_u16SetAngleClockwise(u16 Copy_u16Angle)
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	ec 97       	sbiw	r28, 0x3c	; 60
    223c:	0f b6       	in	r0, 0x3f	; 63
    223e:	f8 94       	cli
    2240:	de bf       	out	0x3e, r29	; 62
    2242:	0f be       	out	0x3f, r0	; 63
    2244:	cd bf       	out	0x3d, r28	; 61
    2246:	9c af       	std	Y+60, r25	; 0x3c
    2248:	8b af       	std	Y+59, r24	; 0x3b
	u16 Local_u16Steps=0;
    224a:	1a ae       	std	Y+58, r1	; 0x3a
    224c:	19 ae       	std	Y+57, r1	; 0x39
	Local_u16Steps=(Copy_u16Angle/0.175)/4;
    224e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2250:	9c ad       	ldd	r25, Y+60	; 0x3c
    2252:	cc 01       	movw	r24, r24
    2254:	a0 e0       	ldi	r26, 0x00	; 0
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	bc 01       	movw	r22, r24
    2266:	cd 01       	movw	r24, r26
    2268:	23 e3       	ldi	r18, 0x33	; 51
    226a:	33 e3       	ldi	r19, 0x33	; 51
    226c:	43 e3       	ldi	r20, 0x33	; 51
    226e:	5e e3       	ldi	r21, 0x3E	; 62
    2270:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e8       	ldi	r20, 0x80	; 128
    2282:	50 e4       	ldi	r21, 0x40	; 64
    2284:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9a af       	std	Y+58, r25	; 0x3a
    229a:	89 af       	std	Y+57, r24	; 0x39
    229c:	1d c2       	rjmp	.+1082   	; 0x26d8 <STEP_u16SetAngleClockwise+0x4a6>
	for(Local_u16Steps;Local_u16Steps>0;Local_u16Steps--)
	{
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    229e:	83 e0       	ldi	r24, 0x03	; 3
    22a0:	62 e0       	ldi	r22, 0x02	; 2
    22a2:	41 e0       	ldi	r20, 0x01	; 1
    22a4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    22a8:	83 e0       	ldi	r24, 0x03	; 3
    22aa:	63 e0       	ldi	r22, 0x03	; 3
    22ac:	41 e0       	ldi	r20, 0x01	; 1
    22ae:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    22b2:	83 e0       	ldi	r24, 0x03	; 3
    22b4:	64 e0       	ldi	r22, 0x04	; 4
    22b6:	41 e0       	ldi	r20, 0x01	; 1
    22b8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_LOW);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	65 e0       	ldi	r22, 0x05	; 5
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e4       	ldi	r27, 0x40	; 64
    22ce:	8d ab       	std	Y+53, r24	; 0x35
    22d0:	9e ab       	std	Y+54, r25	; 0x36
    22d2:	af ab       	std	Y+55, r26	; 0x37
    22d4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	6d a9       	ldd	r22, Y+53	; 0x35
    22d8:	7e a9       	ldd	r23, Y+54	; 0x36
    22da:	8f a9       	ldd	r24, Y+55	; 0x37
    22dc:	98 ad       	ldd	r25, Y+56	; 0x38
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a ef       	ldi	r20, 0xFA	; 250
    22e4:	54 e4       	ldi	r21, 0x44	; 68
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	89 ab       	std	Y+49, r24	; 0x31
    22f0:	9a ab       	std	Y+50, r25	; 0x32
    22f2:	ab ab       	std	Y+51, r26	; 0x33
    22f4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22f6:	69 a9       	ldd	r22, Y+49	; 0x31
    22f8:	7a a9       	ldd	r23, Y+50	; 0x32
    22fa:	8b a9       	ldd	r24, Y+51	; 0x33
    22fc:	9c a9       	ldd	r25, Y+52	; 0x34
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <STEP_u16SetAngleClockwise+0xe6>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	98 ab       	std	Y+48, r25	; 0x30
    2314:	8f a7       	std	Y+47, r24	; 0x2f
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <STEP_u16SetAngleClockwise+0x164>
	else if (__tmp > 65535)
    2318:	69 a9       	ldd	r22, Y+49	; 0x31
    231a:	7a a9       	ldd	r23, Y+50	; 0x32
    231c:	8b a9       	ldd	r24, Y+51	; 0x33
    231e:	9c a9       	ldd	r25, Y+52	; 0x34
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <STEP_u16SetAngleClockwise+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	6d a9       	ldd	r22, Y+53	; 0x35
    2332:	7e a9       	ldd	r23, Y+54	; 0x36
    2334:	8f a9       	ldd	r24, Y+55	; 0x37
    2336:	98 ad       	ldd	r25, Y+56	; 0x38
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	98 ab       	std	Y+48, r25	; 0x30
    2356:	8f a7       	std	Y+47, r24	; 0x2f
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <STEP_u16SetAngleClockwise+0x146>
    235a:	88 ec       	ldi	r24, 0xC8	; 200
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9e a7       	std	Y+46, r25	; 0x2e
    2360:	8d a7       	std	Y+45, r24	; 0x2d
    2362:	8d a5       	ldd	r24, Y+45	; 0x2d
    2364:	9e a5       	ldd	r25, Y+46	; 0x2e
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <STEP_u16SetAngleClockwise+0x134>
    236a:	9e a7       	std	Y+46, r25	; 0x2e
    236c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2370:	98 a9       	ldd	r25, Y+48	; 0x30
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	98 ab       	std	Y+48, r25	; 0x30
    2376:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8f a5       	ldd	r24, Y+47	; 0x2f
    237a:	98 a9       	ldd	r25, Y+48	; 0x30
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <STEP_u16SetAngleClockwise+0x128>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <STEP_u16SetAngleClockwise+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	69 a9       	ldd	r22, Y+49	; 0x31
    2384:	7a a9       	ldd	r23, Y+50	; 0x32
    2386:	8b a9       	ldd	r24, Y+51	; 0x33
    2388:	9c a9       	ldd	r25, Y+52	; 0x34
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	98 ab       	std	Y+48, r25	; 0x30
    2394:	8f a7       	std	Y+47, r24	; 0x2f
    2396:	8f a5       	ldd	r24, Y+47	; 0x2f
    2398:	98 a9       	ldd	r25, Y+48	; 0x30
    239a:	9c a7       	std	Y+44, r25	; 0x2c
    239c:	8b a7       	std	Y+43, r24	; 0x2b
    239e:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <STEP_u16SetAngleClockwise+0x170>
    23a6:	9c a7       	std	Y+44, r25	; 0x2c
    23a8:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	62 e0       	ldi	r22, 0x02	; 2
    23ae:	41 e0       	ldi	r20, 0x01	; 1
    23b0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    23b4:	83 e0       	ldi	r24, 0x03	; 3
    23b6:	63 e0       	ldi	r22, 0x03	; 3
    23b8:	41 e0       	ldi	r20, 0x01	; 1
    23ba:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_LOW);
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	64 e0       	ldi	r22, 0x04	; 4
    23c2:	40 e0       	ldi	r20, 0x00	; 0
    23c4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    23c8:	83 e0       	ldi	r24, 0x03	; 3
    23ca:	65 e0       	ldi	r22, 0x05	; 5
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	a0 e0       	ldi	r26, 0x00	; 0
    23d8:	b0 e4       	ldi	r27, 0x40	; 64
    23da:	8f a3       	std	Y+39, r24	; 0x27
    23dc:	98 a7       	std	Y+40, r25	; 0x28
    23de:	a9 a7       	std	Y+41, r26	; 0x29
    23e0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e2:	6f a1       	ldd	r22, Y+39	; 0x27
    23e4:	78 a5       	ldd	r23, Y+40	; 0x28
    23e6:	89 a5       	ldd	r24, Y+41	; 0x29
    23e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a ef       	ldi	r20, 0xFA	; 250
    23f0:	54 e4       	ldi	r21, 0x44	; 68
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	8b a3       	std	Y+35, r24	; 0x23
    23fc:	9c a3       	std	Y+36, r25	; 0x24
    23fe:	ad a3       	std	Y+37, r26	; 0x25
    2400:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2402:	6b a1       	ldd	r22, Y+35	; 0x23
    2404:	7c a1       	ldd	r23, Y+36	; 0x24
    2406:	8d a1       	ldd	r24, Y+37	; 0x25
    2408:	9e a1       	ldd	r25, Y+38	; 0x26
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2416:	88 23       	and	r24, r24
    2418:	2c f4       	brge	.+10     	; 0x2424 <STEP_u16SetAngleClockwise+0x1f2>
		__ticks = 1;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9a a3       	std	Y+34, r25	; 0x22
    2420:	89 a3       	std	Y+33, r24	; 0x21
    2422:	3f c0       	rjmp	.+126    	; 0x24a2 <STEP_u16SetAngleClockwise+0x270>
	else if (__tmp > 65535)
    2424:	6b a1       	ldd	r22, Y+35	; 0x23
    2426:	7c a1       	ldd	r23, Y+36	; 0x24
    2428:	8d a1       	ldd	r24, Y+37	; 0x25
    242a:	9e a1       	ldd	r25, Y+38	; 0x26
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2438:	18 16       	cp	r1, r24
    243a:	4c f5       	brge	.+82     	; 0x248e <STEP_u16SetAngleClockwise+0x25c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243c:	6f a1       	ldd	r22, Y+39	; 0x27
    243e:	78 a5       	ldd	r23, Y+40	; 0x28
    2440:	89 a5       	ldd	r24, Y+41	; 0x29
    2442:	9a a5       	ldd	r25, Y+42	; 0x2a
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	bc 01       	movw	r22, r24
    2456:	cd 01       	movw	r24, r26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	0f c0       	rjmp	.+30     	; 0x2484 <STEP_u16SetAngleClockwise+0x252>
    2466:	88 ec       	ldi	r24, 0xC8	; 200
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	98 a3       	std	Y+32, r25	; 0x20
    246c:	8f 8f       	std	Y+31, r24	; 0x1f
    246e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2470:	98 a1       	ldd	r25, Y+32	; 0x20
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	f1 f7       	brne	.-4      	; 0x2472 <STEP_u16SetAngleClockwise+0x240>
    2476:	98 a3       	std	Y+32, r25	; 0x20
    2478:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247a:	89 a1       	ldd	r24, Y+33	; 0x21
    247c:	9a a1       	ldd	r25, Y+34	; 0x22
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	9a a3       	std	Y+34, r25	; 0x22
    2482:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	00 97       	sbiw	r24, 0x00	; 0
    248a:	69 f7       	brne	.-38     	; 0x2466 <STEP_u16SetAngleClockwise+0x234>
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <STEP_u16SetAngleClockwise+0x284>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248e:	6b a1       	ldd	r22, Y+35	; 0x23
    2490:	7c a1       	ldd	r23, Y+36	; 0x24
    2492:	8d a1       	ldd	r24, Y+37	; 0x25
    2494:	9e a1       	ldd	r25, Y+38	; 0x26
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
    24a2:	89 a1       	ldd	r24, Y+33	; 0x21
    24a4:	9a a1       	ldd	r25, Y+34	; 0x22
    24a6:	9e 8f       	std	Y+30, r25	; 0x1e
    24a8:	8d 8f       	std	Y+29, r24	; 0x1d
    24aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	f1 f7       	brne	.-4      	; 0x24ae <STEP_u16SetAngleClockwise+0x27c>
    24b2:	9e 8f       	std	Y+30, r25	; 0x1e
    24b4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_HIGH);
    24b6:	83 e0       	ldi	r24, 0x03	; 3
    24b8:	62 e0       	ldi	r22, 0x02	; 2
    24ba:	41 e0       	ldi	r20, 0x01	; 1
    24bc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_LOW);
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	63 e0       	ldi	r22, 0x03	; 3
    24c4:	40 e0       	ldi	r20, 0x00	; 0
    24c6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    24ca:	83 e0       	ldi	r24, 0x03	; 3
    24cc:	64 e0       	ldi	r22, 0x04	; 4
    24ce:	41 e0       	ldi	r20, 0x01	; 1
    24d0:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    24d4:	83 e0       	ldi	r24, 0x03	; 3
    24d6:	65 e0       	ldi	r22, 0x05	; 5
    24d8:	41 e0       	ldi	r20, 0x01	; 1
    24da:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    24de:	80 e0       	ldi	r24, 0x00	; 0
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	a0 e0       	ldi	r26, 0x00	; 0
    24e4:	b0 e4       	ldi	r27, 0x40	; 64
    24e6:	89 8f       	std	Y+25, r24	; 0x19
    24e8:	9a 8f       	std	Y+26, r25	; 0x1a
    24ea:	ab 8f       	std	Y+27, r26	; 0x1b
    24ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	4a ef       	ldi	r20, 0xFA	; 250
    24fc:	54 e4       	ldi	r21, 0x44	; 68
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	8d 8b       	std	Y+21, r24	; 0x15
    2508:	9e 8b       	std	Y+22, r25	; 0x16
    250a:	af 8b       	std	Y+23, r26	; 0x17
    250c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    250e:	6d 89       	ldd	r22, Y+21	; 0x15
    2510:	7e 89       	ldd	r23, Y+22	; 0x16
    2512:	8f 89       	ldd	r24, Y+23	; 0x17
    2514:	98 8d       	ldd	r25, Y+24	; 0x18
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5f e3       	ldi	r21, 0x3F	; 63
    251e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2522:	88 23       	and	r24, r24
    2524:	2c f4       	brge	.+10     	; 0x2530 <STEP_u16SetAngleClockwise+0x2fe>
		__ticks = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	3f c0       	rjmp	.+126    	; 0x25ae <STEP_u16SetAngleClockwise+0x37c>
	else if (__tmp > 65535)
    2530:	6d 89       	ldd	r22, Y+21	; 0x15
    2532:	7e 89       	ldd	r23, Y+22	; 0x16
    2534:	8f 89       	ldd	r24, Y+23	; 0x17
    2536:	98 8d       	ldd	r25, Y+24	; 0x18
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	3f ef       	ldi	r19, 0xFF	; 255
    253c:	4f e7       	ldi	r20, 0x7F	; 127
    253e:	57 e4       	ldi	r21, 0x47	; 71
    2540:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2544:	18 16       	cp	r1, r24
    2546:	4c f5       	brge	.+82     	; 0x259a <STEP_u16SetAngleClockwise+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2548:	69 8d       	ldd	r22, Y+25	; 0x19
    254a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    254c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    254e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e2       	ldi	r20, 0x20	; 32
    2556:	51 e4       	ldi	r21, 0x41	; 65
    2558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	9c 8b       	std	Y+20, r25	; 0x14
    256e:	8b 8b       	std	Y+19, r24	; 0x13
    2570:	0f c0       	rjmp	.+30     	; 0x2590 <STEP_u16SetAngleClockwise+0x35e>
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	9a 8b       	std	Y+18, r25	; 0x12
    2578:	89 8b       	std	Y+17, r24	; 0x11
    257a:	89 89       	ldd	r24, Y+17	; 0x11
    257c:	9a 89       	ldd	r25, Y+18	; 0x12
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <STEP_u16SetAngleClockwise+0x34c>
    2582:	9a 8b       	std	Y+18, r25	; 0x12
    2584:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	8b 89       	ldd	r24, Y+19	; 0x13
    2588:	9c 89       	ldd	r25, Y+20	; 0x14
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	9c 8b       	std	Y+20, r25	; 0x14
    258e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	00 97       	sbiw	r24, 0x00	; 0
    2596:	69 f7       	brne	.-38     	; 0x2572 <STEP_u16SetAngleClockwise+0x340>
    2598:	14 c0       	rjmp	.+40     	; 0x25c2 <STEP_u16SetAngleClockwise+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    259a:	6d 89       	ldd	r22, Y+21	; 0x15
    259c:	7e 89       	ldd	r23, Y+22	; 0x16
    259e:	8f 89       	ldd	r24, Y+23	; 0x17
    25a0:	98 8d       	ldd	r25, Y+24	; 0x18
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9c 8b       	std	Y+20, r25	; 0x14
    25ac:	8b 8b       	std	Y+19, r24	; 0x13
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	98 8b       	std	Y+16, r25	; 0x10
    25b4:	8f 87       	std	Y+15, r24	; 0x0f
    25b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b8:	98 89       	ldd	r25, Y+16	; 0x10
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <STEP_u16SetAngleClockwise+0x388>
    25be:	98 8b       	std	Y+16, r25	; 0x10
    25c0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_LOW);
    25c2:	83 e0       	ldi	r24, 0x03	; 3
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	40 e0       	ldi	r20, 0x00	; 0
    25c8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_HIGH);
    25cc:	83 e0       	ldi	r24, 0x03	; 3
    25ce:	63 e0       	ldi	r22, 0x03	; 3
    25d0:	41 e0       	ldi	r20, 0x01	; 1
    25d2:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_HIGH);
    25d6:	83 e0       	ldi	r24, 0x03	; 3
    25d8:	64 e0       	ldi	r22, 0x04	; 4
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
    25e0:	83 e0       	ldi	r24, 0x03	; 3
    25e2:	65 e0       	ldi	r22, 0x05	; 5
    25e4:	41 e0       	ldi	r20, 0x01	; 1
    25e6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	a0 e0       	ldi	r26, 0x00	; 0
    25f0:	b0 e4       	ldi	r27, 0x40	; 64
    25f2:	8b 87       	std	Y+11, r24	; 0x0b
    25f4:	9c 87       	std	Y+12, r25	; 0x0c
    25f6:	ad 87       	std	Y+13, r26	; 0x0d
    25f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2600:	9e 85       	ldd	r25, Y+14	; 0x0e
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a ef       	ldi	r20, 0xFA	; 250
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8f 83       	std	Y+7, r24	; 0x07
    2614:	98 87       	std	Y+8, r25	; 0x08
    2616:	a9 87       	std	Y+9, r26	; 0x09
    2618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <STEP_u16SetAngleClockwise+0x40a>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <STEP_u16SetAngleClockwise+0x488>
	else if (__tmp > 65535)
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	3f ef       	ldi	r19, 0xFF	; 255
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	57 e4       	ldi	r21, 0x47	; 71
    264c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <STEP_u16SetAngleClockwise+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	0f c0       	rjmp	.+30     	; 0x269c <STEP_u16SetAngleClockwise+0x46a>
    267e:	88 ec       	ldi	r24, 0xC8	; 200
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <STEP_u16SetAngleClockwise+0x458>
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	69 f7       	brne	.-38     	; 0x267e <STEP_u16SetAngleClockwise+0x44c>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <STEP_u16SetAngleClockwise+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <STEP_u16SetAngleClockwise+0x494>
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01

void STEP_u16SetAngleClockwise(u16 Copy_u16Angle)
{
	u16 Local_u16Steps=0;
	Local_u16Steps=(Copy_u16Angle/0.175)/4;
	for(Local_u16Steps;Local_u16Steps>0;Local_u16Steps--)
    26ce:	89 ad       	ldd	r24, Y+57	; 0x39
    26d0:	9a ad       	ldd	r25, Y+58	; 0x3a
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	9a af       	std	Y+58, r25	; 0x3a
    26d6:	89 af       	std	Y+57, r24	; 0x39
    26d8:	89 ad       	ldd	r24, Y+57	; 0x39
    26da:	9a ad       	ldd	r25, Y+58	; 0x3a
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	09 f0       	breq	.+2      	; 0x26e2 <STEP_u16SetAngleClockwise+0x4b0>
    26e0:	de cd       	rjmp	.-1092   	; 0x229e <STEP_u16SetAngleClockwise+0x6c>
		DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_HIGH);
		_delay_ms(2);

	}

}
    26e2:	ec 96       	adiw	r28, 0x3c	; 60
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <STEP_voidStop>:
void STEP_voidStop(void)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	cd b7       	in	r28, 0x3d	; 61
    26fa:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8PORTD,STEP_BLUE,DIO_u8PIN_LOW);
    26fc:	83 e0       	ldi	r24, 0x03	; 3
    26fe:	62 e0       	ldi	r22, 0x02	; 2
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,STEP_PINK,DIO_u8PIN_LOW);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	63 e0       	ldi	r22, 0x03	; 3
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,STEP_YELLOW,DIO_u8PIN_LOW);
    2710:	83 e0       	ldi	r24, 0x03	; 3
    2712:	64 e0       	ldi	r22, 0x04	; 4
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8PORTD,STEP_ORANGE,DIO_u8PIN_LOW);
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	65 e0       	ldi	r22, 0x05	; 5
    271e:	40 e0       	ldi	r20, 0x00	; 0
    2720:	0e 94 aa 0b 	call	0x1754	; 0x1754 <DIO_u8SetPinValue>
}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <main>:
void DC(void);
void Stepper(void);
void Servo(void);
u8 Verification;
void main(void)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	61 97       	sbiw	r28, 0x11	; 17
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
	PORT_voidinit();
    273e:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <PORT_voidinit>
	CLCD_voidInit();
    2742:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CLCD_voidInit>
	u8 try=0;
    2746:	19 8a       	std	Y+17, r1	; 0x11
	u8 flag;
	u8 Key;
	while(1)
	{
		/*Verification Menu*/
		Verification=LoginDashboard();
    2748:	0e 94 62 14 	call	0x28c4	; 0x28c4 <LoginDashboard>
    274c:	80 93 01 02 	sts	0x0201, r24
		if(Verification==OK)
    2750:	80 91 01 02 	lds	r24, 0x0201
    2754:	88 23       	and	r24, r24
    2756:	51 f5       	brne	.+84     	; 0x27ac <main+0x82>
		{
			CLCD_voidGoToXY(1,9);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	69 e0       	ldi	r22, 0x09	; 9
    275c:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
			CLCD_voidSendString("Correct");
    2760:	80 e6       	ldi	r24, 0x60	; 96
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
    2768:	38 c0       	rjmp	.+112    	; 0x27da <main+0xb0>
		}
		else
		{
			while(try<2)
			{
				CLCD_voidSendCommand(1);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
				CLCD_voidGoToXY(1,11);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	6b e0       	ldi	r22, 0x0B	; 11
    2774:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
				CLCD_voidSendString("try");
    2778:	88 e6       	ldi	r24, 0x68	; 104
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
				Verification=LoginDashboard();
    2780:	0e 94 62 14 	call	0x28c4	; 0x28c4 <LoginDashboard>
    2784:	80 93 01 02 	sts	0x0201, r24
				if(Verification==OK)
    2788:	80 91 01 02 	lds	r24, 0x0201
    278c:	88 23       	and	r24, r24
    278e:	19 f4       	brne	.+6      	; 0x2796 <main+0x6c>
				{
					flag=1;
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	88 8b       	std	Y+16, r24	; 0x10
    2794:	0e c0       	rjmp	.+28     	; 0x27b2 <main+0x88>
					break;
				}
				else
				{
					CLCD_voidGoToXY(1,11);
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	6b e0       	ldi	r22, 0x0B	; 11
    279a:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
					CLCD_voidSendString("try");
    279e:	88 e6       	ldi	r24, 0x68	; 104
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
				}
				try++;
    27a6:	89 89       	ldd	r24, Y+17	; 0x11
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	89 8b       	std	Y+17, r24	; 0x11
			CLCD_voidGoToXY(1,9);
			CLCD_voidSendString("Correct");
		}
		else
		{
			while(try<2)
    27ac:	89 89       	ldd	r24, Y+17	; 0x11
    27ae:	82 30       	cpi	r24, 0x02	; 2
    27b0:	e0 f2       	brcs	.-72     	; 0x276a <main+0x40>
					CLCD_voidGoToXY(1,11);
					CLCD_voidSendString("try");
				}
				try++;
			}
			if(flag!=1)
    27b2:	88 89       	ldd	r24, Y+16	; 0x10
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	49 f0       	breq	.+18     	; 0x27ca <main+0xa0>
			{
				CLCD_voidGoToXY(1,11);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	6b e0       	ldi	r22, 0x0B	; 11
    27bc:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
				CLCD_voidSendString("Wrong");
    27c0:	8c e6       	ldi	r24, 0x6C	; 108
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
    27c8:	08 c0       	rjmp	.+16     	; 0x27da <main+0xb0>
			}
			else
			{

				CLCD_voidGoToXY(1,9);
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	69 e0       	ldi	r22, 0x09	; 9
    27ce:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
				CLCD_voidSendString("Correct");
    27d2:	80 e6       	ldi	r24, 0x60	; 96
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	aa e7       	ldi	r26, 0x7A	; 122
    27e0:	b4 e4       	ldi	r27, 0x44	; 68
    27e2:	8b 87       	std	Y+11, r24	; 0x0b
    27e4:	9c 87       	std	Y+12, r25	; 0x0c
    27e6:	ad 87       	std	Y+13, r26	; 0x0d
    27e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8f 83       	std	Y+7, r24	; 0x07
    2804:	98 87       	std	Y+8, r25	; 0x08
    2806:	a9 87       	std	Y+9, r26	; 0x09
    2808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <main+0x102>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <main+0x180>
	else if (__tmp > 65535)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <main+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	0f c0       	rjmp	.+30     	; 0x288c <main+0x162>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <main+0x150>
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <main+0x144>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <main+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <main+0x18c>
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		////////////////////////////////////////////////////////////////
		_delay_ms(1000);
		MotorSelection();
    28be:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <MotorSelection>
    28c2:	42 cf       	rjmp	.-380    	; 0x2748 <main+0x1e>

000028c4 <LoginDashboard>:


	}
}
u8 LoginDashboard(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	2e 97       	sbiw	r28, 0x0e	; 14
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
	u8 Verfied_check;
	u8 Local_Key;

	/*ID*/
	u8 ID_Arr[ID_PASS];
	u8 ID_counter=0;
    28d8:	1c 82       	std	Y+4, r1	; 0x04
	CLCD_voidGoToXY(0,0);
    28da:	80 e0       	ldi	r24, 0x00	; 0
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	CLCD_voidSendString("ID:");
    28e2:	82 e7       	ldi	r24, 0x72	; 114
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	CLCD_voidSendString("Pass:");
    28f2:	86 e7       	ldi	r24, 0x76	; 118
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(0,3);
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	63 e0       	ldi	r22, 0x03	; 3
    28fe:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
    2902:	1c c0       	rjmp	.+56     	; 0x293c <LoginDashboard+0x78>
	while(ID_counter<ID_PASS)
	{
		do
		{
			Local_Key=KPD_u8GetPressedKey();
    2904:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <KPD_u8GetPressedKey>
    2908:	8d 83       	std	Y+5, r24	; 0x05
		}while(Local_Key==0xff);
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	8f 3f       	cpi	r24, 0xFF	; 255
    290e:	d1 f3       	breq	.-12     	; 0x2904 <LoginDashboard+0x40>
		CLCD_voidWriteNumber(Local_Key);
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	88 2f       	mov	r24, r24
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	a0 e0       	ldi	r26, 0x00	; 0
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
		ID_Arr[ID_counter]=Local_Key;
    2922:	8c 81       	ldd	r24, Y+4	; 0x04
    2924:	28 2f       	mov	r18, r24
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	ce 01       	movw	r24, r28
    292a:	07 96       	adiw	r24, 0x07	; 7
    292c:	fc 01       	movw	r30, r24
    292e:	e2 0f       	add	r30, r18
    2930:	f3 1f       	adc	r31, r19
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	80 83       	st	Z, r24
		ID_counter++;
    2936:	8c 81       	ldd	r24, Y+4	; 0x04
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	8c 83       	std	Y+4, r24	; 0x04
	CLCD_voidGoToXY(0,0);
	CLCD_voidSendString("ID:");
	CLCD_voidGoToXY(1,0);
	CLCD_voidSendString("Pass:");
	CLCD_voidGoToXY(0,3);
	while(ID_counter<ID_PASS)
    293c:	8c 81       	ldd	r24, Y+4	; 0x04
    293e:	84 30       	cpi	r24, 0x04	; 4
    2940:	08 f3       	brcs	.-62     	; 0x2904 <LoginDashboard+0x40>
		CLCD_voidWriteNumber(Local_Key);
		ID_Arr[ID_counter]=Local_Key;
		ID_counter++;
	}
	/*Password*/
	CLCD_voidGoToXY(1,5);
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	65 e0       	ldi	r22, 0x05	; 5
    2946:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	u8 Pass_Arr[ID_PASS];
	u8 Pass_counter=0;
    294a:	1b 82       	std	Y+3, r1	; 0x03
    294c:	1c c0       	rjmp	.+56     	; 0x2986 <LoginDashboard+0xc2>
	while(Pass_counter<ID_PASS)
	{
		do
		{
			Local_Key=KPD_u8GetPressedKey();
    294e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <KPD_u8GetPressedKey>
    2952:	8d 83       	std	Y+5, r24	; 0x05
		}while(Local_Key==0xff);
    2954:	8d 81       	ldd	r24, Y+5	; 0x05
    2956:	8f 3f       	cpi	r24, 0xFF	; 255
    2958:	d1 f3       	breq	.-12     	; 0x294e <LoginDashboard+0x8a>
		CLCD_voidWriteNumber(Local_Key);
    295a:	8d 81       	ldd	r24, Y+5	; 0x05
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e0       	ldi	r26, 0x00	; 0
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	0e 94 69 09 	call	0x12d2	; 0x12d2 <CLCD_voidWriteNumber>
		Pass_Arr[Pass_counter]=Local_Key;
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	ce 01       	movw	r24, r28
    2974:	0b 96       	adiw	r24, 0x0b	; 11
    2976:	fc 01       	movw	r30, r24
    2978:	e2 0f       	add	r30, r18
    297a:	f3 1f       	adc	r31, r19
    297c:	8d 81       	ldd	r24, Y+5	; 0x05
    297e:	80 83       	st	Z, r24
		Pass_counter++;
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	8f 5f       	subi	r24, 0xFF	; 255
    2984:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*Password*/
	CLCD_voidGoToXY(1,5);
	u8 Pass_Arr[ID_PASS];
	u8 Pass_counter=0;
	while(Pass_counter<ID_PASS)
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	84 30       	cpi	r24, 0x04	; 4
    298a:	08 f3       	brcs	.-62     	; 0x294e <LoginDashboard+0x8a>
		Pass_Arr[Pass_counter]=Local_Key;
		Pass_counter++;
	}

	u8 Compare_counter;
	u8 Check_counter= 0;
    298c:	19 82       	std	Y+1, r1	; 0x01
    298e:	1d c0       	rjmp	.+58     	; 0x29ca <LoginDashboard+0x106>

	while(Check_counter<4)
	{
		if((ID_Arr[Check_counter])==(Pass_Arr[(ID_PASS-1)-Check_counter]))
    2990:	89 81       	ldd	r24, Y+1	; 0x01
    2992:	28 2f       	mov	r18, r24
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	ce 01       	movw	r24, r28
    2998:	07 96       	adiw	r24, 0x07	; 7
    299a:	fc 01       	movw	r30, r24
    299c:	e2 0f       	add	r30, r18
    299e:	f3 1f       	adc	r31, r19
    29a0:	40 81       	ld	r20, Z
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	28 2f       	mov	r18, r24
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	bc 01       	movw	r22, r24
    29ae:	62 1b       	sub	r22, r18
    29b0:	73 0b       	sbc	r23, r19
    29b2:	9b 01       	movw	r18, r22
    29b4:	ce 01       	movw	r24, r28
    29b6:	0b 96       	adiw	r24, 0x0b	; 11
    29b8:	fc 01       	movw	r30, r24
    29ba:	e2 0f       	add	r30, r18
    29bc:	f3 1f       	adc	r31, r19
    29be:	80 81       	ld	r24, Z
    29c0:	48 17       	cp	r20, r24
    29c2:	31 f4       	brne	.+12     	; 0x29d0 <LoginDashboard+0x10c>
		{
			Check_counter++;
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	89 83       	std	Y+1, r24	; 0x01
	}

	u8 Compare_counter;
	u8 Check_counter= 0;

	while(Check_counter<4)
    29ca:	89 81       	ldd	r24, Y+1	; 0x01
    29cc:	84 30       	cpi	r24, 0x04	; 4
    29ce:	00 f3       	brcs	.-64     	; 0x2990 <LoginDashboard+0xcc>
		else
		{
			break;
		}
	}
	if(Check_counter==ID_PASS)
    29d0:	89 81       	ldd	r24, Y+1	; 0x01
    29d2:	84 30       	cpi	r24, 0x04	; 4
    29d4:	11 f4       	brne	.+4      	; 0x29da <LoginDashboard+0x116>
	{
		Verfied_check=OK;
    29d6:	1e 82       	std	Y+6, r1	; 0x06
    29d8:	02 c0       	rjmp	.+4      	; 0x29de <LoginDashboard+0x11a>
	}
	else
	{
		Verfied_check=NOK;
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	8e 83       	std	Y+6, r24	; 0x06
	}

	return Verfied_check;
    29de:	8e 81       	ldd	r24, Y+6	; 0x06

}
    29e0:	2e 96       	adiw	r28, 0x0e	; 14
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <MotorSelection>:
void MotorSelection(void)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	2f 97       	sbiw	r28, 0x0f	; 15
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Key;
	if(Verification==OK)
    2a06:	80 91 01 02 	lds	r24, 0x0201
    2a0a:	88 23       	and	r24, r24
    2a0c:	09 f0       	breq	.+2      	; 0x2a10 <MotorSelection+0x1e>
    2a0e:	af c0       	rjmp	.+350    	; 0x2b6e <MotorSelection+0x17c>
	{
		CLCD_voidSendCommand(1);
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
		CLCD_voidGoToXY(0,5);
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	65 e0       	ldi	r22, 0x05	; 5
    2a1a:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidSendString("Welcome");
    2a1e:	8c e7       	ldi	r24, 0x7C	; 124
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,2);
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	62 e0       	ldi	r22, 0x02	; 2
    2a2a:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidSendString("to Motor DB");
    2a2e:	84 e8       	ldi	r24, 0x84	; 132
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	90 ec       	ldi	r25, 0xC0	; 192
    2a3a:	aa e5       	ldi	r26, 0x5A	; 90
    2a3c:	b5 e4       	ldi	r27, 0x45	; 69
    2a3e:	8b 87       	std	Y+11, r24	; 0x0b
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	ad 87       	std	Y+13, r26	; 0x0d
    2a44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	4a ef       	ldi	r20, 0xFA	; 250
    2a54:	54 e4       	ldi	r21, 0x44	; 68
    2a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	8f 83       	std	Y+7, r24	; 0x07
    2a60:	98 87       	std	Y+8, r25	; 0x08
    2a62:	a9 87       	std	Y+9, r26	; 0x09
    2a64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a66:	6f 81       	ldd	r22, Y+7	; 0x07
    2a68:	78 85       	ldd	r23, Y+8	; 0x08
    2a6a:	89 85       	ldd	r24, Y+9	; 0x09
    2a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7a:	88 23       	and	r24, r24
    2a7c:	2c f4       	brge	.+10     	; 0x2a88 <MotorSelection+0x96>
		__ticks = 1;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	9e 83       	std	Y+6, r25	; 0x06
    2a84:	8d 83       	std	Y+5, r24	; 0x05
    2a86:	3f c0       	rjmp	.+126    	; 0x2b06 <MotorSelection+0x114>
	else if (__tmp > 65535)
    2a88:	6f 81       	ldd	r22, Y+7	; 0x07
    2a8a:	78 85       	ldd	r23, Y+8	; 0x08
    2a8c:	89 85       	ldd	r24, Y+9	; 0x09
    2a8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	3f ef       	ldi	r19, 0xFF	; 255
    2a94:	4f e7       	ldi	r20, 0x7F	; 127
    2a96:	57 e4       	ldi	r21, 0x47	; 71
    2a98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a9c:	18 16       	cp	r1, r24
    2a9e:	4c f5       	brge	.+82     	; 0x2af2 <MotorSelection+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2aa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	40 e2       	ldi	r20, 0x20	; 32
    2aae:	51 e4       	ldi	r21, 0x41	; 65
    2ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	9e 83       	std	Y+6, r25	; 0x06
    2ac6:	8d 83       	std	Y+5, r24	; 0x05
    2ac8:	0f c0       	rjmp	.+30     	; 0x2ae8 <MotorSelection+0xf6>
    2aca:	88 ec       	ldi	r24, 0xC8	; 200
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9c 83       	std	Y+4, r25	; 0x04
    2ad0:	8b 83       	std	Y+3, r24	; 0x03
    2ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <MotorSelection+0xe4>
    2ada:	9c 83       	std	Y+4, r25	; 0x04
    2adc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ade:	8d 81       	ldd	r24, Y+5	; 0x05
    2ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	00 97       	sbiw	r24, 0x00	; 0
    2aee:	69 f7       	brne	.-38     	; 0x2aca <MotorSelection+0xd8>
    2af0:	14 c0       	rjmp	.+40     	; 0x2b1a <MotorSelection+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af2:	6f 81       	ldd	r22, Y+7	; 0x07
    2af4:	78 85       	ldd	r23, Y+8	; 0x08
    2af6:	89 85       	ldd	r24, Y+9	; 0x09
    2af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	9e 83       	std	Y+6, r25	; 0x06
    2b04:	8d 83       	std	Y+5, r24	; 0x05
    2b06:	8d 81       	ldd	r24, Y+5	; 0x05
    2b08:	9e 81       	ldd	r25, Y+6	; 0x06
    2b0a:	9a 83       	std	Y+2, r25	; 0x02
    2b0c:	89 83       	std	Y+1, r24	; 0x01
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	9a 81       	ldd	r25, Y+2	; 0x02
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	f1 f7       	brne	.-4      	; 0x2b12 <MotorSelection+0x120>
    2b16:	9a 83       	std	Y+2, r25	; 0x02
    2b18:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3500);

		CLCD_voidGoToXY(0,0);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidSendString("Choose one Motor");
    2b22:	80 e9       	ldi	r24, 0x90	; 144
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
		CLCD_voidGoToXY(1,0);
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	60 e0       	ldi	r22, 0x00	; 0
    2b2e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
		CLCD_voidSendString("1.DC 2.STP 3.SRV");
    2b32:	81 ea       	ldi	r24, 0xA1	; 161
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
		do
		{
			Local_Key=KPD_u8GetPressedKey();
    2b3a:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <KPD_u8GetPressedKey>
    2b3e:	8f 87       	std	Y+15, r24	; 0x0f
		}while(Local_Key==0xff);
    2b40:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b42:	8f 3f       	cpi	r24, 0xFF	; 255
    2b44:	d1 f3       	breq	.-12     	; 0x2b3a <MotorSelection+0x148>
		switch(Local_Key)
    2b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b48:	88 2f       	mov	r24, r24
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	81 30       	cpi	r24, 0x01	; 1
    2b4e:	91 05       	cpc	r25, r1
    2b50:	19 f4       	brne	.+6      	; 0x2b58 <MotorSelection+0x166>
		{
		case 1:DC();break;
    2b52:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <DC>
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <MotorSelection+0x17c>
		case 2://Stepper();break;
		case 3://Servo();break;
		default:CLCD_voidSendCommand(1);CLCD_voidGoToXY(0,2);CLCD_voidSendString("Wrong Choice");
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	62 e0       	ldi	r22, 0x02	; 2
    2b62:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
    2b66:	82 eb       	ldi	r24, 0xB2	; 178
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
		}

	}
}
    2b6e:	2f 96       	adiw	r28, 0x0f	; 15
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	08 95       	ret

00002b80 <DC>:
void DC(void)
{
    2b80:	df 93       	push	r29
    2b82:	cf 93       	push	r28
    2b84:	cd b7       	in	r28, 0x3d	; 61
    2b86:	de b7       	in	r29, 0x3e	; 62
    2b88:	61 97       	sbiw	r28, 0x11	; 17
    2b8a:	0f b6       	in	r0, 0x3f	; 63
    2b8c:	f8 94       	cli
    2b8e:	de bf       	out	0x3e, r29	; 62
    2b90:	0f be       	out	0x3f, r0	; 63
    2b92:	cd bf       	out	0x3d, r28	; 61
	u8 Local_Key;

	CLCD_voidSendCommand(1);
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
	CLCD_voidGoToXY(0,0);
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	60 e0       	ldi	r22, 0x00	; 0
    2b9e:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	CLCD_voidSendString("Rotation Direction:");
    2ba2:	8f eb       	ldi	r24, 0xBF	; 191
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
	CLCD_voidGoToXY(1,0);
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	60 e0       	ldi	r22, 0x00	; 0
    2bae:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
	CLCD_voidSendString("1.CW  2.CCW");
    2bb2:	83 ed       	ldi	r24, 0xD3	; 211
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
	do
	{
		Local_Key=KPD_u8GetPressedKey();
    2bba:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <KPD_u8GetPressedKey>
    2bbe:	8f 87       	std	Y+15, r24	; 0x0f
	}while(Local_Key==0xff);
    2bc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc4:	d1 f3       	breq	.-12     	; 0x2bba <DC+0x3a>
	switch(Local_Key)
    2bc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	39 8b       	std	Y+17, r19	; 0x11
    2bce:	28 8b       	std	Y+16, r18	; 0x10
    2bd0:	88 89       	ldd	r24, Y+16	; 0x10
    2bd2:	99 89       	ldd	r25, Y+17	; 0x11
    2bd4:	81 30       	cpi	r24, 0x01	; 1
    2bd6:	91 05       	cpc	r25, r1
    2bd8:	31 f0       	breq	.+12     	; 0x2be6 <DC+0x66>
    2bda:	28 89       	ldd	r18, Y+16	; 0x10
    2bdc:	39 89       	ldd	r19, Y+17	; 0x11
    2bde:	22 30       	cpi	r18, 0x02	; 2
    2be0:	31 05       	cpc	r19, r1
    2be2:	21 f0       	breq	.+8      	; 0x2bec <DC+0x6c>
    2be4:	06 c0       	rjmp	.+12     	; 0x2bf2 <DC+0x72>
	{
	case 1:DCM_voidRotateClockwise();break;
    2be6:	0e 94 1d 0a 	call	0x143a	; 0x143a <DCM_voidRotateClockwise>
    2bea:	83 c0       	rjmp	.+262    	; 0x2cf2 <DC+0x172>
	case 2:DCM_voidRotateAnticlockwise();break;
    2bec:	0e 94 2e 0a 	call	0x145c	; 0x145c <DCM_voidRotateAnticlockwise>
    2bf0:	80 c0       	rjmp	.+256    	; 0x2cf2 <DC+0x172>
	default:CLCD_voidSendCommand(1);CLCD_voidGoToXY(0,2);CLCD_voidSendString("Wrong Choice");_delay_ms(2000);CLCD_voidSendCommand(1);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	62 e0       	ldi	r22, 0x02	; 2
    2bfc:	0e 94 0a 09 	call	0x1214	; 0x1214 <CLCD_voidGoToXY>
    2c00:	82 eb       	ldi	r24, 0xB2	; 178
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	0e 94 53 08 	call	0x10a6	; 0x10a6 <CLCD_voidSendString>
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	aa ef       	ldi	r26, 0xFA	; 250
    2c0e:	b4 e4       	ldi	r27, 0x44	; 68
    2c10:	8b 87       	std	Y+11, r24	; 0x0b
    2c12:	9c 87       	std	Y+12, r25	; 0x0c
    2c14:	ad 87       	std	Y+13, r26	; 0x0d
    2c16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a ef       	ldi	r20, 0xFA	; 250
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	8f 83       	std	Y+7, r24	; 0x07
    2c32:	98 87       	std	Y+8, r25	; 0x08
    2c34:	a9 87       	std	Y+9, r26	; 0x09
    2c36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c38:	6f 81       	ldd	r22, Y+7	; 0x07
    2c3a:	78 85       	ldd	r23, Y+8	; 0x08
    2c3c:	89 85       	ldd	r24, Y+9	; 0x09
    2c3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <DC+0xda>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <DC+0x158>
	else if (__tmp > 65535)
    2c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5c:	78 85       	ldd	r23, Y+8	; 0x08
    2c5e:	89 85       	ldd	r24, Y+9	; 0x09
    2c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	4c f5       	brge	.+82     	; 0x2cc4 <DC+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e2       	ldi	r20, 0x20	; 32
    2c80:	51 e4       	ldi	r21, 0x41	; 65
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <DC+0x13a>
    2c9c:	88 ec       	ldi	r24, 0xC8	; 200
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <DC+0x128>
    2cac:	9c 83       	std	Y+4, r25	; 0x04
    2cae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	9e 83       	std	Y+6, r25	; 0x06
    2cb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <DC+0x11c>
    2cc2:	14 c0       	rjmp	.+40     	; 0x2cec <DC+0x16c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc6:	78 85       	ldd	r23, Y+8	; 0x08
    2cc8:	89 85       	ldd	r24, Y+9	; 0x09
    2cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	9a 83       	std	Y+2, r25	; 0x02
    2cde:	89 83       	std	Y+1, r24	; 0x01
    2ce0:	89 81       	ldd	r24, Y+1	; 0x01
    2ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <DC+0x164>
    2ce8:	9a 83       	std	Y+2, r25	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	0e 94 17 07 	call	0xe2e	; 0xe2e <CLCD_voidSendCommand>

	}
}
    2cf2:	61 96       	adiw	r28, 0x11	; 17
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	cf 91       	pop	r28
    2d00:	df 91       	pop	r29
    2d02:	08 95       	ret

00002d04 <__mulsi3>:
    2d04:	62 9f       	mul	r22, r18
    2d06:	d0 01       	movw	r26, r0
    2d08:	73 9f       	mul	r23, r19
    2d0a:	f0 01       	movw	r30, r0
    2d0c:	82 9f       	mul	r24, r18
    2d0e:	e0 0d       	add	r30, r0
    2d10:	f1 1d       	adc	r31, r1
    2d12:	64 9f       	mul	r22, r20
    2d14:	e0 0d       	add	r30, r0
    2d16:	f1 1d       	adc	r31, r1
    2d18:	92 9f       	mul	r25, r18
    2d1a:	f0 0d       	add	r31, r0
    2d1c:	83 9f       	mul	r24, r19
    2d1e:	f0 0d       	add	r31, r0
    2d20:	74 9f       	mul	r23, r20
    2d22:	f0 0d       	add	r31, r0
    2d24:	65 9f       	mul	r22, r21
    2d26:	f0 0d       	add	r31, r0
    2d28:	99 27       	eor	r25, r25
    2d2a:	72 9f       	mul	r23, r18
    2d2c:	b0 0d       	add	r27, r0
    2d2e:	e1 1d       	adc	r30, r1
    2d30:	f9 1f       	adc	r31, r25
    2d32:	63 9f       	mul	r22, r19
    2d34:	b0 0d       	add	r27, r0
    2d36:	e1 1d       	adc	r30, r1
    2d38:	f9 1f       	adc	r31, r25
    2d3a:	bd 01       	movw	r22, r26
    2d3c:	cf 01       	movw	r24, r30
    2d3e:	11 24       	eor	r1, r1
    2d40:	08 95       	ret

00002d42 <__udivmodsi4>:
    2d42:	a1 e2       	ldi	r26, 0x21	; 33
    2d44:	1a 2e       	mov	r1, r26
    2d46:	aa 1b       	sub	r26, r26
    2d48:	bb 1b       	sub	r27, r27
    2d4a:	fd 01       	movw	r30, r26
    2d4c:	0d c0       	rjmp	.+26     	; 0x2d68 <__udivmodsi4_ep>

00002d4e <__udivmodsi4_loop>:
    2d4e:	aa 1f       	adc	r26, r26
    2d50:	bb 1f       	adc	r27, r27
    2d52:	ee 1f       	adc	r30, r30
    2d54:	ff 1f       	adc	r31, r31
    2d56:	a2 17       	cp	r26, r18
    2d58:	b3 07       	cpc	r27, r19
    2d5a:	e4 07       	cpc	r30, r20
    2d5c:	f5 07       	cpc	r31, r21
    2d5e:	20 f0       	brcs	.+8      	; 0x2d68 <__udivmodsi4_ep>
    2d60:	a2 1b       	sub	r26, r18
    2d62:	b3 0b       	sbc	r27, r19
    2d64:	e4 0b       	sbc	r30, r20
    2d66:	f5 0b       	sbc	r31, r21

00002d68 <__udivmodsi4_ep>:
    2d68:	66 1f       	adc	r22, r22
    2d6a:	77 1f       	adc	r23, r23
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	1a 94       	dec	r1
    2d72:	69 f7       	brne	.-38     	; 0x2d4e <__udivmodsi4_loop>
    2d74:	60 95       	com	r22
    2d76:	70 95       	com	r23
    2d78:	80 95       	com	r24
    2d7a:	90 95       	com	r25
    2d7c:	9b 01       	movw	r18, r22
    2d7e:	ac 01       	movw	r20, r24
    2d80:	bd 01       	movw	r22, r26
    2d82:	cf 01       	movw	r24, r30
    2d84:	08 95       	ret

00002d86 <__prologue_saves__>:
    2d86:	2f 92       	push	r2
    2d88:	3f 92       	push	r3
    2d8a:	4f 92       	push	r4
    2d8c:	5f 92       	push	r5
    2d8e:	6f 92       	push	r6
    2d90:	7f 92       	push	r7
    2d92:	8f 92       	push	r8
    2d94:	9f 92       	push	r9
    2d96:	af 92       	push	r10
    2d98:	bf 92       	push	r11
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	cd b7       	in	r28, 0x3d	; 61
    2dac:	de b7       	in	r29, 0x3e	; 62
    2dae:	ca 1b       	sub	r28, r26
    2db0:	db 0b       	sbc	r29, r27
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	09 94       	ijmp

00002dbe <__epilogue_restores__>:
    2dbe:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc0:	39 88       	ldd	r3, Y+17	; 0x11
    2dc2:	48 88       	ldd	r4, Y+16	; 0x10
    2dc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dce:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd0:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd2:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd4:	df 80       	ldd	r13, Y+7	; 0x07
    2dd6:	ee 80       	ldd	r14, Y+6	; 0x06
    2dd8:	fd 80       	ldd	r15, Y+5	; 0x05
    2dda:	0c 81       	ldd	r16, Y+4	; 0x04
    2ddc:	1b 81       	ldd	r17, Y+3	; 0x03
    2dde:	aa 81       	ldd	r26, Y+2	; 0x02
    2de0:	b9 81       	ldd	r27, Y+1	; 0x01
    2de2:	ce 0f       	add	r28, r30
    2de4:	d1 1d       	adc	r29, r1
    2de6:	0f b6       	in	r0, 0x3f	; 63
    2de8:	f8 94       	cli
    2dea:	de bf       	out	0x3e, r29	; 62
    2dec:	0f be       	out	0x3f, r0	; 63
    2dee:	cd bf       	out	0x3d, r28	; 61
    2df0:	ed 01       	movw	r28, r26
    2df2:	08 95       	ret

00002df4 <_exit>:
    2df4:	f8 94       	cli

00002df6 <__stop_program>:
    2df6:	ff cf       	rjmp	.-2      	; 0x2df6 <__stop_program>
